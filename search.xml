<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Pytorch实现ResNet结构</title>
      <link href="/2023/02/21/Pytorch%E5%AE%9E%E7%8E%B0ResNet%E7%BB%93%E6%9E%84/"/>
      <url>/2023/02/21/Pytorch%E5%AE%9E%E7%8E%B0ResNet%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>用 Pytorch 搭建一个建议的 ResNet 网络。</p><span id="more"></span><p>没啥好注释的，堆叠残差块再接上一个分类层就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ResBlock</span>(nn.Module):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n_chans</span>):</span><br><span class="line">        <span class="built_in">super</span>(ResBlock, self).__init__()</span><br><span class="line">        self.conv = nn.Conv2d(n_chans, n_chans,</span><br><span class="line">                              kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>,</span><br><span class="line">                              bias=<span class="literal">False</span>)</span><br><span class="line">        self.batch_norm = nn.BatchNorm2d(num_features=n_chans)</span><br><span class="line">        torch.nn.init.kaiming_normal_(self.conv.weight,</span><br><span class="line">                                      nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        torch.nn.init.constant_(self.batch_norm.weight, <span class="number">0.5</span>)</span><br><span class="line">        torch.nn.init.zeros_(self.batch_norm.bias)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = self.conv(x)</span><br><span class="line">        out = self.batch_norm(out)</span><br><span class="line">        out = torch.relu(out)</span><br><span class="line">        <span class="keyword">return</span> out + x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deep ResNet</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResNetDemo</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n_chans1=<span class="number">32</span>, n_blocks=<span class="number">5</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(NetResDeep, self).__init__()</span><br><span class="line">        self.n_chans1 = n_chans1</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>, n_chans1, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.resblocks = nn.Sequential(</span><br><span class="line">            *(n_blocks * [ResBlock(n_chans=n_chans1)])</span><br><span class="line">        )</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">8</span> * <span class="number">8</span> * n_chans1, <span class="number">32</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">32</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = F.max_pool2d(torch.tanh(self.conv1(x)), <span class="number">2</span>)</span><br><span class="line">        out = self.resblocks(out)</span><br><span class="line">        out = F.max_pool2d(out, <span class="number">2</span>)</span><br><span class="line">        out = out.view(-<span class="number">1</span>, <span class="number">8</span> * <span class="number">8</span> * self.n_chans1)</span><br><span class="line">        out = torch.relu(self.fc1(out))</span><br><span class="line">        out = self.fc2(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分类任务与回归任务</title>
      <link href="/2023/02/09/%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%9B%9E%E5%BD%92%E4%BB%BB%E5%8A%A1/"/>
      <url>/2023/02/09/%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%9B%9E%E5%BD%92%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>分类任务与回归任务的联系和区别。</p><span id="more"></span><h4 id="区别与联系"><a href="#区别与联系" class="headerlink" title="区别与联系"></a>区别与联系</h4><ul><li>分类和回归都是监督学习，对输入数据进行预测</li><li>分类的输出结果是离散的，是物体所属类别，如猫、狗</li><li>回归的输出结果是连续的，是物体的值，在一段范围内即可</li><li><strong>连续与离散是表象，本质区别在于输出的标签是否有距离度量</strong>：分类任务没有距离度量，把 1 分类为 2 和把 1 分类为 3 没有区别；回归任务有距离度量，假设可乐的真实价格是5元，预测为4元，则误差为1元，预测为2元，则误差为3元</li><li>分类的目的是寻找 <strong>决策边界</strong>，得一个决策面，对数据集中数据进行分类，如判断图片中的动物是猫还是狗等</li><li>回归的目的是找到 <strong>最优拟合</strong>，得一个最优拟合线，这个线最好接近数据集中的各个点，如预测股票、预测房价等</li><li>分类模型和回归模型的 <strong>目标函数</strong> 不同，分类常见的是<code>log loss、hinge loss</code>， 而回归是 <code>square loss</code></li><li>全连接更适合分类任务，卷积更适合回归任务</li></ul><hr><h4 id="hinge-loss"><a href="#hinge-loss" class="headerlink" title="hinge loss"></a>hinge loss</h4><p><code>hinge loss</code> 是一种损失函数，它通常用于 <strong>maximum-margin</strong> 的分类任务中，如支持向量机。数学表达式为：<br>$$<br>L(y) ;&#x3D;; max,(0, , 1-\hat{y}y)<br>$$<br>其中 $$ \hat{y} $$  表示预测输出，通常都是软结果（输出不是0，1这种，可能是 0.87）， $$y$$  表示正确的类别。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Numpy小知识</title>
      <link href="/2022/11/08/Numpy%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/11/08/Numpy%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>Numpy 的一些常见写法。</p><span id="more"></span><p><code>import numpy as np</code></p><h3 id="np-genfromtxt"><a href="#np-genfromtxt" class="headerlink" title="np.genfromtxt"></a>np.genfromtxt</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file = np.genfromtxt(<span class="string">&#x27;file_name.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>, useclos=(<span class="number">0</span>,<span class="number">3</span>) skip_header=<span class="number">1</span>, dtype=<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># delimiter: 分隔符</span></span><br><span class="line"><span class="comment"># usecols 选取特定的列，若只选取某一列，则 usecols=(index,)</span></span><br><span class="line"><span class="comment"># skip_header: 设置文件开头需要跳过的行数，默认为 0</span></span><br><span class="line"><span class="comment"># dtype: 指定数据类型</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python小知识</title>
      <link href="/2022/10/27/Python%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/10/27/Python%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>Python 的一些常见技巧。</p><span id="more"></span><h3 id="round"><a href="#round" class="headerlink" title="round()"></a>round()</h3><p>python2 和 python3 版本的 <code>round()</code> 不太一样，这里我们就只以 python3 版本的为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多模态数据预处理</title>
      <link href="/2022/10/21/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
      <url>/2022/10/21/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>Multi-Modality data (Video, Audio, Text) pre-process.</p><span id="more"></span><h2 id="Video-Modality"><a href="#Video-Modality" class="headerlink" title="Video Modality"></a>Video Modality</h2><h3 id="从视频中每隔-16-帧抽取一张图片"><a href="#从视频中每隔-16-帧抽取一张图片" class="headerlink" title="从视频中每隔 16 帧抽取一张图片"></a>从视频中每隔 16 帧抽取一张图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">file_path = <span class="string">&#x27;videos_file_path&#x27;</span></span><br><span class="line">os.chdir(file_path)</span><br><span class="line">files = os.listdir(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    os.mkdir(<span class="string">&#x27;data_save_path&#x27;</span> + file)</span><br><span class="line">    </span><br><span class="line">    vc = cv2.VideoCapture(file_path + <span class="string">&#x27;/&#x27;</span> + file)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> vc.isOpened():</span><br><span class="line">        success, frame = vc.read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        success = <span class="literal">False</span>    </span><br><span class="line">    </span><br><span class="line">    n = <span class="number">1</span> <span class="comment"># 帧计数</span></span><br><span class="line">    timeF = <span class="number">16</span> <span class="comment"># 每隔 16 帧抽取一张图片</span></span><br><span class="line">    </span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> rval: </span><br><span class="line">        success, frame = vc.read()</span><br><span class="line">        <span class="keyword">if</span> frame <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        height, width, channels = frame.shape</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 判断截取的帧是否正常</span></span><br><span class="line">        <span class="keyword">if</span> (height &gt; <span class="number">0</span>) <span class="keyword">and</span> (width &gt; <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">if</span> (n % timeF == <span class="number">0</span>):</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                cv2.imwrite(<span class="string">f&#x27;data_save_path<span class="subst">&#123;file&#125;</span>/<span class="subst">&#123;i&#125;</span>.jpg&#x27;</span>, frame)</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    vc.release()</span><br></pre></td></tr></table></figure><h3 id="用-ResNet-101-预训练模型提取图片特征"><a href="#用-ResNet-101-预训练模型提取图片特征" class="headerlink" title="用 ResNet-101 预训练模型提取图片特征"></a>用 ResNet-101 预训练模型提取图片特征</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision.models <span class="keyword">import</span> resnet101</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose([                </span><br><span class="line">    transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda:1&#x27;</span>)</span><br><span class="line">model = resnet101(pretrained=<span class="literal">False</span>)</span><br><span class="line">model.fc = nn.Linear(in_features=model.fc.in_features, out_features=<span class="number">10</span>, bias=<span class="literal">True</span>)</span><br><span class="line">model.load_state_dict(torch.load(<span class="string">&#x27;resnet101.pth&#x27;</span>))</span><br><span class="line"><span class="keyword">del</span> model.fc</span><br><span class="line"></span><br><span class="line">model = model.to(device)</span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line">path = <span class="string">&#x27;data_save_path&#x27;</span></span><br><span class="line">os.chdir(path)</span><br><span class="line">directorys = os.listdir(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> directorys:</span><br><span class="line">    os.chdir(path + <span class="built_in">dir</span>)</span><br><span class="line">    imgs = os.listdir(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># resnet-101 最后一个 fc 层的输入维度是 1x2048</span></span><br><span class="line">    final_out_feature = torch.empty(<span class="number">1</span>, <span class="number">2048</span>)</span><br><span class="line">    final_out_feature = final_out_feature.to(device)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">        img_x = Image.<span class="built_in">open</span>(img)</span><br><span class="line">        img_x = transform(img_x)</span><br><span class="line">        img_x = img_x.to(device)</span><br><span class="line">        x = img_x.unsqueeze(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取最后一个 fc 层的输入</span></span><br><span class="line">        <span class="keyword">for</span> index, layer <span class="keyword">in</span> <span class="built_in">enumerate</span>(model.children()):</span><br><span class="line">            <span class="comment"># 打印 resnet-101 的结构，发现 fc 层的前面一层是 AdaptiveAvgPool2d 层</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(layer, nn.AdaptiveAvgPool2d):</span><br><span class="line">                x = layer(x)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                output_feature = layer(x) <span class="comment"># x 的维度是 1x1x1x2048</span></span><br><span class="line">                output_feature = output_feature.squeeze(<span class="number">2</span>)</span><br><span class="line">                output_feature = output_feature.squeeze(<span class="number">2</span>)</span><br><span class="line">        torch.save(output_feature, img + <span class="string">&#x27;.pt&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    pts = os.listdir(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    pts = [item <span class="keyword">for</span> item <span class="keyword">in</span> pts <span class="keyword">if</span> item.endswith(<span class="string">&#x27;jpg.pt&#x27;</span>)]</span><br><span class="line">    <span class="keyword">for</span> pt <span class="keyword">in</span> pts:</span><br><span class="line">        data = torch.load(pt)</span><br><span class="line">        final_out_feature += data</span><br><span class="line">    avg = nn.AdaptiveAvgPool1d(output_size=(<span class="number">2048</span>))</span><br><span class="line">    final_out_feature = avg(final_out_feature)</span><br><span class="line">    <span class="built_in">print</span>(final_out_feature)</span><br><span class="line">    torch.save(final_out_feature, <span class="built_in">dir</span> +<span class="string">&#x27;.pt&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dir</span>, final_out_feature.shape, <span class="string">&#x27;Success!&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="取图片特征的均值"><a href="#取图片特征的均值" class="headerlink" title="取图片特征的均值"></a>取图片特征的均值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;data_save_path&#x27;</span></span><br><span class="line">os.chdir(path)</span><br><span class="line">directorys = os.listdir(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> directorys:</span><br><span class="line">    os.chdir(path + <span class="built_in">dir</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># resnet-101 最后一个 fc 层的输入维度是 1x2048</span></span><br><span class="line">    final_out_feature = torch.empty(<span class="number">1</span>, <span class="number">2048</span>)</span><br><span class="line">    final_out_feature = final_out_feature.to(device)</span><br><span class="line"></span><br><span class="line">    pts = os.listdir(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    pts = [item <span class="keyword">for</span> item <span class="keyword">in</span> pts <span class="keyword">if</span> item.endswith(<span class="string">&#x27;jpg.pt&#x27;</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> pt <span class="keyword">in</span> pts:</span><br><span class="line">        data = torch.load(pt)</span><br><span class="line">        final_out_feature += data</span><br><span class="line">        </span><br><span class="line">    avg = nn.AdaptiveAvgPool1d(output_size=(<span class="number">2048</span>))</span><br><span class="line">    final_out_feature = avg(final_out_feature)</span><br><span class="line">    torch.save(final_out_feature, <span class="built_in">dir</span> +<span class="string">&#x27;.pt&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="Audio-Modality"><a href="#Audio-Modality" class="headerlink" title="Audio Modality"></a>Audio Modality</h2><h3 id="方法一：用-vggish-预训练模型提取音频特征"><a href="#方法一：用-vggish-预训练模型提取音频特征" class="headerlink" title="方法一：用 vggish 预训练模型提取音频特征"></a>方法一：用 vggish 预训练模型提取音频特征</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> my_vggish <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;data_path&#x27;</span></span><br><span class="line">os.chdir(path)</span><br><span class="line"></span><br><span class="line">all_files = os.listdir(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">wav_files = [file <span class="keyword">for</span> file <span class="keyword">in</span> all_files <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.wav&#x27;</span>)]</span><br><span class="line">abnormal_wav = []</span><br><span class="line"></span><br><span class="line">model = VGGish()</span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> wav_files:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        filename = path + <span class="string">&#x27;/&#x27;</span> +file</span><br><span class="line">        feature_data = model.forward(filename) <span class="comment"># feature_data 维度是 nx128, n 是 n_frames</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> feature_data.shape[<span class="number">0</span>] == <span class="number">128</span>:</span><br><span class="line">            feature_data = feature_data.unsqueeze(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对提取到的音频特征取均值</span></span><br><span class="line">        feature_data = torch.mean(feature_data, dim=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(feature_data.shape)</span><br><span class="line">        torch.save(feature_data, filename + <span class="string">&#x27;.pt&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(file, <span class="string">&#x27;Error!&#x27;</span>)</span><br><span class="line">        abnormal_wav.append(file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录下没有成功提取音频特征的文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;abnormal_wav.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> abnormal_wav:</span><br><span class="line">        f.write(<span class="built_in">str</span>(item))</span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="方法二：用-librosa-中的-mfcc-提取音频特征"><a href="#方法二：用-librosa-中的-mfcc-提取音频特征" class="headerlink" title="方法二：用 librosa 中的 mfcc 提取音频特征"></a>方法二：用 librosa 中的 mfcc 提取音频特征</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> librosa</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;data_path&#x27;</span></span><br><span class="line">os.chdir(path)</span><br><span class="line"></span><br><span class="line">all_files = os.listdir(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">wav_files = [file <span class="keyword">for</span> file <span class="keyword">in</span> all_files <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.wav&#x27;</span>)]</span><br><span class="line">abnormal_wav = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> wav_files:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        filename = path + <span class="string">&#x27;/&#x27;</span> + file</span><br><span class="line">        y, sr = librosa.load(filename, sr=<span class="literal">None</span>)</span><br><span class="line">        feature = librosa.feature.mfcc(y=y, sr=sr) <span class="comment"># feature 的维度是 20xn</span></span><br><span class="line">        feature_mean = np.mean(feature, axis=<span class="number">1</span>) <span class="comment"># 对音频特征求均值，维度变为 20</span></span><br><span class="line">        feature_data = torch.from_numpy(feature_mean)</span><br><span class="line">        torch.save(feature_data, filename + <span class="string">&#x27;.pt&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(file, <span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">        abnormal_wav.append(file)</span><br></pre></td></tr></table></figure><hr><h2 id="Text-Modality"><a href="#Text-Modality" class="headerlink" title="Text Modality"></a>Text Modality</h2><h3 id="方法一：用-BERT-提取文本特征"><a href="#方法一：用-BERT-提取文本特征" class="headerlink" title="方法一：用 BERT 提取文本特征"></a>方法一：用 BERT 提取文本特征</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tokenize <span class="keyword">import</span> TokenInfo</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> BertModel, BertTokenizer, BertConfig</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">tokenizer = BertTokenizer.from_pretrained(<span class="string">&#x27;/amax/wjq/datasets/bert&#x27;</span>)</span><br><span class="line">model = BertModel.from_pretrained(<span class="string">&#x27;/amax/wjq/datasets/bert&#x27;</span>)</span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">sentence = <span class="string">&#x27;Hello world!&#x27;</span></span><br><span class="line">text_dict = tokenizer.encode_plus(sentence, add_special_tokens=<span class="literal">True</span>, return_attention_mask=<span class="literal">True</span>)</span><br><span class="line">input_ids = torch.tensor(text_dict[<span class="string">&#x27;input_ids&#x27;</span>]).unsqueeze(<span class="number">0</span>)</span><br><span class="line">token_type_ids = torch.tensor(text_dict[<span class="string">&#x27;token_type_ids&#x27;</span>]).unsqueeze(<span class="number">0</span>)</span><br><span class="line">attention_mask = torch.tensor(text_dict[<span class="string">&#x27;attention_mask&#x27;</span>]).unsqueeze(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">res = model(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(text_dict)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用ResNet预训练模型</title>
      <link href="/2022/10/16/%E4%BD%BF%E7%94%A8ResNet%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/10/16/%E4%BD%BF%E7%94%A8ResNet%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>使用 Pyotrch 自带的预训练模型 ResNet，并进行一些自定义设计。</p><span id="more"></span><h2 id="打印每一层"><a href="#打印每一层" class="headerlink" title="打印每一层"></a>打印每一层</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision.models <span class="keyword">import</span> resnet101</span><br><span class="line"></span><br><span class="line">model = resnet101(pretrained=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(model._modules)</span><br></pre></td></tr></table></figure><h2 id="修改全连接层"><a href="#修改全连接层" class="headerlink" title="修改全连接层"></a>修改全连接层</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改输出神经元的个数</span></span><br><span class="line">model.fc = nn.Linear(in_features=model.fc.in_features, out_features=<span class="number">10</span>, bias=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 fc 层</span></span><br><span class="line"><span class="keyword">del</span> model.fc</span><br></pre></td></tr></table></figure><h2 id="获取指定层输出-x2F-访问每层输出"><a href="#获取指定层输出-x2F-访问每层输出" class="headerlink" title="获取指定层输出 &#x2F; 访问每层输出"></a>获取指定层输出 &#x2F; 访问每层输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = input_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, layer <span class="keyword">in</span> <span class="built_in">enumerate</span>(model.children()):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(layer, nn.AdaptiveAvgPool2d):</span><br><span class="line">        x = layer(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output_data = layer(x)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小刘的学习笔记</title>
      <link href="/2022/08/07/%E5%B0%8F%E5%88%98%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/08/07/%E5%B0%8F%E5%88%98%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>此文档为 <font color='green'><b>刘雨话</b></font> 小同学在学习 Python 过程中的作业笔记。</p><span id="more"></span><hr><h2 id="Mid-module-Assignment-Assignment-1"><a href="#Mid-module-Assignment-Assignment-1" class="headerlink" title="Mid-module Assignment - Assignment 1"></a>Mid-module Assignment - Assignment 1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">changeMarker</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    funciotn description</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    changes = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0.5</span>, <span class="number">0.2</span>, <span class="number">0.1</span>, <span class="number">0.05</span>, <span class="number">0.02</span>, <span class="number">0.01</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>,</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(changes)):</span><br><span class="line">            count = <span class="built_in">int</span>(<span class="built_in">round</span>(value / changes[i], <span class="number">2</span>))</span><br><span class="line">            value %= changes[i]</span><br><span class="line">            changes[i] = count</span><br><span class="line">            </span><br><span class="line">        two_pound, one_pound, p50, p20, p10, p5, p2, p1 = (count <span class="keyword">for</span> count <span class="keyword">in</span> changes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> two_pound, one_pound, p50, p20, p10, p5, p2, p1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myMean</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    funciotn description</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    sum_data = <span class="built_in">sum</span>(data)</span><br><span class="line">    length = <span class="built_in">len</span>(data)</span><br><span class="line">    mean = sum_data / length</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> mean</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myStd</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    funciotn description</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    mean = myMean(data)</span><br><span class="line">    sum_data = <span class="number">0.0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">        sum_data += (item - mean)**<span class="number">2</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    std = math.sqrt(sum_data / <span class="built_in">len</span>(data))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> std</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">curvingMarks</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    funciotn description</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    m = myMean(data)</span><br><span class="line">    s = myStd(data)</span><br><span class="line">    res = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;B&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;D&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;F&#x27;</span>:<span class="number">0</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> em <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> em &gt; (m + <span class="number">1.5</span>*s):</span><br><span class="line">            res[<span class="string">&#x27;A&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> em &gt;= (m + <span class="number">0.5</span>*s):</span><br><span class="line">            res[<span class="string">&#x27;B&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> em &gt;= (m - <span class="number">0.5</span>*s):</span><br><span class="line">            res[<span class="string">&#x27;C&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> em &gt;= (m - <span class="number">1.5</span>*s):</span><br><span class="line">            res[<span class="string">&#x27;D&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res[<span class="string">&#x27;F&#x27;</span>] += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    A, B, C, D, F = (count <span class="keyword">for</span> count <span class="keyword">in</span> res.values())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> A, B, C, D, F</span><br></pre></td></tr></table></figure><h2 id="2022-08-02-hw-0"><a href="#2022-08-02-hw-0" class="headerlink" title="2022-08-02_hw_0"></a>2022-08-02_hw_0</h2><p>输出一个九九乘法表，参考样例如下图所示。</p><p><img src="https://s2.loli.net/2022/08/07/Kxg2dvYDEQLf7Bu.jpg" alt="九九乘法表"></p><p><strong>答案仅供参考：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nums = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(nums)):</span><br><span class="line">        <span class="built_in">print</span>(nums[i], <span class="string">&#x27;x&#x27;</span>, nums[j], <span class="string">&#x27;=&#x27;</span>, nums[i]*nums[j], end=<span class="string">&#x27; | &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="2022-08-08-hw1"><a href="#2022-08-08-hw1" class="headerlink" title="2022-08-08_hw1"></a>2022-08-08_hw1</h2><p>给你一个字符串 s，如果 s 是一个回文字符串，返回 True；否则，返回 False。</p><p>回文字符串是指正序（从左向右）和倒序（从右向左）读都是一样的字符串。</p><p>例如，<code>bananab</code> 是回文字符串，<code>banana</code> 不是回文字符串。</p><p>下面给出几个示例：</p><ol><li><p>示例 1</p><p>输入：s &#x3D; ‘abba’</p><p>输出：true</p></li><li><p>示例 2</p><p>输入：s &#x3D; ‘ABAA’</p><p>输出：false</p></li></ol><p>现在给你一个字符串列表，str_list &#x3D; [‘a’, ‘ab’, ‘bananab’, ‘ABBC’, ‘abBA’]</p><p>请写代码来判断 str_list 中的每个元素是否都是回文字符串。</p><p><strong>代码仅供参考：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str_list = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;bananab&#x27;</span>, <span class="string">&#x27;ABBC&#x27;</span>, <span class="string">&#x27;abBA&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> str_list:</span><br><span class="line">    reverse_item = item[::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> reverse_item == item:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;true&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;false&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="2022-08-08-hw-2"><a href="#2022-08-08-hw-2" class="headerlink" title="2022-08-08_hw_2"></a>2022-08-08_hw_2</h2><p>给你一个整数 x ，如果 x 是一个回文整数，返回 True ；否则，返回 False 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p>例如，121 是回文，而 123 不是。</p><p>下面给出几个示例：</p><ol><li><p>示例 1</p><p>输入： x &#x3D; 121</p><p>输出：true</p></li><li><p>示例 2</p><p>输入：x &#x3D; - 121</p><p>输出：false</p><p>解释：从左向右读，为 -121。从右向左读，为 121-。因此它不是一个回文数。</p></li><li><p>示例 3</p><p>输入：x  &#x3D; 10</p><p>输出：false</p><p>解释：从右向左读，为 01。因此它不是一个回文数。</p></li></ol><p>现在给你一个列表（list）：num_list &#x3D; [121, 233, -121,  0, 10, -1, 1221]</p><p>请写代码来判断 num_list 中的每个元素，是否都是回文数。</p><p><strong>代码仅供参考：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># solution one</span></span><br><span class="line"></span><br><span class="line">num_list = [<span class="number">121</span>, <span class="number">233</span>, -<span class="number">121</span>, <span class="number">0</span>, <span class="number">10</span>, -<span class="number">1</span>, <span class="number">1221</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> num_list:</span><br><span class="line">    <span class="keyword">if</span> item &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (item, <span class="string">&#x27;False&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y = <span class="built_in">str</span>(item)</span><br><span class="line">        <span class="keyword">if</span> y == y[::-<span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(item, <span class="string">&#x27;True&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(item, <span class="string">&#x27;False&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># solution two</span></span><br><span class="line"></span><br><span class="line">num_list = [<span class="number">121</span>, <span class="number">233</span>, -<span class="number">121</span>, <span class="number">0</span>, <span class="number">10</span>, -<span class="number">1</span>, <span class="number">1221</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> num_list:</span><br><span class="line">    y = <span class="built_in">str</span>(item)</span><br><span class="line">    index = <span class="built_in">len</span>(y) - <span class="number">1</span></span><br><span class="line">    reverse_y = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> index &gt;= <span class="number">0</span>:</span><br><span class="line">        reverse_y.append(y[index])</span><br><span class="line">        index -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y)):</span><br><span class="line">        <span class="keyword">if</span> y[i] != reverse_y[i]:</span><br><span class="line">            <span class="built_in">print</span>(item, <span class="string">&#x27;False&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i == (<span class="built_in">len</span>(y) - <span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(item, <span class="string">&#x27;True&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># solution three</span></span><br><span class="line"></span><br><span class="line">num_list = [<span class="number">121</span>, <span class="number">233</span>, -<span class="number">121</span>, <span class="number">0</span>, <span class="number">10</span>, -<span class="number">1</span>, <span class="number">1221</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> num_list:</span><br><span class="line">    <span class="keyword">if</span> item &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(item, <span class="string">&#x27;False&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        right_to_left = []</span><br><span class="line">        temp = item</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> item:</span><br><span class="line">            digit = item % <span class="number">10</span></span><br><span class="line">            right_to_left.append(digit)</span><br><span class="line">            item //= <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(right_to_left)):</span><br><span class="line">            res += right_to_left[i]</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(right_to_left)-<span class="number">1</span>:</span><br><span class="line">                res *= <span class="number">10</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">if</span> res == temp:</span><br><span class="line">            <span class="built_in">print</span>(temp, <span class="string">&#x27;True&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(temp ,<span class="string">&#x27;False&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="下次课内容"><a href="#下次课内容" class="headerlink" title="下次课内容"></a>下次课内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">b = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;bdf&#x27;</span>, <span class="string">&#x27;124&#x27;</span>, <span class="number">1234</span>&#125;</span><br><span class="line">b.add(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">c = [<span class="number">1234</span>]</span><br><span class="line">b.update(c)</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line"><span class="built_in">tuple</span> = ()</span><br><span class="line"></span><br><span class="line">tup_1 = ()</span><br><span class="line">tup_2 = ()</span><br><span class="line"></span><br><span class="line">tup_3 = tup_1 + tup_2</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> tup</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">set</span>()</span><br><span class="line">b = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;bdf&#x27;</span>, <span class="string">&#x27;124&#x27;</span>, <span class="number">1234</span>&#125;</span><br><span class="line">b.add(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span>([(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)])</span><br><span class="line"><span class="keyword">del</span> <span class="built_in">dict</span>[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">dict</span>.clear()</span><br><span class="line"><span class="keyword">del</span> <span class="built_in">dict</span></span><br><span class="line"></span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">**</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">not</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">is</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line">c = a[:]</span><br><span class="line"></span><br><span class="line">b <span class="keyword">is</span> a <span class="comment"># True</span></span><br><span class="line">c <span class="keyword">is</span> a <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> - <span class="keyword">elif</span> - <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">class</span> student:</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self , n, a</span>):</span><br><span class="line">        self.name = n </span><br><span class="line">        self.age = a</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;My name is <span class="subst">&#123;self.name&#125;</span>, and I&#x27;</span>m &#123;self.age&#125; years old.<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">s = student(&#x27;</span>Tom<span class="string">&#x27;, 12)</span></span><br></pre></td></tr></table></figure><hr><h2 id="下下次课的内容"><a href="#下下次课的内容" class="headerlink" title="下下次课的内容"></a>下下次课的内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.plotting.register_matplotlib_converters()</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="comment"># print(&quot;Setup Complete&quot;)</span></span><br><span class="line"></span><br><span class="line">fifa_filepath = <span class="string">&#x27;./fifa.csv&#x27;</span></span><br><span class="line"></span><br><span class="line">fifa_data = pd.read_csv(fifa_filepath, index_col=<span class="string">&quot;Date&quot;</span>, parse_dates=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fifa_data.head()</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">6</span>))</span><br><span class="line">sns.lineplot(data=fifa_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#############################</span></span><br><span class="line"></span><br><span class="line">spotify_filepath = <span class="string">&quot;./spotify.csv&quot;</span></span><br><span class="line"></span><br><span class="line">spotify_data = pd.read_csv(spotify_filepath, index_col=<span class="string">&quot;Date&quot;</span>, parse_dates=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># spotify_data.tail()</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">4</span>)) <span class="comment"># width, height</span></span><br><span class="line">plt.title(<span class="string">&#x27;Daily Global Streams of Popular Songs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sns.lineplot(data=spotify_data[<span class="string">&#x27;Shape of You&#x27;</span>], label=<span class="string">&#x27;Shape of You&#x27;</span>)</span><br><span class="line">sns.lineplot(data=spotify_data[<span class="string">&#x27;Despacito&#x27;</span>], label=<span class="string">&#x27;Despacito&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.xlabel(&#x27;Date&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list(spotify_data.columns)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#############################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.plotting.register_matplotlib_converters()</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">file_path = <span class="string">&#x27;./flight_delays.csv&#x27;</span></span><br><span class="line">flight_data = pd.read_csv(file_path, index_col=<span class="string">&#x27;Month&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">4</span>))</span><br><span class="line">plt.title(<span class="string">&#x27;Average Delay&#x27;</span>)</span><br><span class="line">sns.barplot(x=flight_data.index, y=flight_data[<span class="string">&#x27;UA&#x27;</span>])</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Minutes&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flight_data</span><br><span class="line"></span><br><span class="line"><span class="comment">#############################</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line">plt.title(<span class="string">&#x27;Average Delay&#x27;</span>)</span><br><span class="line">sns.heatmap(data=flight_data, annot=<span class="literal">True</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Airline&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>服务器conda路径配置</title>
      <link href="/2022/07/29/%E6%9C%8D%E5%8A%A1%E5%99%A8conda%E8%B7%AF%E5%BE%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/07/29/%E6%9C%8D%E5%8A%A1%E5%99%A8conda%E8%B7%AF%E5%BE%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>服务器上经常需要配置 conda 的路径，故记之。</p><span id="more"></span><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>1. </p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 /home/user_name/ 目录下</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;usr/local/anaconda3/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">source</span> .bashrc</span><br><span class="line"></span><br><span class="line">conda config --add envs_dirs /data/user_name/.conda/envs</span><br><span class="line">conda config --add pkgs_dirs /data/user_name/.conda/pkgs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动 /home/user_name/.conda 至 /data/user_name/ 目录</span></span><br><span class="line"><span class="built_in">mv</span> <span class="variable">$HOME</span>/.conda/ /data/user_name/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刷题tricks</title>
      <link href="/2022/07/24/%E5%88%B7%E9%A2%98tricks/"/>
      <url>/2022/07/24/%E5%88%B7%E9%A2%98tricks/</url>
      
        <content type="html"><![CDATA[<p>一些刷题小技巧。</p><span id="more"></span><h2 id="字符串转为数字"><a href="#字符串转为数字" class="headerlink" title="字符串转为数字"></a>字符串转为数字</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一般字符串的处理方法</span></span><br><span class="line">string str = <span class="string">&quot;-100&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = <span class="built_in">atoi</span>(str.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长字符串处理方法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">strToint</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        ans = ans * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch常用代码片段</title>
      <link href="/2022/07/24/Pytorch%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
      <url>/2022/07/24/Pytorch%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<p>pytorch 常用代码总结。</p><span id="more"></span><h1 id="Pytorch代码片段总结"><a href="#Pytorch代码片段总结" class="headerlink" title="Pytorch代码片段总结"></a>Pytorch代码片段总结</h1><hr><h2 id="指定-GPU"><a href="#指定-GPU" class="headerlink" title="指定 GPU"></a>指定 GPU</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">device = torch.device(<span class="string">&quot;cuda:0&quot;</span>)</span><br><span class="line"><span class="comment"># 注意：这里 cuda 后面的冒号与数字 0 之间不能有空格</span></span><br><span class="line">model.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="string">&#x27;0, 1, 2&#x27;</span></span><br><span class="line">net.cuda(<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Dataloader"><a href="#Dataloader" class="headerlink" title="Dataloader"></a>Dataloader</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line">trainset = torchvision.datasets.ImageFolder(root=<span class="string">&#x27;./data/train&#x27;</span>, transform=transform_train)</span><br><span class="line">trainloader = torch.utils.data.DataLoader(trainset, batch_size=args.batch_size, shuffle=<span class="literal">True</span>, num_workers=args.num_workers)</span><br></pre></td></tr></table></figure><h2 id="args-设置"><a href="#args-设置" class="headerlink" title="args 设置"></a>args 设置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;--seed&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--epochs&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">100</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--batch_size&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">64</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--learning_rate&quot;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">1e-3</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用时：batch_size = args.batch_size</span></span><br></pre></td></tr></table></figure><h2 id="使用预训练模型"><a href="#使用预训练模型" class="headerlink" title="使用预训练模型"></a>使用预训练模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision.models <span class="keyword">import</span> resnet18</span><br><span class="line"></span><br><span class="line">model = resnet18(pretrained=<span class="literal">False</span>) <span class="comment"># 默认的 pretrained 为 False</span></span><br><span class="line">model.fc = nn.Linear(in_features=model.fc.in_features, out_features=<span class="number">10</span>, bias=<span class="literal">True</span>)</span><br><span class="line">model = model.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载已经下载好的模型</span></span><br><span class="line">model = resnet18(pretrained=<span class="literal">False</span>)</span><br><span class="line">model.load_state_dict(torch.load(<span class="string">&#x27;./model/resnet18-19c8e357.pth&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="设置随机数种子"><a href="#设置随机数种子" class="headerlink" title="设置随机数种子"></a>设置随机数种子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> torch.cuda.is_avaliable():</span><br><span class="line">    torch.cuda.manual_seed(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    torch.manual_seed(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="predict"><a href="#predict" class="headerlink" title="predict"></a>predict</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">correct = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">x, y = x.to(device), y.to(device)</span><br><span class="line"></span><br><span class="line">_, predict = y.<span class="built_in">max</span>(<span class="number">1</span>)</span><br><span class="line">correct += predict.eq(y).<span class="built_in">sum</span>().item()</span><br></pre></td></tr></table></figure><h2 id="搜索超参数"><a href="#搜索超参数" class="headerlink" title="搜索超参数"></a>搜索超参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> lbd_ac <span class="keyword">in</span> 1; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> lbd_cs <span class="keyword">in</span> 1e-1 1e0 1e1 1e2 ; <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">for</span> lbd_rb <span class="keyword">in</span> 1e-1 1e0 1e1 1e2 ; <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">tr</span> <span class="keyword">in</span> 1; <span class="keyword">do</span></span><br><span class="line">                CUDA_VISIBLE_DEVICES=1 python train.py --lbd_ac <span class="variable">$lbd_ac</span> --lbd_cs <span class="variable">$lbd_cs</span> --lbd_rb <span class="variable">$lbd_rb</span> --lbd_rc 1e-1 --trc 1e-3 --<span class="built_in">tr</span> <span class="variable">$tr</span> --label 1 &amp;</span><br><span class="line">                CUDA_VISIBLE_DEVICES=2 python train.py --lbd_ac <span class="variable">$lbd_ac</span> --lbd_cs <span class="variable">$lbd_cs</span> --lbd_rb <span class="variable">$lbd_rb</span> --lbd_rc 1e0 --trc 1e-3 --<span class="built_in">tr</span> <span class="variable">$tr</span> --label 2 &amp;</span><br><span class="line">                CUDA_VISIBLE_DEVICES=3 python train.py --lbd_ac <span class="variable">$lbd_ac</span> --lbd_cs <span class="variable">$lbd_cs</span> --lbd_rb <span class="variable">$lbd_rb</span> --lbd_rc 1e1 --trc 1e-3 --<span class="built_in">tr</span> <span class="variable">$tr</span> --label 3 &amp;</span><br><span class="line">                CUDA_VISIBLE_DEVICES=4 python train.py --lbd_ac <span class="variable">$lbd_ac</span> --lbd_cs <span class="variable">$lbd_cs</span> --lbd_rb <span class="variable">$lbd_rb</span> --lbd_rc 1e2 --trc 1e-3 --<span class="built_in">tr</span> <span class="variable">$tr</span> --label 4 &amp;</span><br><span class="line">                CUDA_VISIBLE_DEVICES=5 python train.py --lbd_ac <span class="variable">$lbd_ac</span> --lbd_cs <span class="variable">$lbd_cs</span> --lbd_rb <span class="variable">$lbd_rb</span> --lbd_rc 1e3 --trc 1e-3 --<span class="built_in">tr</span> <span class="variable">$tr</span> --label 5 </span><br><span class="line">                <span class="built_in">wait</span></span><br><span class="line">            <span class="keyword">done</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="tensor-保存为图片"><a href="#tensor-保存为图片" class="headerlink" title="tensor 保存为图片"></a>tensor 保存为图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_images</span>(<span class="params">images, img_list, idx, output_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Saves images to the output directory.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">          images: tensor with minibatch of images</span></span><br><span class="line"><span class="string">          img_list: list of filenames without path</span></span><br><span class="line"><span class="string">            If number of file names in this list less than number of images in</span></span><br><span class="line"><span class="string">            the minibatch then only first len(filenames) images will be saved.</span></span><br><span class="line"><span class="string">          output_dir: directory where to save images</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i, sample_idx <span class="keyword">in</span> <span class="built_in">enumerate</span>(idx.numpy()):</span><br><span class="line">        <span class="comment"># Images for inception classifier are normalized to be in [-1, 1] interval,</span></span><br><span class="line">        <span class="comment"># so rescale them back to [0, 1].</span></span><br><span class="line">        filename = img_list[sample_idx]</span><br><span class="line">        cur_images = (images[i, :, :, :].transpose(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>) * <span class="number">255</span>).astype(np.uint8)</span><br><span class="line"></span><br><span class="line">        im = Image.fromarray(cur_images)</span><br><span class="line">        im.save(<span class="string">&#x27;&#123;&#125;.png&#x27;</span>.<span class="built_in">format</span>(os.path.join(output_dir, filename)))</span><br></pre></td></tr></table></figure><h2 id="保存模型"><a href="#保存模型" class="headerlink" title="保存模型"></a>保存模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">torch.save(model, <span class="string">&#x27;model.pth&#x27;</span>)  <span class="comment"># 保存整个网络</span></span><br><span class="line">model = torch.load(<span class="string">&#x27;model.pth&#x27;</span>) <span class="comment"># 使用方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">torch.save(model.state_dict(), <span class="string">&#x27;model_params.pth&#x27;</span>)   <span class="comment"># 只保存网络中的参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方法</span></span><br><span class="line">model = Net()</span><br><span class="line">model.load_state_dict(torch.load(<span class="string">&#x27;model.pth&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg 常用命令</title>
      <link href="/2022/05/14/FFmpeg-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/05/14/FFmpeg-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>FFmpeg 剪辑视频的一些命令。</p><span id="more"></span><h1 id="FFmpeg-常用命令"><a href="#FFmpeg-常用命令" class="headerlink" title="FFmpeg 常用命令"></a>FFmpeg 常用命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">H:</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> FFOutput\</span><br><span class="line"></span><br><span class="line">ffmpeg -i 2.mts -vcodec copy -acodec copy -vbsf h264_mp4toannexb 2.ts</span><br><span class="line">ffmpeg -i 3.mts -vcodec copy -acodec copy -vbsf h264_mp4toannexb 3.ts</span><br><span class="line">ffmpeg -i 4.mts -vcodec copy -acodec copy -vbsf h264_mp4toannexb 4.ts</span><br><span class="line"></span><br><span class="line">copy con filelist.txt</span><br><span class="line">file <span class="string">&#x27;1.ts&#x27;</span></span><br><span class="line">file <span class="string">&#x27;1.ts&#x27;</span></span><br><span class="line">file <span class="string">&#x27;1.ts&#x27;</span></span><br><span class="line">file <span class="string">&#x27;1.ts&#x27;</span> </span><br><span class="line"></span><br><span class="line">:: Ctrl+z</span><br><span class="line">:: 回车退出</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ffmpeg -f concat -i filelist.txt -c copy output.mp4</span><br><span class="line"></span><br><span class="line">ffmpeg -i filename.mkv -c copy output.mp4</span><br><span class="line"></span><br><span class="line">ffmpeg -ss 00:00:00 -i input.mp4 -to 02:25:08 -c copy output.mp4</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Finish!&quot;</span></span><br><span class="line"></span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rd directory_path /s /q </span><br><span class="line">:: 删除文件夹 很快</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -map 0:0 -vcodec copy out.mp4</span><br></pre></td></tr></table></figure><p>注：<code>-map</code> 表示使用哪个流做为输入，0:0 表示第1个文件的每1个流。 <code>-vcodec</code> 所示使用流的视频，<code>-acodec</code> 表示使用流的音频，我们这里不加这个参数， 表示不需要音频。 <code>copy</code>表示要把新的流复制到新文件。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>STL 常用方法总结</title>
      <link href="/2022/05/14/STL-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2022/05/14/STL-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>STL 常用方法。</p><span id="more"></span><h2 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a>unordered_set</h2><p>unordered_set 容器和 set 容器很像，唯一的区别就在于 set 容器会自行对存储的数据进行排序，而 unordered_set 容器不会。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">unorder_set&lt;<span class="type">int</span>&gt; uset;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在容器中查找值为 val 的元素的个数</span></span><br><span class="line">uset.<span class="built_in">count</span>(val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向容器中添加新元素</span></span><br><span class="line">uset.<span class="built_in">emplace</span>(val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在容器中查找元素 val 的位置</span></span><br><span class="line">uset.<span class="built_in">find</span>(val);</span><br></pre></td></tr></table></figure><hr><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; array;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; two_dimension_array;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">initilize_example</span><span class="params">(<span class="number">1000</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向二维数组中添加数组元素</span></span><br><span class="line">two_dimension_array.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt; &#123;&#125;);</span><br><span class="line">two_dimension_array.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt; &#123;element_0, element_1&#125;);</span><br><span class="line"></span><br><span class="line">array.<span class="built_in">push_back</span>(val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断容器中是否有元素</span></span><br><span class="line">arraay.<span class="built_in">empty</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回容器中的第一个元素</span></span><br><span class="line">array.<span class="built_in">front</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回容器中的最后一个元素</span></span><br><span class="line">array.<span class="built_in">back</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除序列尾部元素</span></span><br><span class="line">array.<span class="built_in">pop_back</span>();</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 改变容器的大小</span></span><br><span class="line">array.<span class="built_in">resize</span>(length)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变容器大小，并赋初值</span></span><br><span class="line">array.<span class="built_in">resize</span>(length, val);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 向容器指定位置插入元素</span></span><br><span class="line">array.<span class="built_in">insert</span>(array.<span class="built_in">begin</span>(), val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用新元素替换原有内容</span></span><br><span class="line">array.<span class="built_in">assgin</span>(array.<span class="built_in">begin</span>(), array.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(array.<span class="built_in">begin</span>(), array.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回最大、最小元素</span></span><br><span class="line"><span class="type">int</span> max_num = *<span class="built_in">max_element</span>(array.<span class="built_in">begin</span>(), array.<span class="built_in">end</span>());</span><br><span class="line"><span class="type">int</span> min_num = *<span class="built_in">min_element</span>(array.<span class="built_in">begin</span>(), array.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历容器中所有元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> item: array) &#123;</span><br><span class="line">    cout &lt;&lt; item &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找元素 val 在容器中出现的次数</span></span><br><span class="line"><span class="type">int</span> times_of_val = <span class="built_in">count</span>(array.<span class="built_in">begin</span>(), array.<span class="built_in">end</span>(), val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找元素 val 在容器中出现的位置</span></span><br><span class="line"><span class="keyword">auto</span> it = <span class="built_in">find</span>(array.<span class="built_in">begin</span>(), array.<span class="built_in">end</span>(), val);</span><br><span class="line"><span class="comment">// auto it 也可以写成 vector&lt;int&gt;::iterator it</span></span><br></pre></td></tr></table></figure><hr><h2 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h2><p>哈希表。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ump;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向哈希表中添加键值对</span></span><br><span class="line">ump[key] = val;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找以 key 为键的键值对</span></span><br><span class="line"><span class="keyword">auto</span> it = ump.<span class="built_in">find</span>(key);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找以 key 为键的键值对的个数</span></span><br><span class="line">ump.<span class="built_in">count</span>(key);</span><br><span class="line"></span><br><span class="line">ump.<span class="built_in">empalce</span>(key, val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用迭代器输出 ump 存储的所有键值对</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = ump.<span class="built_in">begin</span>(); it != ump.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">    cout &lt;&lt; it -&gt; first &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; it -&gt; second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">string s;</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">push_back</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">front</span>();</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历字符串中的所有字符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c: s) &#123;</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> *it=s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line"></span><br><span class="line">stk.<span class="built_in">push</span>(val);</span><br><span class="line"></span><br><span class="line">stk.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> top_num = stk.<span class="built_in">top</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空</span></span><br><span class="line">stk.<span class="built_in">empty</span>();</span><br></pre></td></tr></table></figure><hr><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; Q;</span><br><span class="line"></span><br><span class="line">Q.<span class="built_in">push</span>(val);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> front_element = Q.<span class="built_in">front</span>();</span><br><span class="line"><span class="type">int</span> back_element = Q.<span class="built_in">back</span>();</span><br><span class="line"></span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">Q.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">Q.<span class="built_in">empty</span>();</span><br></pre></td></tr></table></figure><hr><h2 id="dequeue"><a href="#dequeue" class="headerlink" title="dequeue"></a>dequeue</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dequeue&lt;<span class="type">int</span>&gt; </span><br></pre></td></tr></table></figure><hr><h2 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;string, <span class="type">double</span>&gt; pair_0;</span><br><span class="line">pair_0 -&gt; first = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">pair_0 -&gt; second = <span class="number">1.23</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;string, <span class="type">double</span>&gt; <span class="title">pair_1</span><span class="params">(<span class="string">&quot;def&quot;</span>, <span class="string">&#x27;3.45&#x27;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pair 先比较各自的 first。若二者的 first 相等，再按照 second 进行比较</span></span><br><span class="line"><span class="keyword">if</span> (pair_0 &lt; pair_2) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pair_0 &lt; pair_2&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Turtle 画图示例</title>
      <link href="/2021/07/09/Turtle-%E7%94%BB%E5%9B%BE%E7%A4%BA%E4%BE%8B/"/>
      <url>/2021/07/09/Turtle-%E7%94%BB%E5%9B%BE%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>之前做汇报用 turtle 画的一张图，小记一下。</p><span id="more"></span><p><img src="https://i.loli.net/2021/07/09/huPMpc2VFxv8InY.png" alt="img.png"></p><h4 id="画笔方法简介"><a href="#画笔方法简介" class="headerlink" title="画笔方法简介"></a>画笔方法简介</h4><ul><li><strong>left：</strong> 画笔朝向逆时针旋转 90 度</li><li><strong>right：</strong> 画笔朝向顺时针旋转 90 度</li><li><strong>forward、fd：</strong> 前进</li><li><strong>speed：</strong> 控制画笔的速度</li><li><strong>pensize：</strong> 画笔粗细</li><li><strong>goto：</strong> 画笔跳转到指定坐标</li><li><strong>up：</strong> 抬起画笔</li><li><strong>down：</strong> 放下画笔</li><li><strong>home：</strong> 画笔回到原点坐标</li><li><strong>hideturtle：</strong> 隐藏画笔的箭头</li><li><strong>done：</strong> 结束绘画，但不会绘图窗口消失#### 代码部分</li></ul><h4 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"> </span><br><span class="line">l = <span class="number">40</span></span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.forward(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">t.speed(<span class="number">0</span>)</span><br><span class="line">t.pensize(<span class="number">3</span>)</span><br><span class="line">t.right(<span class="number">45</span>)</span><br><span class="line">t.forward(<span class="number">0.8</span>*l)</span><br><span class="line">t.right(<span class="number">45</span>)</span><br><span class="line">t.forward(l)</span><br><span class="line">t.right(<span class="number">135</span>)</span><br><span class="line">t.forward(<span class="number">0.8</span>*l)</span><br><span class="line">t.right(<span class="number">45</span>)</span><br><span class="line">t.forward(l)</span><br><span class="line">t.goto(<span class="number">40</span>, <span class="number">200</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.fd(<span class="number">200</span>)</span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.fd(l)</span><br><span class="line"></span><br><span class="line">t.goto(<span class="number">0</span>, l)</span><br><span class="line">t.right(<span class="number">180</span>)</span><br><span class="line">t.fd(l)</span><br><span class="line">t.left(<span class="number">45</span>)</span><br><span class="line">t.fd(<span class="number">0.8</span>*l)</span><br><span class="line"></span><br><span class="line">t.up()</span><br><span class="line">t.goto(<span class="number">0</span>, <span class="number">2</span>*l)</span><br><span class="line">t.down()</span><br><span class="line">t.right(<span class="number">45</span>)</span><br><span class="line">t.fd(l)</span><br><span class="line">t.left(<span class="number">45</span>)</span><br><span class="line">t.fd(<span class="number">0.8</span>*l)</span><br><span class="line"></span><br><span class="line">t.up()</span><br><span class="line">t.goto(<span class="number">0</span>, <span class="number">3</span>*l)</span><br><span class="line">t.down()</span><br><span class="line">t.right(<span class="number">45</span>)</span><br><span class="line">t.fd(l)</span><br><span class="line">t.left(<span class="number">45</span>)</span><br><span class="line">t.fd(<span class="number">0.8</span>*l)</span><br><span class="line"></span><br><span class="line">t.up()</span><br><span class="line">t.goto(<span class="number">0</span>,<span class="number">4</span>*l)</span><br><span class="line">t.down()</span><br><span class="line">t.right(<span class="number">45</span>)</span><br><span class="line">t.fd(l)</span><br><span class="line">t.left(<span class="number">45</span>)</span><br><span class="line">t.fd(<span class="number">0.8</span>*l)</span><br><span class="line"></span><br><span class="line">t.up()</span><br><span class="line">t.goto(l, <span class="number">0</span>)</span><br><span class="line">t.down()</span><br><span class="line">t.fd(<span class="number">0.8</span>*l)</span><br><span class="line">t.left(<span class="number">45</span>)</span><br><span class="line">t.fd(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">t.pensize(<span class="number">1</span>)</span><br><span class="line">t.up()</span><br><span class="line">t.home()</span><br><span class="line">t.down()</span><br><span class="line">t.fd(<span class="number">2</span>*l)</span><br><span class="line">t.left(<span class="number">180</span>)</span><br><span class="line">t.fd(<span class="number">4</span>*l)</span><br><span class="line">t.left(<span class="number">45</span>)</span><br><span class="line">t.fd(<span class="number">0.8</span>*l)</span><br><span class="line">t.left(<span class="number">135</span>)</span><br><span class="line">t.fd(<span class="number">4</span>*l)</span><br><span class="line">t.left(<span class="number">45</span>)</span><br><span class="line">t.fd(<span class="number">0.8</span>*<span class="number">2</span>*l)</span><br><span class="line">t.left(<span class="number">135</span>)</span><br><span class="line">t.fd(<span class="number">4</span>*l)</span><br><span class="line">t.right(<span class="number">135</span>)</span><br><span class="line">t.fd(<span class="number">0.8</span>*l)</span><br><span class="line">t.right(<span class="number">45</span>)</span><br><span class="line">t.fd(<span class="number">4</span>*l)</span><br><span class="line">t.right(<span class="number">135</span>)</span><br><span class="line">t.fd(<span class="number">0.8</span>*l)</span><br><span class="line"></span><br><span class="line">t.up()</span><br><span class="line">t.home()</span><br><span class="line"></span><br><span class="line">t.left(<span class="number">45</span>)</span><br><span class="line">t.down()</span><br><span class="line">t.fd(<span class="number">0.8</span>*<span class="number">2</span>*l)</span><br><span class="line"></span><br><span class="line">t.up()</span><br><span class="line">t.home()</span><br><span class="line">t.right(<span class="number">135</span>)</span><br><span class="line">t.down()</span><br><span class="line">t.fd(<span class="number">0.8</span>*l)</span><br><span class="line"></span><br><span class="line">t.up()</span><br><span class="line">t.left(<span class="number">135</span>)</span><br><span class="line">t.down()</span><br><span class="line">t.fd(l)</span><br><span class="line">t.left(<span class="number">45</span>)</span><br><span class="line">t.fd(<span class="number">3</span>*<span class="number">0.8</span>*l)</span><br><span class="line"></span><br><span class="line">t.up()</span><br><span class="line">t.left(<span class="number">135</span>)</span><br><span class="line">t.fd(<span class="number">2</span>*l)</span><br><span class="line">t.left(<span class="number">45</span>)</span><br><span class="line">t.down()</span><br><span class="line">t.fd(<span class="number">3</span>*<span class="number">0.8</span>*l)</span><br><span class="line"></span><br><span class="line">t.up()</span><br><span class="line">t.home()</span><br><span class="line">t.left(<span class="number">180</span>)</span><br><span class="line">t.fd(<span class="number">2</span>*l)</span><br><span class="line">t.right(<span class="number">135</span>)</span><br><span class="line">t.down()</span><br><span class="line">t.fd(<span class="number">0.8</span>*l)</span><br><span class="line"></span><br><span class="line">t.pensize(<span class="number">3</span>)</span><br><span class="line">t.up()</span><br><span class="line">t.home()</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.down()</span><br><span class="line">t.goto(<span class="number">0</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">t.hideturtle()</span><br><span class="line">t.done()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Weight deacy</title>
      <link href="/2021/05/07/Weight-deacy/"/>
      <url>/2021/05/07/Weight-deacy/</url>
      
        <content type="html"><![CDATA[<p>本文是一篇对于 <strong>Weight decay</strong> 权重衰减的理解。</p><span id="more"></span><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>weight decay 是一种神经网络 regularization 的方法，它的作用在于让权重不要那么大，这样做可以有效防止 <strong>过拟合</strong>。<br>$$<br>{\bf L2\ 正则化:};;J;&#x3D;;J_0,+,\frac{\lambda}{2,n}\ \sum_{\omega}{ {\omega^2} }\<br>{\bf L1\ 正则化:};;J;&#x3D;;J_0,+,\lambda \ \sum_{\omega}{\ |\ \omega \ |}<br>$$<br>这是 weight decay 的公式，<strong>J</strong> 就是 cost function. 通常我们说的都是 L2 regularization, 或者叫 L2 parameter norm penalty.</p><p>我们可以从三个角度来理解 weight decay 是如何起作用的：</p><ul><li><p>让权重变小一点，带来的好处是可以使整个神经网络对输入中的噪音（或者一些细微变化）不那么敏感。权重太大，输入数据的一点变化就会有很大影响，进而显著改变输出。</p></li><li><p>从公式来看，weight decay 对于比较大的权重，衰减的更多，比较小的权重，衰减较小；这就相当于，权重越大，惩罚越大，即可以更有效的减少 cost function.</p></li><li><p>让神经网络倾向于形成更简单的，“斜率”（slope） 更小的模型。比如一个非线性模型，我们可以用很复杂的高阶多项式来表示，也可以容忍一些噪音，通过简单的低阶多项式来表示，甚至直接使用线性函数来表示。</p></li></ul><hr><h3 id="正则化的作用"><a href="#正则化的作用" class="headerlink" title="正则化的作用"></a>正则化的作用</h3><ul><li><p>L1正则化可以使得参数稀疏化，即得到的参数是一个稀疏矩阵，可以用于特征选择。</p><ul><li><strong>稀疏性</strong>，说白了就是模型的很多参数是0。通常机器学习中特征数量很多，例如文本处理时，如果将一个词组（term）作为一个特征，那么特征数量会达到上万个。在预测或分类时，那么多特征显然难以选择，但是如果代入这些特征得到的模型是一个稀疏模型，很多参数是0，表示只有少数特征对这个模型有贡献，绝大部分特征是没有贡献的，即使去掉它们对模型也没有什么影响，此时我们就可以只关注系数是非零值的特征。这相当于对模型进行了一次特征选择，只留下一些比较重要的特征，提高模型的泛化能力，降低过拟合的可能。</li></ul></li><li><p>L2正则化可以防止模型过拟合（overfitting）；一定程度上，L1也可以防止过拟合。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>样本方差公式推导</title>
      <link href="/2021/04/15/%E6%A0%B7%E6%9C%AC%E6%96%B9%E5%B7%AE%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC/"/>
      <url>/2021/04/15/%E6%A0%B7%E6%9C%AC%E6%96%B9%E5%B7%AE%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<p>$$<br>\bf{推导公式} \quad \bf S^2  &#x3D;  \frac{1}{n  -  1}  \sum_{i &#x3D; 1}^{n}{(X_i  -  \bar{X})^2}<br>$$</p><span id="more"></span><p><strong>为什么样本方差公式里的分母是 (n-1) ?</strong></p><p>如果已知随机变量 $ \bf X $ 的期望为 $\bf\mu$ ，那么可以按照方差的计算公式得到：<br>$$<br>\bf {\sigma}^2 ; &#x3D; ; E , [, (X , - , \mu)^2 ,]<br>$$<br> 这么计算的话，我们得知道 $\bf X$ 的具体分布是什么，而我们往往并不知道准确分布，只有一部分样本罢了。</p><p>所以实践中都是采集样本之后，再用下面这个 $\mit S^2$ 来近似 $ {\mit\sigma}^2 $ ：<br>$$<br>\bf S^2 ; &#x3D; ; \frac{1}{n} , \sum_{i , &#x3D; , 1}^{n}{(X_i , - , \mu)^2}<br>$$<br>事实上，我们往往连 $\bf X$ 的期望 $\bf \mu$ 也不清楚，只能根据样本计算样本均值：<br>$$<br>\bf \bar{X} ; &#x3D; ; \frac{1}{n} , \sum_{i , &#x3D; , 1}^{n}{X_i}<br>$$<br>我们用上面得到的样本均值来计算 $\mit S^2$ ：<br>$$<br>\bf S^2 ; &#x3D; ; \frac{1}{n ,- , 1} , \sum_{i , &#x3D; , 1}^{n}{(X_i , - , \bar{X})^2}<br>$$<br><font color="red"><b>为什么</b></font> 使用 $\bf\bar{X}$ 代替 $\bf\mu$ 之后，分母就变成了 $\bf\frac{1}{n,-,1} ？$</p><hr><p>下面我们就来推导一下，假如分母不是 $\bf\frac{1}{n,-,1}$ 的话，我们会得到什么样的结果。</p><p><strong>若</strong><br>$$<br>\bf S^2 ;&#x3D;; \frac{1}{n}, \sum_{i,&#x3D;,1}^{n}{(X,-,\bar{X})^2}<br>$$<br><strong>则</strong><br>$$<br>\begin{align}<br>\bf E,(S^2) ;&amp; &#x3D;; E,[,\frac{1}{n},\sum_{i,&#x3D;,1}^{n}{(X_i ,-, \bar{X})^2},]<br>\<br>;&amp; &#x3D;; E,[,\frac{1}{n}(,(X_i ,-, \mu)(\bar{X} ,-, \mu),)^2,]<br>\<br>; &amp; &#x3D; ; E,[,\frac{1}{n}, \sum_{i,&#x3D;, 1}^{n}{(,(X_i ,-, {\mu})^2 ,-, 2,(\bar{X},-, \mu)(X_i ,-, \mu) ,+,(\bar{X} ,-, \mu)^2 ,),}]<br>\<br>; &amp; &#x3D;; E,[,\frac{1}{n},\sum_{i,&#x3D;,1}^{n}{(X_i ,-, \mu)^2} ,-,\frac{2}{n},(\bar{X} ,-, \mu),\sum_{i ,&#x3D;, 1}^{n}{(X_i ,-, \mu)} ,+, \frac{1}{n},(\bar{X} ,-, \mu)^2 , \sum_{i ,&#x3D;, 1}^{n}{1} ,]<br>\end{align}<br>$$<br><strong>又</strong><br>$$<br>\begin{align}<br>\bf \bar{X} ,-, \mu ;&amp;&#x3D;; \frac{1}{n},\sum_{i,&#x3D;,1}^{n}{X_i} ,-, \mu<br>\<br>;&amp;&#x3D;; \frac{1}{n},\sum_{i,&#x3D;, 1}^{n}{X_i} ,-, \frac{1}{n},\sum_{i,&#x3D;,1}^{n}{\mu}<br>\<br>;&amp;&#x3D;; \frac{1}{n},\sum_{i,&#x3D;,1}^{n}{(X_i ,-, \mu)}<br>\end{align}<br>$$<br>$\bf\therefore$<br>$$<br>\begin{align}<br>\bf {原式} ;&amp;&#x3D;; E,[,\frac{1}{n},\sum_{i,&#x3D;,1}^{n}{(X_i ,-, \mu)^2} ,-, (\bar{X} ,-\ \mu),2,(\bar{X} ,-, \mu) ,+, n,(\bar{X} ,-, \mu)^2 ,]<br>\<br>&amp;&#x3D;; E,[,\frac{1}{n}, \sum_{i,&#x3D;,1}^{n}{(X_i ,-, \mu)^2} ,-, (\bar{X} ,-, \mu)^2 ,]<br>\<br>&amp;&#x3D;; E,[, \frac{1}{n},\sum_{i,&#x3D;,1}^{n}{(X_i ,-, \mu)^2},] ,-, E,[,(\bar{X},-,\mu)^2 ,]<br>\end{align}<br>$$<br><strong>又</strong><br>$$<br>\begin{align}<br>\bf E,(\bar{X} ,-, \mu)^2 ;&#x3D;; E,(,\bar{X} ,-, E,(\bar{X}),)^2 ;&amp;&#x3D;; D,(\bar{X})<br>\<br>&amp;&#x3D;; D,(,\frac{1}{n},\sum_{i,&#x3D;,1}^{n}{X_i},)<br>\<br>&amp;&#x3D;; \frac{1}{n^2},D(,\sum_{i,&#x3D;,1}^{n}{X_i},)<br>\<br>&amp;&#x3D;; \frac{1}{n^2},\sum_{i,&#x3D;,1}^{n}{D,(X_i)}<br>\<br>&amp;&#x3D;; \frac{1}{n^2}, \cdot , (n,{\sigma}^2)<br>\<br>&amp;&#x3D;; \frac{ {\sigma}^2 }{n}<br>\end{align}<br>$$<br>$\bf\therefore$<br>$$<br>\bf 原式 ;&#x3D;; {\sigma}^2 ,-, \frac{ {\sigma}^2 }{n} ;&#x3D;; \frac{n ,-, 1}{n} , {\sigma}^2<br>$$<br><strong>因此</strong>，为了得到 <strong>无偏估计</strong>，我们做以下处理：<br>$$<br>\begin{align}<br>\bf \frac{n}{n ,-, 1} ; E,[, \frac{1}{n},\sum_{i,&#x3D;,1}^{n}{(X_i ,-, \bar{X})^2} ,]<br>;&#x3D;; E,[, \frac{1}{n ,-, 1} , \sum_{i ,&#x3D;, 1}^{n}{(X_i ,-, \bar{X})^2} ,] ;&#x3D;; {\sigma}^2<br>\end{align}<br>$$<br><strong>即我们的样本方差公式应该为：</strong><br>$$<br>\bf S^2 ;&#x3D;; \frac{1}{n ,-, 1} , \sum_{i ,&#x3D;, 1}^{n}{(X_i ,-, \bar{X})^2}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pandas小知识</title>
      <link href="/2020/12/04/Pandas%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/12/04/Pandas%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>Pandas 的一些常见技巧。</p><span id="more"></span><h3 id="读取-csv-文件"><a href="#读取-csv-文件" class="headerlink" title="读取 csv 文件"></a>读取 csv 文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">file = pd.read_csv(<span class="string">&#x27;file.csv&#x27;</span>, header=<span class="number">0</span>) <span class="comment"># header 的默认值也是 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取某一列</span></span><br><span class="line"><span class="comment"># method 0</span></span><br><span class="line">marks = file[<span class="string">&#x27;#mark&#x27;</span>].tolist()</span><br><span class="line"></span><br><span class="line"><span class="comment"># method 1</span></span><br><span class="line">df = pd.DataFrame(file, columns=[<span class="string">&#x27;#mark&#x27;</span>])</span><br><span class="line">marks = df.loc[:, <span class="string">&#x27;#mark&#x27;</span>].tolist()</span><br></pre></td></tr></table></figure><h3 id="按指定列分组"><a href="#按指定列分组" class="headerlink" title="按指定列分组"></a>按指定列分组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分组</span></span><br><span class="line">df.groupby(<span class="string">&#x27;Name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组后获取特定列</span></span><br><span class="line">df.groupby(<span class="string">&#x27;Name&#x27;</span>)[<span class="string">&#x27;Salary&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计某一列中不重复数据的数量</span></span><br><span class="line">df.groupby(<span class="string">&#x27;Name&#x27;</span>).nunique()[<span class="string">&#x27;Salary&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="修改所有行中的特定内容"><a href="#修改所有行中的特定内容" class="headerlink" title="修改所有行中的特定内容"></a>修改所有行中的特定内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&#x27;./train.csv&#x27;</span>, encoding = <span class="string">&#x27;big5&#x27;</span>)    <span class="comment"># 繁体字编码</span></span><br><span class="line">data = data.iloc[:, <span class="number">3</span>:]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data.iloc[:<span class="number">11</span>, :<span class="number">11</span>])<span class="comment"># 打印一下前面几行，看看内容</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/27/RuCndGXjBv78UcA.png" alt="原始内容.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data[data == <span class="string">&#x27;NR&#x27;</span>] = <span class="number">0</span><span class="comment"># 把所有行中内容为 NR 的都修改成数字 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data.iloc[:<span class="number">11</span>, :<span class="number">11</span>])</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/27/A2W7UDinVgrNPkc.png" alt="修改行中内容.png"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch小知识</title>
      <link href="/2020/12/04/Pytorch%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/12/04/Pytorch%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>在用 Pytorch 编写代码时所遇到的小知识点，遇之则记之。</p><span id="more"></span><h3 id="nn-ReLU-与-F-ReLU"><a href="#nn-ReLU-与-F-ReLU" class="headerlink" title="nn.ReLU 与 F.ReLU"></a>nn.ReLU 与 F.ReLU</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net_1</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net_1, self).__init__()</span><br><span class="line">        self.features = nn.Sequential(</span><br><span class="line">        nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">64</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.features(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net_2</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net_2, self).__init__()</span><br><span class="line">        self.features = nn.Sequential(</span><br><span class="line">        nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">64</span>),</span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.features(x)</span><br><span class="line">        x = F.ReLU(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>在如上代码中，Net_1 与 Net_2 实现的结果是一致的，但是将 ReLU 层添加到网络有两种不同的实现，即 <strong>nn.ReLU</strong> 和 <strong>F.ReLU</strong> 。</p><p>nn.ReLU 作为一个层结构，必须添加到 nn.Module 容器中才能使用，而 F.ReLU 则作为一个函数调用。具体使用哪种方式，取决于编程风格。</p><p>在 PyTorch 中, nn.X 都有对应的函数版本 F.X，但是并不是所有的 F.X 均可以用于 forward 或其它代码段中，因为当网络模型训练完毕时，在存储 model 时，在 forward 中的 F.X 函数中的参数是无法保存的。</p><p>也就是说，在 forward 中，使用的 F.X 函数一般均没有状态参数，比如 F.ReLU、F.avg_pool2d 等，都没有参数，它们可以用在任何代码片段中。</p><hr><h3 id="tensor-与-Tensor"><a href="#tensor-与-Tensor" class="headerlink" title="tensor 与 Tensor"></a>tensor 与 Tensor</h3><ol><li><p>Tensor 是一个 python 类，相当于是默认张量类型 FloatTensor 的别名。该类下有 FloatTensor、LongTensor、DoubleTensor 等</p></li><li><p>tensor 是 python 的一个方法，函数原型是 <code>torch.tensor(data, dtype=None, device=None, requires_grad=False)</code>，其中的 <code>data</code> 可以是 list、tuple、ndarray、scalar。该函数可以根据提供的数据生成相应的 FloatTensor、LongTensor 等</p></li><li><p>Tensor 和 numpy 对象共享内存</p></li></ol><hr><h3 id="type、dtype、astype"><a href="#type、dtype、astype" class="headerlink" title="type、dtype、astype"></a>type、dtype、astype</h3><ol><li><p>type()是python内置的函数。type() 返回数据结构类型（list、dict、numpy.ndarray 等）</p></li><li><p>dtype 返回数据元素的数据类型（int、float等）</p></li><li><p>astype() 改变np.array中所有数据元素的数据类型</p></li></ol><p>此外，由于 list、dict 等可以包含不同的数据类型，因此没有 dtype 属性。np.array 中要求所有元素属于同一数据类型，因此有 dtype 属性，能用 dtype() 的才能用 astype()</p><hr><h3 id="unsqueeze-和-squeeze"><a href="#unsqueeze-和-squeeze" class="headerlink" title="unsqueeze 和 squeeze"></a>unsqueeze 和 squeeze</h3><p><code>unsqueeze</code>，加一个维度，在你 <strong>dim &#x3D; x</strong> 的指定位置加。</p><p>如果你输入的 dim 是负数，就按 <strong>dim &#x3D; dim + input.dim() + 1</strong> 来算位置。</p><p>dim 的范围是 **[- input.dim() - 1, input.dim() + 1]**。</p><p><code>squeeze</code> 刚好相反，减一个维度，减的这个维度，只能是你自己曾经加上去的，不能是 tensor 本身的维度。</p><p><img src="https://i.loli.net/2020/12/04/8ivTBsaXPOG7qRK.png" alt="unsqueeze 和 squeeze"></p><hr><h3 id="mm、mul、matmul"><a href="#mm、mul、matmul" class="headerlink" title="mm、mul、matmul"></a>mm、mul、matmul</h3><p><strong>torch.mm</strong> 正常的矩阵乘法，只能用于 2 维矩阵的相乘。</p><p><strong>torch.mul</strong> 矩阵的 <strong>哈德玛积</strong>，当两个矩阵的维度不一致时，会自动填充到相同维度。（这一操作也叫 broadcast）</p><p><strong>torch.matmul</strong> 可用于 2 维或更高维的矩阵乘法，如果两个矩阵的唯独不一致，它也会自动填充。</p><hr><h3 id="item"><a href="#item" class="headerlink" title=".item()"></a>.item()</h3><p>如果你有只有一个元素的张量，使用<code>.item()</code>来得到Python数据类型的数值</p><p><img src="https://i.loli.net/2021/01/14/IFq7NAZdpDOP2yS.png" alt="chrome_vOQEGSlgp1.png"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Notes(III)</title>
      <link href="/2020/11/08/Machine-Learning-Notes-III/"/>
      <url>/2020/11/08/Machine-Learning-Notes-III/</url>
      
        <content type="html"><![CDATA[<p>The contents are about  notes  and equations  taken from 《Machine Learning》, which is taught by Andrew Ng,  in Coursera.</p><p><strong>key words:</strong>  classification</p><span id="more"></span><h3 id="Classification-and-Representation"><a href="#Classification-and-Representation" class="headerlink" title="Classification and Representation"></a>Classification and Representation</h3><h4 id="Logistic-Function"><a href="#Logistic-Function" class="headerlink" title="Logistic Function"></a>Logistic Function</h4><p>Our new form uses the <code>Sigmoid Function</code>, also called the <code>Logistic Function</code>.<br>$$<br>h_\theta(x) ; &#x3D; ; g({\theta}^T x)<br>\<br>z ; &#x3D; ; {\theta}^T x<br>\<br>g(z) ; &#x3D; ; \frac{1}{1 ;+; e^{-z}}<br>$$</p><h4 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h4><p>$$<br>J,(\theta) ;&#x3D;; \frac{1}{m}; \sum_{i&#x3D;1}^{m}, Cost(h_{\theta}(x^{(i)}),, y^{(i)})<br>\<br>\begin{align}<br>&amp; Cost(h_\theta(x),, y) ;&#x3D;; -\log(h_\theta(x)) \qquad &amp; if \quad y;&#x3D;; 1<br>\<br>&amp; Cost(h_\theta(x),, y) ;&#x3D;; -\log(1-h_\theta(x)) \qquad &amp; if \quad  y ;&#x3D;; 0<br>\end{align}<br>$$</p><p><strong>Compared with the two equations above, we have another equivalent function:</strong><br>$$<br>Cost(h_\theta(x), , y) ; &#x3D; ; -y , \log(,h_\theta(x),) ;-; (1 ,-, y), \log(1,-, h_\theta(x))<br>$$</p><p>When $y &#x3D; 1$, we get the following plot for $J(\theta) ; vs ; h_\theta(x)$:</p><p><img src="https://i.loli.net/2020/11/08/RXk7ZzpUPbjtlNv.png" alt="Logistic_regression_cost_function_positive_class.png"></p><center><u>Logistic regression cost function positive class</u></center><p>Similarly, when $y;&#x3D;; 0$, we get the following plot for $J(\theta) ; vs ; h_\theta(x)$:</p><p><img src="https://i.loli.net/2020/11/08/3Rfl8IZkdTHs142.png" alt="Logistic_regression_cost_function_negative_class.png"></p><center><u>Logistic regression cost function negative class</u></center><h3 id="Multiclass-Classification"><a href="#Multiclass-Classification" class="headerlink" title="Multiclass Classification"></a>Multiclass Classification</h3>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模运算与快速幂算法</title>
      <link href="/2020/11/07/%E6%A8%A1%E8%BF%90%E7%AE%97%E4%B8%8E%E5%BF%AB%E9%80%9F%E5%B9%82%E7%AE%97%E6%B3%95/"/>
      <url>/2020/11/07/%E6%A8%A1%E8%BF%90%E7%AE%97%E4%B8%8E%E5%BF%AB%E9%80%9F%E5%B9%82%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>最近的日常学习又涉及到了不少和 <strong>mod</strong> 有关的计算，这些计算虽然都不是很难，但有的还是需要一点点小技巧。<br>忖，遂记之。</p><span id="more"></span><h3 id="模运算公式"><a href="#模运算公式" class="headerlink" title="模运算公式"></a>模运算公式</h3><p>$$<br>X  ; mod ; 0 ; &#x3D; ; 0 \<br>(a ; \pm ; b)  ; % ; p ; &#x3D; ; (a , % , p ; \pm ; b,%, p) ;%; p \<br>(a ;\times; b) ;%; p ;&#x3D;; (a ,%, p ;\times; b,%, p) ;%; p \<br>((a+b);%;p ;+; c);%; p ;&#x3D;; (a+(b+c);%; p);%; p \<br>((a+b)% p ;\times; c);%; p ;&#x3D;; ((a\times c);%; p ;+; (b\times c)% p);%; p<br>\<br>\color{\red} {a^b ;%; p ;&#x3D;; ((a;%;p)^b) ;%; p}<br>$$</p><hr><h3 id="快速幂算法"><a href="#快速幂算法" class="headerlink" title="快速幂算法"></a>快速幂算法</h3><p>上面那堆公式里，有一行红色公式就是这里的主角了，可以用它来快速计算 $ a^b ;%; p$ 的结果。</p><p>直接上代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">func</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> a, <span class="type">unsigned</span> <span class="type">long</span> b, <span class="type">unsigned</span> <span class="type">long</span> p)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> result = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            result = (result * a) % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = (a * a) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码比较简单，也很直观，就不多做解释了。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Notes(II)</title>
      <link href="/2020/11/05/Machine-Learning-Notes-II/"/>
      <url>/2020/11/05/Machine-Learning-Notes-II/</url>
      
        <content type="html"><![CDATA[<p>The contents are about  notes  and equations  taken from 《Machine Learning》, which is taught by Andrew Ng,  in Coursera.</p><p><strong>key words:</strong>  normal equation</p><span id="more"></span><h3 id="Normal-Equation"><a href="#Normal-Equation" class="headerlink" title="Normal Equation"></a>Normal Equation</h3><p><strong>gradient decent</strong> 提供了一种最小化 <code>loss function</code> 的方法，用的是不断迭代的方式求  $ \theta $。</p><p><strong>normal equation</strong> 则是用类似解方程的办法来求  $ \theta $。此外，对于 normal equation 的方法，也不用再去 <strong>feature scaling</strong> 了。</p><p>我们来看一下具体过程：</p><p>$$<br>X ; &#x3D; ;<br>\begin{bmatrix}<br>{x_0}^{(1)} &amp; {x_1}^{(1)} &amp; \cdots &amp; {x_n}^{(1)} \<br>{x_0}^{(2)} &amp; {x_1}^{(2)} &amp; \cdots &amp; {x_n}^{(2)} \<br>\vdots      &amp; \vdots      &amp; \vdots &amp; \vdots      \<br>{x_0}^{(m)} &amp; {x_1}^{(m)} &amp; \cdots &amp; {x_n}^{(m)} \<br>\end{bmatrix}</p><p>\qquad \quad</p><p>y ; &#x3D; ;<br>\begin{bmatrix}<br>y^{(1)} \<br>y^{(2)} \<br>\vdots  \<br>y^{(m)}<br>\end{bmatrix}</p><p>\qquad \quad</p><p>\theta ; &#x3D; ;<br>\begin{bmatrix}<br>{\theta}_0 \<br>{\theta}_1 \<br>\vdots     \<br>{\theta}_n<br>\end{bmatrix}<br>$$</p><p>$$<br>\begin{align}<br>\therefore &amp;  \quad y ;  &#x3D; ; X , \theta \<br>\therefore &amp; \quad X^T , y ;  &#x3D; ; X^TX , \theta \<br>\therefore &amp; \quad (X^TX)^{-1}, X^T , y;&#x3D;;(X^TX)^{-1},(X^TX),\theta ;&#x3D;;\theta \<br>即  &amp; \quad {\boldsymbol \theta ; &#x3D; ; (X^TX)^{-1},X^T , y}<br>\end{align}<br>$$</p><p>我们对比一下二者的优缺点。</p><table><thead><tr><th>Gradient Decent</th><th>Normal Equation</th></tr></thead><tbody><tr><td>Need to choose alpha</td><td>No need to choose alpha</td></tr><tr><td>Needs many iterations</td><td>No need to iterate</td></tr><tr><td>$ O(kn^2) $</td><td>$ O(n^3)$, need to calculate inverse of $ X^T X $</td></tr><tr><td>Works well when n is large</td><td>Slow if n is very large</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch实现鸢尾花分类问题</title>
      <link href="/2020/10/29/Pytorch%E5%AE%9E%E7%8E%B0%E9%B8%A2%E5%B0%BE%E8%8A%B1%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
      <url>/2020/10/29/Pytorch%E5%AE%9E%E7%8E%B0%E9%B8%A2%E5%B0%BE%E8%8A%B1%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>这篇文章是笔者在开始学习 Pytorch 时所做的一次小实验。<br><br>边学边练，在实践中学习 Pytorch 的使用方法，我觉得是最吼的。</p><span id="more"></span><h2 id="鸢尾花分类问题"><a href="#鸢尾花分类问题" class="headerlink" title="鸢尾花分类问题"></a>鸢尾花分类问题</h2><p>先简要介绍一下我们此次实验的背景。</p><p>给出一个 <code>.csv</code> 的数据集文件，文件中的数据一共有 150行，5列，也就是 150x5 的规模。其中，前四列为鸢尾花的特征，最后一列为鸢尾花的种类（数据文件中，鸢尾花一共有 3 个种类）。</p><p>给大家看一下数据文件的大概样子：</p><p><img src="https://i.loli.net/2020/10/29/lBcMJCqeYdmQkLD.png" alt="Iris_data.csv"></p><p>我们的任务就是利用 Pytorch 来实现这三个品种种鸢尾花的分类。</p><p>闲话少说，直接上代码！</p><hr><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><p>笔者也是一位机器学习的初学者，下面的代码都是我自己一行一行敲出来的。因为是一边学一边敲，所以会有大量的注释。</p><p>我会把整个源程序的代码分成一段一段的，逐段解释。如果有需要复现的话，请按照我的分段顺序把代码重新放到一个源文件中。</p><h6 id="导入所需的包"><a href="#导入所需的包" class="headerlink" title="导入所需的包"></a>导入所需的包</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib notebook <span class="comment"># 不加这行代码的话，画图时也许有点小 bug，可能不显示图像</span></span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader, Dataset</span><br></pre></td></tr></table></figure><h6 id="设置随机数种子"><a href="#设置随机数种子" class="headerlink" title="设置随机数种子"></a>设置随机数种子</h6><p>这里设置随机数种子的目的是让程序每次跑出来的结果都是一样的，便于复现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">10</span>)</span><br><span class="line">torch.manual_seed(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h6 id="数据处理部分"><a href="#数据处理部分" class="headerlink" title="数据处理部分"></a>数据处理部分</h6><p>下面这段代码中的 <code>Dataset</code> 和 <code>DataLoader</code> 是用来帮助我们加载和使用数据集的。</p><p><code>Dataset</code> 的主要功能是构建数据集。</p><p><code>DataLoader</code> 的主要功能是加载数据集，它有一个参数叫 <strong>batch_size</strong>，意思是我们每次从数据集中拿出几组样本来进行训练。</p><p>这样做的好处就是，我们在面对规模较大的数据集时，可以一边加载一小部分数据一边训练，而不用先把整个数据集都读进内存，然后再进行训练。</p><p>这里还有个小知识点：我们把一整个数据集叫做 <strong>Batch</strong>，而把其中的一小部分数据集叫做 <strong>Mini-Batch</strong>，把 Batch 除以 Mini-Batch 的结果叫做 <strong>Iteration</strong>，也就是需要迭代的次数。</p><p>此外，Batch 并不一定需要被 Mini-Batch  整除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filepath</span>):</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 用 pandas 读取 csv 格式文件，如果不加 header=None 的话，它会把数据集的第一行默认作为列标签</span></span><br><span class="line">        xy = pd.read_csv(<span class="string">&#x27;./iris_data/iris.csv&#x27;</span>, header=<span class="literal">None</span>) </span><br><span class="line">        names_copy = xy.iloc[:, <span class="number">4</span>].copy()<span class="comment"># 记住 .loc[] 与 .iloc 的区别</span></span><br><span class="line">        </span><br><span class="line">        names_copy_length = <span class="built_in">len</span>(names_copy)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对鸢尾花的类别进行编号</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(names_copy_length):</span><br><span class="line">            <span class="keyword">if</span> names_copy[i] == <span class="string">&#x27;Iris-setosa&#x27;</span>:</span><br><span class="line">                names_copy[i] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> names_copy[i] == <span class="string">&#x27;Iris-versicolor&#x27;</span>:</span><br><span class="line">                names_copy[i] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                names_copy[i] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        xy.iloc[:, <span class="number">4</span>] = names_copy</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 选取前 4 列作为 feature，最后一列是 label </span></span><br><span class="line">        self.x_data = np.array(xy.iloc[:, :<span class="number">4</span>])</span><br><span class="line">        self.y_data = np.array(xy.iloc[:, <span class="number">4</span>])</span><br><span class="line">        self.<span class="built_in">len</span> = xy.shape[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 这个 getitem 是一个 magin method, 它使得我们能够以下标的形式 dataset[index]，访问 dataset 中的元素 </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x_data[index], self.y_data[index]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># maginc method，使得我们能够用 len(dataset) 来获取 dataset 的长度</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">len</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 dataset 和 dataloader </span></span><br><span class="line">dataset = MyDataset(<span class="string">&#x27;./iris_data/iris.csv&#x27;</span>)</span><br><span class="line">train_loader = DataLoader(dataset=dataset, batch_size=<span class="number">1</span>, shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h6 id="网络结构部分"><a href="#网络结构部分" class="headerlink" title="网络结构部分"></a>网络结构部分</h6><p>网络模型一共有四层：一个有 4 个神经元的输入层、一个有 3 个神经元输出层、两个都有 5 个神经元的隐藏层。</p><p>两个隐藏层的激活函数用的都是 <code>sigmoid()</code> 函数，最后的输出层用的是 <code>softmax()</code> 函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Model, self).__init__()</span><br><span class="line">        self.linear_1 = nn.Linear(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        self.linear_2 = nn.Linear(<span class="number">5</span>, <span class="number">4</span>)     </span><br><span class="line">        self.linear_3 = nn.Linear(<span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line">        self.sigmoid = nn.Sigmoid()<span class="comment"># 这里用的是 Sigmoid 函数模块，只用普通的 sigmoid 函数也是可以的</span></span><br><span class="line">        self.loss_down = []</span><br><span class="line">        </span><br><span class="line">        self.criterion = nn.CrossEntropyLoss() <span class="comment"># CrossEntropyLoss 中就包括了 softmax 和 NLLLoss</span></span><br><span class="line">        self.optimizer = torch.optim.SGD(self.parameters(), lr=<span class="number">0.007</span>, momentum=<span class="number">0.05</span>) </span><br><span class="line">        <span class="comment"># 这里使用了带冲量的优化，可以加速梯度下降的过程</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.sigmoid(self.linear_1(x))</span><br><span class="line">        x = self.sigmoid(self.linear_2(x))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这里返回的是未经过激活的 linear_3(x)，因为我们待会还要用交叉熵函数对其处理</span></span><br><span class="line">        <span class="keyword">return</span> self.linear_3(x)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># loss 曲线下降展示</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        plt.xlabel(<span class="string">&quot;epoch&quot;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&quot;loss&quot;</span>)</span><br><span class="line">        plt.plot(self.loss_down, label=<span class="string">&quot;dataset&quot;</span>, color=<span class="string">&#x27;coral&#x27;</span>)</span><br><span class="line">        plt.legend(loc=<span class="number">0</span>,)</span><br><span class="line">        plt.show()</span><br></pre></td></tr></table></figure><h6 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">model, epoch</span>):</span><br><span class="line">    running_loss = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 这里使用 enumerate 的目的只是为了知道当前是第多少次迭代(iteration)</span></span><br><span class="line">    <span class="keyword">for</span> index, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader, <span class="number">0</span>):</span><br><span class="line">        inputs, labels = data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 前向传播</span></span><br><span class="line">        outputs = model(inputs.<span class="built_in">float</span>())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算误差</span></span><br><span class="line">        loss = model.criterion(outputs, labels)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">        model.optimizer.zero_grad() <span class="comment"># 优化器清零</span></span><br><span class="line">        loss.backward()</span><br><span class="line">        model.optimizer.step() <span class="comment"># 优化</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算累计误差</span></span><br><span class="line">        running_loss += loss.item()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每累计 150 个误差，在曲线图上画一个点</span></span><br><span class="line">        <span class="keyword">if</span> index % <span class="number">150</span> == <span class="number">149</span>:</span><br><span class="line">            model.loss_down.append(running_loss/<span class="number">100</span>)</span><br><span class="line">            running_loss = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化模型并训练</span></span><br><span class="line">model = Model()</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    train(model, <span class="number">100</span>)</span><br><span class="line">model.show()</span><br></pre></td></tr></table></figure><p>这里给大家看一下我在训练集上的 <code>loss</code> 曲线图。</p><p><img src="https://i.loli.net/2020/10/30/mbiSj47T3uePrgn.png" alt="训练集上loss曲线图"></p><h6 id="实现多分类问题"><a href="#实现多分类问题" class="headerlink" title="实现多分类问题"></a>实现多分类问题</h6><p><strong>这里为了演示</strong>，我就直接把原来的训练集拿来作为 <strong>测试集</strong>，这在实际应用中是不可行的，请大家牢记。由于这段预测的输出结果比较长，我就不在这里展示了，大家可以跑一下程序看看（我这个的预测准确率大概在 96%）。</p><p>演示代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>():</span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 测试的时候不需要再计算梯度了，因为模型已经训练好了，不用再优化了</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 以 train_loader 代替 test_loader，因为 test_loader 我没搞，哈哈</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> train_loader:</span><br><span class="line">            inputs, labels = data</span><br><span class="line">            outputs = model(inputs.<span class="built_in">float</span>()) <span class="comment"># 不转为 float 就会报错</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># torch.max() 返回一个元组 (values, indices)</span></span><br><span class="line">            <span class="comment"># 下面这行代码的操作就类似于 one-hot 编码</span></span><br><span class="line">            _, predicted = torch.<span class="built_in">max</span>(outputs.data, dim=<span class="number">1</span>) <span class="comment"># dim=1，按行来进行</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 获取测试集样本总数</span></span><br><span class="line">            total += labels.size(<span class="number">0</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 统计预测正确的数量</span></span><br><span class="line">            correct += (predicted == labels).<span class="built_in">sum</span>().item()</span><br><span class="line">            length = <span class="built_in">len</span>(labels)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 打印预测值和目标值</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">                <span class="keyword">if</span> predicted[i] == labels[i]:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;target = %d, predicted = %d&quot;</span> % (labels[i], predicted[i]))</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Right!&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;target = %d, predicted = %d&quot;</span> % (labels[i], predicted[i]))</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Wrong!&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;TrainDatasets Accuracy: %d %%&quot;</span> % (<span class="number">100</span> * correct/total))</span><br><span class="line"></span><br><span class="line">predict()</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写BP算法</title>
      <link href="/2020/10/29/%E6%89%8B%E5%86%99BP%E7%AE%97%E6%B3%95/"/>
      <url>/2020/10/29/%E6%89%8B%E5%86%99BP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>本文的主要内容为手动实现 BP 算法，不借助调包。<br><br>最终完成的模型，用于鸢尾花分类问题。</p><span id="more"></span><h4 id="导入所需的包环境"><a href="#导入所需的包环境" class="headerlink" title="导入所需的包环境"></a>导入所需的包环境</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure><h4 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h4><p>设置随机数种子，便于复现。</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 设置循环轮数</span></span><br><span class="line">epoch_num=<span class="number">10</span><span class="meta">    </span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># 设置随机数种子</span></span><br><span class="line"><span class="built_in">seed</span>=<span class="number">100</span>    </span><br><span class="line">random.<span class="built_in">seed</span>(<span class="built_in">seed</span>)</span><br><span class="line">torch.manual_seed(<span class="built_in">seed</span>)</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">iris_data</span> = pd.read_csv(&#x27;./iris.csv&#x27;, header=<span class="type">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 数值编码</span></span><br><span class="line"><span class="title">class_int</span> = &#123;<span class="string">&quot;Iris-setosa&quot;</span>: <span class="number">0</span>, <span class="string">&quot;Iris-versicolor&quot;</span>: <span class="number">1</span>, <span class="string">&quot;Iris-virginica&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="title">iris_data</span>[<span class="number">4</span>] = iris_data[<span class="number">4</span>].map(class_int)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 取前 4 列特征</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> = iris_data.iloc[:, :4]</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 对特征做归一化处理</span></span><br><span class="line"><span class="title">data_norm</span> = (<span class="class"><span class="keyword">data</span> - <span class="keyword">data</span>.mean())/(<span class="title">data</span>.<span class="title">max</span>() - <span class="keyword">data</span>.min())</span></span><br><span class="line"><span class="meta"># print(data_norm)</span></span><br><span class="line"></span><br><span class="line"><span class="title">iris_data</span>.iloc[:, :<span class="number">4</span>] = data_norm</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Notes(I)</title>
      <link href="/2020/10/17/Machine-Learning-Notes-I/"/>
      <url>/2020/10/17/Machine-Learning-Notes-I/</url>
      
        <content type="html"><![CDATA[<p>The contents are about  notes  and equations  taken from 《Machine Learning》, which is taught by Andrew Ng,  in Coursera.</p><p><strong>key words:</strong>  linear regression、gradient decent、feature scaling</p><span id="more"></span><h1 id="NOTES"><a href="#NOTES" class="headerlink" title="NOTES"></a>NOTES</h1><p><img src="https://i.loli.net/2020/10/17/mP8X5ue6ALk93CG.png" alt="Machine Learning Algorithms.png"></p><hr><h2 id="Linear-Regression"><a href="#Linear-Regression" class="headerlink" title="Linear Regression"></a>Linear Regression</h2><p><strong>Hypothesis：</strong>  $ h_\theta (x)  ; &#x3D; ;  {\theta}_0 , + , {\theta}_1 ,  x $</p><p>** Parameters：**  $ {\theta_0}, , {\theta}_1 $</p><p>** Cost Function： ** $$ J({\theta}_0, , {\theta}<em>1) ; &#x3D; ; \frac{1}{2m} ,  \sum</em>{i&#x3D;1}^{m} , (h_\theta (x^{(i)}) , - , y^{x^{(i)}} ,)^2 ,)  \ $$<br>这里，m 是训练样本的数量；1&#x2F;2 是为了  <strong>gradient decent</strong> 求导的时候可以消去常数项。</p><hr><h3 id="Gradient-Decent"><a href="#Gradient-Decent" class="headerlink" title="Gradient Decent"></a>Gradient Decent</h3><h4 id="Partial-derivatives"><a href="#Partial-derivatives" class="headerlink" title="Partial derivatives"></a>Partial derivatives</h4><p>$$ \frac{\alpha}{\alpha , {\theta}_0} , J({\theta}<em>0, , {\theta_1}) ; &#x3D; ; \frac{1}{m} , \sum</em>{i&#x3D;1}^{m} , (h_\theta(x^{(i)})) , - y^{(i)})  $$</p><p>$$  \frac{\alpha}{\alpha , {\theta}_1} , J({\theta}<em>0, , {\theta_1})  ; &#x3D; ; \frac{1}{m} , \sum</em>{i&#x3D;1}^{m} , (h_\theta(x^{(i)})) , - y^{(i)}) , \cdot x^{(i)}  $$</p><h4 id="Simultaneous-update"><a href="#Simultaneous-update" class="headerlink" title="Simultaneous update"></a>Simultaneous update</h4><p>$$ temp_0 ; &#x3D; ; {\theta}_0 , - , {\color{\red}{\alpha}} \cdot \frac{\partial , J({\theta}_0, {\theta_1})}{\partial , {\theta}_0} $$</p><p>$$ temp_1 ; &#x3D; ; {\theta}_1 , - , {\color{\red}{\alpha}} \cdot \frac{\partial , J({\theta}_0, {\theta_1})}{\partial , {\theta}_1} $$<br>这里的 <strong>alpha</strong> 叫做 <strong>learning rate</strong>（学习速率）。</p><p>$$ \therefore temp_0 ; &#x3D; ; {\theta}_0 \ temp_1 ; &#x3D; ; {\theta}_1  $$</p><h4 id="Multiple-Features"><a href="#Multiple-Features" class="headerlink" title="Multiple Features"></a>Multiple Features</h4><p>$$<br>{x_j}^{(i)} ; &#x3D; ; value ; of ; feature ;  j ;  in ;  the ;  i^{th} ;  training ;  example </p><p>\</p><p>x^{(i)} ; &#x3D; ; the ; input ; (features) ; of ; the ; i^{th} ; training ; example<br> \</p><p>m ; &#x3D; ; the ; number ; of ; training ; example<br>\<br>n ; &#x3D; the ; number ; of ; features<br>$$</p><h4 id="Feature-Scaling"><a href="#Feature-Scaling" class="headerlink" title="Feature Scaling"></a>Feature Scaling</h4><p>$$<br>x_i ; &#x3D; ; \frac{x_i - {\mu}_i}{s_i}<br>\<br>Where ; {\boldsymbol {\mu}_i } ; is ; the ; {\color {red} {average}} ; of ; all ; the ; values ; for ; feature(i) ;<br>\<br>and ; {\boldsymbol s_i}  ; is ; the ; range ; of ; values ; (max - min), ;<br>\<br>or ; {\boldsymbol s_i} ; is ; the ; standard ; deviation.<br>$$</p><p>Feature scaling speeds up gradient descent by avoiding many extra iterations that are required when one or more features take on much larger values than the rest.</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>矩阵求导（二）</title>
      <link href="/2020/10/10/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/10/10/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>一个实例：矩阵求导在 <strong>最小二乘法</strong> 中的应用。</p><span id="more"></span><h2 id="公式准备"><a href="#公式准备" class="headerlink" title="公式准备"></a>公式准备</h2><ol><li>$$ \frac{\mathrm{d} ,  \mathbf{X}^{\mathrm{T} }  \mathbf{A} }{\mathrm{d} , \mathbf{X} } ; &#x3D; ; \frac{\mathrm{d} , \mathbf{A}^{\mathrm{T} } \mathbf{X} }{\mathrm{d} , \mathbf{X} } ; &#x3D; ; \mathbf{A}  $$</li><li>$$ \frac{\mathrm{d} , \mathbf{X}^{\mathrm{T} }  \mathbf{A} , \mathbf{X} }{\mathrm{d} , \mathbf{X} } ; &#x3D; ; (\mathbf{A} ; + ; \mathbf{A}^{\mathrm{T} }) , \mathbf{X} $$</li></ol><h2 id="应用：最小二乘法"><a href="#应用：最小二乘法" class="headerlink" title="应用：最小二乘法"></a>应用：最小二乘法</h2><p>$$ \mathbf{Y} &#x3D; \begin{bmatrix} y_1 &amp; \cdots &amp; y_n  \end{bmatrix}^{\mathrm{T} } $$</p><p>$$ \mathbf{b} &#x3D; \begin{bmatrix} b_1 &amp; \cdots &amp; b_n  \end{bmatrix}^{\mathrm{T} } $$</p><p>$$ \mathbf{X} &#x3D; \begin{bmatrix} {x_1}^T &amp; \cdots &amp; {x_n}^T  \end{bmatrix}^{\mathrm{T} }，其中 ,  {x_1}^T ; &#x3D; ; \begin{bmatrix} x_{11} &amp; \cdots &amp; x_{nn} \end{bmatrix}  $$</p><p><strong>求：</strong> \( b, \)  使得 \(,   \mathbf{L}(b) ; &#x3D; ; \sum_{i&#x3D;1}^{n} , (y_i , - , {X_i}^{\mathrm{T} } , b)^2 ,  \)  取得最小值。<br><br ></p><p><strong>解</strong> $$ \mathbf{L}(b) ; &#x3D; ; (\mathbf{Y} , - , \mathbf{X} , \mathbf{b})^{\mathrm{T} } , (\mathbf{Y} , - , \mathbf{X} , \mathbf{b}) ; &#x3D; ; (\mathbf{Y}^{\mathrm{T} } , - , \mathbf{b}^{\mathrm{T} } , \mathbf{X}^{\mathrm{T} }) , (\mathbf{Y} , - , \mathbf{X} , \mathbf{b})<br>\<br>; &#x3D; ; \mathbf{Y}^{\mathrm{T} }  \mathbf{Y} , - , \mathbf{Y}^{\mathrm{T} } \mathbf{X b} , - , \mathbf{b}^{\mathrm{T} } \mathbf{X}^{\mathrm{T} } \mathbf{Y} , + , \mathbf{b}^{\mathrm{T} } \mathbf{X}^{\mathrm{T} } \mathbf{X b} ; &#x3D; ; \mathbf{Y}^{\mathrm{T}} \mathbf{Y} , - , 2 \mathbf{Y}^{\mathrm{T} } \mathbf{X b} , + , \mathbf{b}^{\mathrm{T} } \mathbf{X}^{\mathrm{T} } \mathbf{X b}  $$<br><br ></p><p><strong>对 b 求导：</strong> $$ \frac{\mathrm{d} , \mathbf{L}(b)}{\mathrm{d} , \mathbf{b} } ; &#x3D; ; 0 , -2,(\mathbf{Y}^{\mathrm{T} } \mathbf{X})^{\mathrm{T} } , + , (\mathbf{X}^{\mathbf{T} } \mathbf{X} , + , \mathbf{X}^{\mathbf{T} } \mathbf{X})\mathbf{b} ; &#x3D; ; - 2, \mathbf{X}^{\mathbf{T} } \mathbf{Y} , + , 2 , \mathbf{X}^{\mathbf{T} } \mathbf{X b} &#x3D; 0 $$</p><p><strong>解得：</strong> $$ \hat{b} ; &#x3D; ; (\mathbf{X}^{\mathrm{T} } \mathbf{X})^{-1} , \mathbf{X}^{\mathbf{T} } \mathbf{Y}  $$</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>矩阵求导（一）</title>
      <link href="/2020/10/09/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/10/09/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>矩阵求导的本质：\( \frac{\mathrm{d} \mathbf{A} }{\mathrm{d} \mathbf{B} }  \) ，矩阵 <strong>A</strong> 中的每个元素对矩阵 <strong>B</strong> 中的每个元素求导（逐元素求导）。</p><span id="more"></span><h2 id="求导规则"><a href="#求导规则" class="headerlink" title="求导规则"></a>求导规则</h2><h3 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h3><p>$$ f(x) ; &#x3D; ; f(x_1, , x_2, ,  \ldots , ,   x_n)，是标量函数。$$ </p><p>$$ \mathbf{X} ;  &#x3D; ; \begin{bmatrix} x_1 &amp; x_2 &amp;  \cdots &amp; x_n  \end{bmatrix}^T，是向量。  $$</p><p>$$ \frac{\mathrm{d} , f(x)}{\mathrm{d} , X} ; &#x3D; ;  \begin{bmatrix} \frac{\partial , f(x)}{\partial , x_1} \ \frac{\partial , f(x)}{\partial , x_2} \ \vdots \ \frac{\partial , f(x)}{\partial , x_3}   \end{bmatrix}$$</p><p>实际就是将多元函数的偏导写在一个列向量中。</p><h3 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h3><p>$$ f(\mathbf{x}) ; &#x3D; ; \begin{bmatrix} f_1 , (\mathbf{x}) \ f_2, (\mathbf{x}) \ \vdots \ f_n(\mathbf{x})  \end{bmatrix}，是向量函数。 $$</p><p>$$ x 是标量。 $$</p><p>$$ \frac{\mathrm{d} ,  f(\mathbf{x})}{\mathrm{d} , x} ; &#x3D; ; \begin{bmatrix} \frac{\partial , f_1, (\mathbf{x})}{\partial , x} &amp; \frac{\partial , f_2, (\mathbf{x})}{\partial , x} &amp; \cdots &amp; \frac{\partial , f_n, (\mathbf{x})}{\partial , x}   \end{bmatrix} $$</p><p>与例一相比，在外形上似乎只是将例一的结果转置了一下。用行向量表示的叫 <strong>分母布局</strong>，用列向量表示的叫 <strong>分子布局</strong>，这两种表示方法都是可以的。</p><hr><h2 id="常见矩阵求导公式的推导"><a href="#常见矩阵求导公式的推导" class="headerlink" title="常见矩阵求导公式的推导"></a>常见矩阵求导公式的推导</h2><h3 id="公式一"><a href="#公式一" class="headerlink" title="公式一"></a>公式一</h3><p>$$ \mathbf{A} &#x3D; \begin{bmatrix}a_1  &amp; a_2 &amp;   \cdots   &amp; a_n  \end{bmatrix}^T  $$</p><p>$$ \mathbf{X} &#x3D; \begin{bmatrix}x_1  &amp; x_2 &amp;   \cdots   &amp; x_n  \end{bmatrix}^T $$</p><p>$$<br>f(x) ; &#x3D; ; A^{\mathrm{T} } , \mathbf{X} ;  &#x3D; ;  </p><p>\begin{bmatrix}<br>a_1  &amp; a_2 &amp;   \cdots   &amp; a_n<br>\end{bmatrix} ; </p><p>\begin{bmatrix}<br>x_1  \  x_2  \  \vdots  \  x_n<br>\end{bmatrix}</p><p>; &#x3D; ; \sum_{i&#x3D;1}^{n} {a_i , x_i}<br>$$<br>$$ \therefore \frac{\mathrm{d} , f(x)}{\mathrm{d}, \mathbf{X} } ; &#x3D; ; \frac{\mathrm{d}, A^{\mathrm{T} } , \mathbf{X} }{\mathrm{d} , \mathbf{X} } ; &#x3D; ;<br>\begin{bmatrix}<br>\frac{\partial , f(x)}{\partial , x_1} \ \frac{\partial , f(x)}{\partial , x_2} \ \vdots  \ \frac{\partial , f(x)}{\partial , x_n}   \end{bmatrix}<br>; &#x3D; ;<br>\begin{bmatrix}<br>a_1 \ a_2 \ \vdots \ a_n<br>\end{bmatrix} ; &#x3D; ; \mathbf{A} $$</p><h3 id="公式二"><a href="#公式二" class="headerlink" title="公式二"></a>公式二</h3><p>$$ \mathbf{X} &#x3D;<br>\begin{bmatrix}<br>x_1 &amp; x_2 &amp;  \cdots  &amp; x_n<br>\end{bmatrix}^T $$</p><p>$$ \mathbf{A} &#x3D; \begin{bmatrix}<br>a_{11}  &amp; \cdots &amp; a_{1n} \<br>\vdots &amp; \ddots &amp;  \vdots \<br>a_{n1} &amp; \cdots &amp; a_{nn}<br>\end{bmatrix} $$</p><p>$$ f(x) ; &#x3D; ; \mathbf{X}^{\mathrm{T} } , \mathbf{A} , \mathbf{X} ; &#x3D; ; \sum_{i&#x3D;1}^{n} , \sum_{j&#x3D;1}^{n} , a_{ij} ,  x_i , x_j $$</p><p>$$ \therefore \frac{\mathrm{d} , f(x)}{\mathrm{d} , \mathbf{X} }<br>; &#x3D; ;<br>\begin{bmatrix}<br>\frac{\partial , f(x)}{\partial , x_1} \<br>\vdots \<br>\frac{\partial , f(x)}{\partial , x_n}<br>\end{bmatrix}</p><p>; &#x3D; ;</p><p>\begin{bmatrix}<br>\sum_{j&#x3D;1}^{n} , a_{1j} , x_j ; + ;  \sum_{i&#x3D;1}^{n} , a_{i1} , x_i \<br>\vdots \<br>\sum_{j&#x3D;1}^{n} , a_{nj} , x_j ; + ; \sum_{i&#x3D;1}^{n} , a_{in} , x_i<br>\end{bmatrix}</p><p>; &#x3D; ;</p><p>\begin{bmatrix}<br>\sum_{j&#x3D;1}^{n} , a_{1j} , x_j \<br>\vdots \<br>\sum_{j&#x3D;1}^{n} , a_{nj} , x_j<br>\end{bmatrix}</p><p>; + ;</p><p>\begin{bmatrix}<br>\sum_{i&#x3D;1}^{n} , a_{i1} , x_i \<br> \vdots  \<br>\sum_{i&#x3D;1}^{n} , a_{in} , x_i<br>\end{bmatrix} </p><p>\</p><p>; &#x3D; ;</p><p>\begin{bmatrix}<br>a_{11}  &amp; \cdots &amp;  a_{1n} \<br>\vdots &amp; \vdots &amp; \vdots \<br>a_{n1} &amp; \cdots &amp; a_{nn}<br>\end{bmatrix} ; </p><p>\begin{bmatrix}<br>x_1 \<br>\vdots \<br>x_n  \end{bmatrix} </p><p>; + ;</p><p>\begin{bmatrix}<br>a_{11} &amp;  \cdots &amp;   a_{n1} \<br>\vdots &amp; \vdots &amp; \vdots \<br>a_{1n} &amp; \cdots &amp; a_{nn}<br>\end{bmatrix} </p><p>\begin{bmatrix}<br>x_1 \<br>\vdots \<br>x_n  \end{bmatrix} </p><p>; &#x3D; ;</p><p>\mathbf{A} , \mathbf{X} ; + ; \mathbf{A}^{\mathrm{T} } , \mathbf{X} ; &#x3D; ; (\mathbf{A} , + , \mathbf{A}^{\mathrm{T} }) , X $$</p><h3 id="公式三"><a href="#公式三" class="headerlink" title="公式三"></a>公式三</h3><p>$$ \mathbf{X} ; &#x3D; ;<br>\begin{bmatrix} x_1 &amp; x_2 &amp;  \cdots &amp; x_n  \end{bmatrix}^T $$</p><p>$$ f(x) ; &#x3D; ; \mathbf{X}^{\mathrm{T} } , \mathbf{X} ; &#x3D; ; \sum_{i&#x3D;1}^{n} , {x_i}^2  $$</p><p>$$ \therefore \frac{\mathrm{d} , f(x)}{\mathrm{d} , x} ; &#x3D; ; 2 ,  \mathbf{X} $$</p><h3 id="公式四"><a href="#公式四" class="headerlink" title="公式四"></a>公式四</h3><p>$$<br>\frac{\partial \ \mathbf{X}^{\mathrm{T} }\mathbf{AX} }{\partial \ \mathbf{X} } ;&#x3D;; (\ \mathbf{A} \ + \ \mathbf{A}^{\mathrm{T} } \ )\ \mathbf{X}, ;;<br>如果\ \mathbf{A} \ 是对称矩阵的话，结果就可以写成 ; 2\mathbf{AX}<br>$$</p><hr><h3 id="公式五"><a href="#公式五" class="headerlink" title="公式五"></a>公式五</h3><p>$$<br>\mathbf{L} ;&#x3D;; (\ \mathbf{XW} ,-, \mathbf{Y} \ )^2 ;&#x3D;; (\ \mathbf{XW} ,-, \mathbf{Y} \ )(\ \mathbf{XW} ,-, \mathbf{Y} \ )^{\mathrm{T} } \<br>\frac{\partial \ \mathbf{L} }{\partial \ \mathbf{W} } ;&#x3D;; \mathbf{X}^{\mathrm{T} } \ 2 \ (\ \mathbf{XW} ,-, \mathbf{Y} \ )<br>$$</p><hr><h3 id="公式六"><a href="#公式六" class="headerlink" title="公式六"></a>公式六</h3><p>$$<br>\frac{\partial \ \mathbf{LAX} }{\partial \ \mathbf{A} } ;&#x3D;; \mathbf{L}^\mathrm{T} \ \mathbf{X}^\mathrm{T}<br>$$</p><hr><h3 id="公式七"><a href="#公式七" class="headerlink" title="公式七"></a>公式七</h3><p>$$<br>\frac{\partial \ \ {| \ \mathbf{AX} \ - \ \mathbf{b} |}_2 ^2}{\partial \ \ \mathbf{X} } ;&#x3D;; 2 \ \mathbf{A}^{\mathrm{T} } \ (\mathbf{AX} \ - \ \mathbf{b})<br>$$</p><hr><h3 id="公式八"><a href="#公式八" class="headerlink" title="公式八"></a>公式八</h3><p>$$<br>\frac{\partial \ {\mathbf{X} }^{\mathrm{T} }{\mathbf{A} }^{\mathrm{T} } }{\partial \ \mathbf{X} } ;&#x3D;; {\mathbf{A}}^{\mathrm{T} } \<br>\frac{\partial \ \mathbf{b , X^{\mathrm{T} } A^{\mathrm{T} } }}{\partial \ X} ;&#x3D;; \mathbf{A^{\mathrm{T} } , b }<br>$$</p><hr><p>未完待续，等遇到新的公式，我再继续推一下，推理过程都差不多的，逐元素求导就行了。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>哈佛结构与冯诺依曼结构</title>
      <link href="/2020/09/24/%E5%93%88%E4%BD%9B%E7%BB%93%E6%9E%84%E4%B8%8E%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%84/"/>
      <url>/2020/09/24/%E5%93%88%E4%BD%9B%E7%BB%93%E6%9E%84%E4%B8%8E%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>哈佛结构与冯诺依曼结构小结。</p><span id="more"></span><h2 id="哈佛结构"><a href="#哈佛结构" class="headerlink" title="哈佛结构"></a>哈佛结构</h2><ol><li>哈佛结构是一种将程序指令储存和数据储存分开的存储器结构。 </li><li>数据和指令的存储可以同时进行，可以使指令和数据有不同的数据宽度。</li><li>CPU 分别通过 2 组独立的总线来对接指令和数据，所以理论上哈佛结构的机器执行效率较高，速度较快。</li><li>在哈佛结构中，两个寄存器不需要有共同的特征。特别是，字宽、定时、实现技术和内存地址都可以不同。</li><li><strong>高成本、高效率、高可靠性</strong>。</li></ol><p>单片机中几乎都是用哈佛结构的，因为它使用的环境对稳定性和安全性要求都比较高。另一个原因是速度会快一些，因为那些小芯片主频都很低，所以速度不高，使用哈佛结构多少能提高一些系统性能。</p><h2 id="冯诺依曼结构"><a href="#冯诺依曼结构" class="headerlink" title="冯诺依曼结构"></a>冯诺依曼结构</h2><ol><li>冯诺依曼结构是一种将程序指令存储器和数据存储器合并在一起的设计结构。</li><li>CPU 只通过 1 组总线来 <strong>分时</strong> 获取指令和数据，所以冯诺依曼机的执行效率就没有哈佛机的效率高，但是节约了一定的成本。</li><li><strong>低成本、低效率、低可靠度</strong>。</li></ol><hr><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>纯冯诺依曼架构下的CPU可以读取指令或读&#x2F;写内存数据，它们都不能使指令和数据同时使用同一个的总线系统。使用哈佛结构的计算机中CPU，即使没有缓存的情况下也可以在读取指令的同时进行数据访问。由于指令和数据访问不使用同一个内存沟道，因此哈佛结构的计算机可以在相同的电路复杂度下有更好的表现。</p><p>同时，哈佛架构机拥有不同的代码和数据的地址空间：指令的零地址和数据的零地址是不同的。指令的零地址可能是二十四位的值，而数据的零地址可能是一个八位字节，而非二十四位值的一部分。</p><hr><p>事实上，现在的很多设计都是哈佛结构与冯诺依曼结构混用的，就是为了各取所长嘛。<br>比如说，CPU 的缓存分为指令缓存和数据缓存，CPU 访问缓存时使用哈佛体系机构。<br>然而，当高速缓存未命中时，数据从主存储器中检索，这时候指令和数据就不是分开来存储的了，因此，在这种情况下，我们也能看到冯诺依曼结构的特点。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Read and To-Read List</title>
      <link href="/2020/09/03/Read%20and%20To-Read%20List/"/>
      <url>/2020/09/03/Read%20and%20To-Read%20List/</url>
      
        <content type="html"><![CDATA[<p><strong>正在阅读：</strong> 《如何假装懂音乐》、《枪炮、病菌与钢铁》</p><span id="more"></span><h2 id="技术类书籍"><a href="#技术类书籍" class="headerlink" title="技术类书籍"></a>技术类书籍</h2><blockquote><input type="checkbox" checked="checked">《具体数学》<br><input type="checkbox">《机器学习中的数学修炼》<br><input type="checkbox">《西瓜书》<br><input type="checkbox" checked="checked">《花书》👍<br><input type="checkbox">《动手学深度学习》<br><input type="checkbox">《Python 机器学习基础教程》<br><input type="checkbox">《深度学习入门：基于python的理论与实践》<br><input type="checkbox">《Python 深度学习》<br><input type="checkbox">《流畅的 Python》<br><input type="checkbox">《数字图像处理》冈萨雷斯<br><input type="checkbox" checked="checked">《矩阵分析与应用》张贤达👍<br><input type="checkbox">《深入理解Java虚拟机》<br><input type="checkbox" checked="checked">《统计学习方法》<br><input type="checkbox">《Java核心技术：卷Ⅰ》<br><input type="checkbox">《Java 多线程编程核心技术》<br><input type="checkbox">《Java 并发编程的艺术》<br><input type="checkbox">《高性能 Mysql》<br><input type="checkbox">《Mysql 必知必会》<br><input type="checkbox">《图解 TCP/IP》<br><input type="checkbox">《正则指引》<br><input type="checkbox">《人月神话》<br><input type="checkbox">《Head First Python》<br><input type="checkbox" checked="checked">《CSAPP》👍<br><input type="checkbox" checked="checked">《Effective　C++》<br><input type="checkbox" checked="checked">《鸟哥的 Linux 私房菜》👍<br><input type="checkbox" checked="checked">《C和指针》<br><input type="checkbox" checked="checked">  黑书《计算机组成与设计硬件/软件接口》<br><input type="checkbox" checked="checked"> 黑书《C程序设计语言》<br><input type="checkbox" checked="checked">黑书《数据结构与算法：C语言描述》<br><input type="checkbox" checked="checked">黑书《计算机网络：自顶向下方法》<br><input type="checkbox" checked="checked">《计算机网络》特南鲍姆 👍<br><input type="checkbox" checked="checked">《计算机网络》谢希仁 <br><input type="checkbox" checked="checked">《计算机组成原理》唐朔飞 <br><input type="checkbox" checked="checked">《计算机操作系统》汤小舟 <br><input type="checkbox" checked="checked">《计算机组成原理》白中英 <br><input type="checkbox" checked="checked">《编码：隐匿在计算机软硬件背后的语言》👍<br><input type="checkbox" checked="checked">《大话数据结构》<br><input type="checkbox" checked="checked">《Python3 网络爬虫开发实战》崔庆才 <br><input type="checkbox" checked="checked">《Python 编程从入门到实战》<br><input type="checkbox" checked="checked">《计算机是怎样跑起来的》<br><input type="checkbox" checked="checked">《数学之美》👍<br><input type="checkbox" checked="checked">《啊哈！算法》 <br><input type="checkbox" checked="checked">《程序是怎样跑起来的》<br><input type="checkbox" checked="checked">《网络是怎样连接的》<br><input type="checkbox" checked="checked">王爽《汇编语言》👍<br><input type="checkbox" checked="checked">《Python神经网络编程》<br><input type="checkbox" checked="checked">《AI 安全之对抗样本入门》<br><input type="checkbox" checked="checked">《Web 安全之机器学习入门》<br><input type="checkbox" checked="checked">《情感计算》<br><input type="checkbox" checked="checked">《现代自然语言生成》<br><input type="checkbox" checked="checked">《基于深度学习的自然语言处理》<br><input type="checkbox" checked="checked">《音乐治疗学理论》<br></blockquote><hr><h2 id="杂书"><a href="#杂书" class="headerlink" title="杂书"></a>杂书</h2><blockquote><input type="checkbox" checked="checked">《国富论》<br><input type="checkbox" checked="checked">《创业维艰》👍<br><input type="checkbox">《错误的行为》<br><input type="checkbox">《行为经济学讲义》<br><input type="checkbox" checked="checked">《潜规则》<br><input type="checkbox" checked="checked">《血酬定律》👍<br><input type="checkbox" checked="checked">《叫魂》<br><input type="checkbox">《西方哲学史》<br><input type="checkbox">《激荡十年，水大鱼大》<br><input type="checkbox">《激荡三十年》<br><input type="checkbox" checked="checked">《爱的博弈》<br><input type="checkbox">《洞穴奇案》<br><input type="checkbox" checked="checked">《孤独六讲》<br><input type="checkbox">《科学革命的结构》<br><input type="checkbox">《原则》<br><input type="checkbox">《希波战争史》<br><input type="checkbox">《利维坦》<br><input type="checkbox" checked="checked">《非对称风险》<br><input type="checkbox">《思考，快与慢》<br><input type="checkbox">《猜想与反驳》<br><input type="checkbox">《客观知识》<br><input type="checkbox">《从逻辑的观点看》<br><input type="checkbox">《君主论》<br><input type="checkbox">《哈佛中国史》套装全6册<br><input type="checkbox">《丝绸之路：一部全新的世界史》<br><input type="checkbox">《1988：我想和这个世界谈谈》<br><input type="checkbox">《文明的冲突与世界秩序的重建》<br><input type="checkbox" checked="checked">《共产党宣言》👍<br><input type="checkbox">《论美国的民主》<br><input type="checkbox">《论法的精神》<br><input type="checkbox">《社会心理学》<br><input type="checkbox" checked="checked">《沉思录》<br><input type="checkbox">《理想国》<br><input type="checkbox">《罗马帝国消亡史》<br><input type="checkbox">《伯罗奔尼撒战争史》<br><input type="checkbox">《社会契约论》<br><input type="checkbox">《全球通史》斯塔夫里阿诺斯<br><input type="checkbox" checked="checked">《风格的要素》👍<br><input type="checkbox">《万历十五年》<br><input type="checkbox">《罗马人的故事》<br><input type="checkbox">《从晚清到民国》<br><input type="checkbox" checked="checked">《中国历代政治得失》<br><input type="checkbox">《耶路撒冷三千年》<br><input type="checkbox">《人性的弱点》<br><input type="checkbox">《枪炮、病菌与钢铁》<br><input type="checkbox">《禅与摩托车维修艺术》<br><input type="checkbox">《怪诞经济学》<br><input type="checkbox" >《怪诞行为学》全四册<br><input type="checkbox">《魔鬼经济学》<br><input type="checkbox">《牛奶可乐经济学》<br><input type="checkbox" checked="checked">《乌龟大王亚特尔》<br><input type="checkbox" checked="checked">《风口上的猪》<br><input type="checkbox" checked="checked">《从一到无穷大》👍<br><input type="checkbox" checked="checked">《量子史话：上帝也掷骰子吗》<br><input type="checkbox" checked="checked">《A brief History of Time》<br><input type="checkbox" checked="checked">《思维的乐趣》<br><input type="checkbox">《黑天鹅》<br><input type="checkbox">《每天懂一点色彩心理学》<br><input type="checkbox">《目送》<br><input type="checkbox" checked="checked">《平如美棠：我俩的故事》<br><input type="checkbox">《本书书名无法描述本书内容：一场逗你玩的哲学冒险》<br><input type="checkbox">《毛泽东选集》1-5 卷<br><input type="checkbox">《我的奋斗》罗永浩<br><input type="checkbox">《王朔文集》典藏版<br><input type="checkbox" checked="checked">《时间简史》<br><input type="checkbox">《把时间当作朋友》<br><input type="checkbox">《通往财富自由之路》<br><input type="checkbox">《穷查理宝典》<br><input type="checkbox">《天才在左疯子在右》<br><input type="checkbox" checked="checked">《非暴力沟通》<br><input type="checkbox" checked="checked">《定投十年财务自由》<br><input type="checkbox" >《人人都是产品经理》<br><input type="checkbox" checked="checked">《文化苦旅》<br><input type="checkbox" >《影响力》<br><input type="checkbox" >《心理控制术》<br><input type="checkbox" >《一口气读完世界史》<br><input type="checkbox" >《怎样说话才打动人》<br><input type="checkbox" >《最寒冷的冬天：美国人眼中的朝鲜战争》<br><input type="checkbox" >《柏拉图式性爱》<br><input type="checkbox" >《薛兆丰经济学讲义》<br><input type="checkbox">《第二次世界大战回忆录》<br><input type="checkbox" >《华尔街》<br><input type="checkbox" checked="checked">《鱼羊野史》1-6 卷<br><input type="checkbox" >《非平面》<br><input type="checkbox" >《货币战争》<br><input type="checkbox" >《剑桥中国史》全 16 册<br><input type="checkbox" >《金融的逻辑》<br><input type="checkbox" >《历史是个什么玩意儿》<br><input type="checkbox" >《亲爱的三毛》<br><input type="checkbox" >《贫穷的本质》<br><input type="checkbox" >《聪明的投资者》<br><input type="checkbox" checked="checked">《自私的基因》<br><input type="checkbox" checked="checked">《房思琪的初恋乐园》<br><input type="checkbox" >《终身成长》<br><input type="checkbox" >《我包罗万象》<br><input type="checkbox" >《半小时漫画中国史》<br><input type="checkbox" >《唐宋中国才女逸史》<br><input type="checkbox" >《见字如来》<br><input type="checkbox" >《世间的陀螺：写给亲人、故乡和远去的旧时光》<br><input type="checkbox" >《如果历史是一群喵》夏商西周篇<br><input type="checkbox" >《娱乐至死》<br><input type="checkbox" >《凡悲鲁·江湖》<br><input type="checkbox" >《时间之书：余世存说二十四节气》<br><input type="checkbox" >《趣味生活简史》<br><input type="checkbox" >《城：我与北京的八十年》<br><input type="checkbox" checked="checked">《如何假装懂音乐》<br><input type="checkbox" checked="checked">《李录谈现代化十六讲》<br><input type="checkbox" checked="checked">《小狗钱钱 12》<br><input type="checkbox" checked="checked">《谁能拒绝一只快乐的小狗呢》<br><input type="checkbox" checked="checked">《番茄工作法》<br><input type="checkbox" checked="checked">《如何阅读一本书》<br><input type="checkbox" checked="checked">《反脆弱：从不确定性中获益》👍<br><input type="checkbox" checked="checked">《王小波书信集》👍<br><input type="checkbox" checked="checked">《爱你就像爱生命》<br><input type="checkbox" checked="checked">《万寿寺》<br><input type="checkbox" checked="checked">《朱生豪情书全集》<br><input type="checkbox" checked="checked">《富爸爸穷爸爸》<br><input type="checkbox" checked="checked">《黑客与画家》<br><input type="checkbox" checked="checked">《浪潮之巅》👍<br><input type="checkbox" checked="checked">《梦的解析》<br><input type="checkbox" checked="checked">《第二曲线：跨越 S 型曲线的二次增长》<br><input type="checkbox" checked="checked">《规模：复杂世界的简单法则》<br><input type="checkbox" checked="checked">《指数基金投资指南》<br><input type="checkbox" checked="checked">《自控力》<br><input type="checkbox" checked="checked">《蔡康永的说话之道 12》<br><input type="checkbox" checked="checked">《朝花夕拾》<br><input type="checkbox" checked="checked">《繁星春水》<br></blockquote><hr><h2 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h2><blockquote><input type="checkbox" checked="checked">《绿山墙的安妮》<br><input type="checkbox" checked="checked">《动物农场》<br><input type="checkbox">《1Q84》<br><input type="checkbox">《基督山伯爵》全集上下两册<br><input type="checkbox">《罪与罚》<br><input type="checkbox">《教父》全集三册<br><input type="checkbox" checked="checked">《平凡的世界》全集三册<br><input type="checkbox">《三个火枪手》<br><input type="checkbox">《温故 1942》<br><input type="checkbox">《堂吉诃德》<br><input type="checkbox" checked="checked">《围城》<br><input type="checkbox" checked="checked">《基地》<br><input type="checkbox">《基地与帝国》<br><input type="checkbox">《基地系列 3·第二基地》<br><input type="checkbox">《变形记》<br><input type="checkbox">《双城记》<br><input type="checkbox">《北京折叠》<br><input type="checkbox" checked="checked">《遥远的救世主》<br><input type="checkbox">《尼罗河上的惨案》<br><input type="checkbox">《无人生还》<br><input type="checkbox">《东方快车谋杀案》<br><input type="checkbox">《达芬奇密码》<br><input type="checkbox" >《以眨眼干杯》<br><input type="checkbox" >《夜光的阶梯》<br><input type="checkbox" >《蓝色列车之谜》<br><input type="checkbox" >《骗局》<br><input type="checkbox" >《雨》<br><input type="checkbox" >《中央帝国的财政密码》<br><input type="checkbox" >《康熙大帝》二月河帝王系列<br><input type="checkbox" >《乾隆大帝》二月河帝王系列<br><input type="checkbox" >《雍正大帝》二月河帝王系列<br><input type="checkbox">《第二十二条军规》<br><input type="checkbox">《海边的卡夫卡》<br><input type="checkbox">《傲慢与偏见》<br><input type="checkbox">《安娜·卡列尼娜》<br><input type="checkbox">《挪威的森林》<br><input type="checkbox">《穆斯林的葬礼》<br><input type="checkbox">《荆棘鸟》<br><input type="checkbox">《巴黎圣母院》<br><input type="checkbox">《悲惨世界》<br><input type="checkbox">《彼得·潘》<br><input type="checkbox">《世界尽头与冷酷仙境》<br><input type="checkbox">《舞！舞！舞！》<br><input type="checkbox">《不能承受的生命之轻》<br><input type="checkbox">《藏地密码》套装共 10 册<br><input type="checkbox" >《简·爱》<br><input type="checkbox" >《刺杀骑士团长》<br><input type="checkbox" >《牧羊少年奇幻之旅》<br><input type="checkbox" >《绿野仙踪》<br><input type="checkbox" >《唐吉诃德》<br><input type="checkbox" >《解忧杂货店》<br><input type="checkbox" >《钱堆里的男孩》<br><input type="checkbox" >《小偷家族》<br><input type="checkbox">《一个人的朝圣》<br><input type="checkbox" checked="checked">《霍乱时期的爱情》<br><input type="checkbox" checked="checked">《追风筝的人》<br><input type="checkbox" checked="checked">《城南旧事》<br><input type="checkbox" checked="checked">《白夜行》<br><input type="checkbox" checked="checked">《许三观卖血记》<br><input type="checkbox" checked="checked">《了不起的盖茨比》<br><input type="checkbox" checked="checked">《活着》<br><input type="checkbox" checked="checked">《大卫·科波菲尔》<br><input type="checkbox" checked="checked">《红与黑》<br><input type="checkbox" checked="checked">《平原上的摩西》<br><input type="checkbox" checked="checked">《小王子》<br><input type="checkbox" checked="checked">《老人与海》<br><input type="checkbox" checked="checked">《少年维特之烦恼》<br><input type="checkbox" checked="checked">《汤姆叔叔的小屋》<br><input type="checkbox" checked="checked">《麦田里的守望者》<br><input type="checkbox" checked="checked">《茶花女》<br><input type="checkbox" checked="checked">《嫌疑人X的献身》<br><input type="checkbox" checked="checked">《明朝那些事儿全9册》👍<br><input type="checkbox" checked="checked">《月亮与六便士》<br><input type="checkbox" checked="checked">《三体》全集共三册👍<br><input type="checkbox" checked="checked">《坍缩》<br><input type="checkbox" checked="checked">《流浪地球》<br><input type="checkbox" checked="checked">《乡村教师》<br><input type="checkbox">《球状闪电》<br><input type="checkbox" checked="checked">《边城》<br><input type="checkbox" checked="checked">《汤姆索亚历险记》<br><input type="checkbox" checked="checked">《安徒生童话》<br><input type="checkbox" checked="checked">《伊索寓言》<br><input type="checkbox" checked="checked">《希腊神话故事》<br><input type="checkbox" checked="checked">《希腊古典神话》<br><input type="checkbox" checked="checked">《三国演义》<br><input type="checkbox" checked="checked">《水浒传》<br><input type="checkbox" checked="checked">《名人传》<br><input type="checkbox" checked="checked">《福尔摩斯探案》套装全集共三册👍<br><input type="checkbox" checked="checked">《爱的教育》<br><input type="checkbox" checked="checked">《童年》<br><input type="checkbox" checked="checked">《钢铁是怎样炼成的》<br><input type="checkbox" checked="checked">《草房子》<br><input type="checkbox" checked="checked">《皮皮鲁和鲁西西》<br><input type="checkbox" checked="checked">《牛虻》👍<br><input type="checkbox" checked="checked">《蛙》<br><input type="checkbox" checked="checked">《百年孤独》👍<br><input type="checkbox" checked="checked">《骆驼祥子》<br><input type="checkbox" checked="checked">《黄金时代》<br><input type="checkbox" checked="checked">《白银时代》<br><input type="checkbox" checked="checked">《青铜时代》👍<br><input type="checkbox" checked="checked">《一只特立独行的猪》<br><input type="checkbox" checked="checked">《大明王朝 1644》<br><input type="checkbox" checked="checked">《昆虫记》<br><input type="checkbox" checked="checked">《格列佛游记》<br><input type="checkbox" checked="checked">《鲁滨逊漂流记》<br><input type="checkbox" checked="checked">《乌合之众》<br><input type="checkbox" checked="checked">《1984》<br></blockquote><hr><h2 id="人物传记"><a href="#人物传记" class="headerlink" title="人物传记"></a>人物传记</h2><blockquote><input type="checkbox" checked="checked">《毛泽东传》罗斯特里尔👍<br><input type="checkbox" >《邓小平时代》港中文出版社<br><input type="checkbox" >《蒋介石传》<br><input type="checkbox" >《周恩来传》<br><input type="checkbox">《德川家康》傅高义<br><input type="checkbox" checked="checked">《十大将军》<br><input type="checkbox" checked="checked">《十大元帅》<br><input type="checkbox" checked="checked">《他改变了中国》<br><input type="checkbox" checked="checked">《拿破仑传》<br><input type="checkbox" checked="checked">《李嘉诚传》<br><input type="checkbox" checked="checked">《粟裕传》<br><input type="checkbox" checked="checked">《与原子共传奇：钱三强》<br></blockquote><hr><h2 id="看完-amp-不推荐"><a href="#看完-amp-不推荐" class="headerlink" title="看完 &amp; 不推荐"></a>看完 &amp; 不推荐</h2><blockquote><input type="checkbox" checked="checked">《腾讯方法》<br><input type="checkbox" checked="checked">《知识与权力：信息如何影响决策及财富创造》<br><input type="checkbox" checked="checked">《好好说话》<br><input type="checkbox" checked="checked">《第一时间看透对方：FBI 教你破解身体语言》<br><input type="checkbox" checked="checked">《微精通：轻松到不可能放弃的学习手册》<br><input type="checkbox" checked="checked">《博弈论》中信出版社<br><input type="checkbox" checked="checked">《无压力社交》<br><input type="checkbox" checked="checked">《查理·芒格的智慧：投资的栅格理论》<br><input type="checkbox" checked="checked">《自在独行》<br><input type="checkbox" checked="checked">《岛上书店》<br><input type="checkbox" checked="checked">《瓦尔登湖》<br></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于区块链的身份认证系统Demo</title>
      <link href="/2020/06/06/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%B3%BB%E7%BB%9FDemo/"/>
      <url>/2020/06/06/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%B3%BB%E7%BB%9FDemo/</url>
      
        <content type="html"><![CDATA[<p>本文是一篇在 Windows 环境下，关于如何使用 <strong>基于区块链的身份认证系统Demo</strong> 的教程。<br><strong>注：这真的只是个 Demo！</strong></p><span id="more"></span><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ol><li>OS： Windows 10 教育版（64 位）</li><li>Ganache 版本： v 2.1.2.0</li><li>Nodejs 版本：v 10.15.1</li><li>Truffle 版本：v 5.1.10</li><li>编程语言：Solidity</li><li>Solidity 编译器版本：v 0.5.10</li><li>MetaMask 版本：v 7.7.9</li><li>浏览器：Google Chrome v 83.0.4103.61（64 位） </li><li>代码编辑器：Visual Studio Code</li><li>MarkDown 编辑器：Typora</li></ol><hr><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>假设你已经完全搭建好了上述的 <strong>开发环境</strong>，现在就可以直接使用此 Demo 了。（不仅是搭建环境，还有在使用Ganache 等其他工具的时候，都有许多 <strong>坑</strong>，请继续阅读后面的 <strong>踩坑环节</strong>）</p><p>接下来，让我们 <del>假设自己</del> 万事俱备，就差让系统跑起来了！</p><h3 id="步骤一：使用-Ganache-客户端搭建本地私有链"><a href="#步骤一：使用-Ganache-客户端搭建本地私有链" class="headerlink" title="步骤一：使用 Ganache 客户端搭建本地私有链"></a>步骤一：使用 Ganache 客户端搭建本地私有链</h3><p>这一步非常简单，直接启动 Ganache 客户端，然后点击 <strong>QUICKSTART</strong> 就可以了。它会帮我们在本地创建一个区块链，然后还提供了 10 个账户（公钥和私钥），每个账户初始都有 100 个 ETH，供我们实验使用。</p><h4 id="图文流程如下"><a href="#图文流程如下" class="headerlink" title="图文流程如下"></a>图文流程如下</h4><p>下方图片展示的是一个刚刚启动完毕的 Ganache 客户端界面截图。</p><p><img src="https://i.loli.net/2020/06/06/6wK5Tnoe72v4MxC.png" alt="Ganache客户端启动界面"><br><br></p><p>点击界面上的 <strong>QUICKSTART</strong> 按钮，就可以看到如下图所示的界面了。（图中的红色框框和红色序号是我自己画上去的，待会会有说明）</p><p><img src="https://i.loli.net/2020/06/06/6jraWomH3K4giFc.png" alt="点击 QUICKSTASRT"><br><br></p><p>图中用红色序号 <strong>①</strong> 标注出来的方框里，看到那 12 个 <strong>未加粗</strong> 的英文单词了嘛，它们是一个整体，叫做 <strong>Wallet Seed</strong>，待会我们把这 10 个账号一次性导入到 Meta Mask 时，就会用到它们了。<br></p><p>上图中每个 <strong>ADDRESS</strong> 下都有一长串的十六 进制数，这个就是账户的 <strong>公钥</strong>。看到用红色序号 <strong>②</strong> 标记的位置了嘛，那里有个小🔑，点击它就会显示出这个账号的公钥（账号地址）和私钥，你可以点一下试试看，我这里就不放图了。<br></p><p>为了验证一下搭建私有链是否成功，我们可以点击一下选项栏里的 <strong>BLOCKS</strong> 选项，看一下效果吧，如下图所示。</p><img src="https://i.loli.net/2020/06/06/CHq4dR5SpuKDazB.png" alt="区块信息展示"  /><br><p>图中用红色方框标记出来的区域，就是我们刚刚 <strong>“挖”</strong> 出来的区块，看到红色区域中 BLOCK 下方的数字 0 了吧，这就是 <strong>创世区块</strong>，说明咱们的私有链已经搭建成功了。点击红色区域的任何一部分，将为我们展示此区块中的具体信息：区块头、区块体等，大家可以自行探索。</p><h3 id="步骤二：部署智能合约到区块链上"><a href="#步骤二：部署智能合约到区块链上" class="headerlink" title="步骤二：部署智能合约到区块链上"></a>步骤二：部署智能合约到区块链上</h3><p>这一部分也很简单，主要用到的命令有：切换当前所在目录命令 <code>cd</code>；编译智能合约命令 <code>truffle compile</code>；部署智能合约命令 <code>truffle migrate</code>；运行系统命令<code>npm run start</code>。几个简单的命令介绍完毕，我们来看具体操作。</p><h4 id="图文流程如下-1"><a href="#图文流程如下-1" class="headerlink" title="图文流程如下"></a>图文流程如下</h4><p>先给大家看一下我们的文件目录，我们待会部署合约的时候需要再次 <strong>改写</strong> App.js 这个文件。是不是看到图片中 <code>contracts</code> 目录下的 <strong>Authorization.sol</strong> 文件报错啦？这是由于我 VS Code 里的 Solidity Extension 版本与我使用的 Solidity 编译器版本不一致，没关系的，我们待会是在 Truffle 框架下进行编译的，这个报错提示并不会产生任何影响。（还有其他疑问，都会在 <strong>踩坑环节</strong> 逐一解答）<br><img src="https://i.loli.net/2020/06/06/McG36pbLuTHsUZn.png" alt="文件目录"><br><br></p><p>先把当前目录切换到 <code>client</code> 目录下。<br><img src="https://i.loli.net/2020/06/06/yP89MmaUwdnNFWH.png" alt="切换当前目录"><br><br></p><p>执行 <code>truffle compile</code> 命令，对智能合约进行编译。编译完成，报了一个 <strong>Warning</strong> ，说我们使用了一个还正在试验中的特性，最好不要在生产环境中使用这行代码 <code>pragma experimental ABIEncoderV2</code>。无伤大雅，我们只管用！编译完成后，你还会发现文件目录中多了一个文件夹 <code>build</code>。<br><img src="https://i.loli.net/2020/06/06/vcBTwStrqDMsNG9.png" alt="编译智能合约"><br><br></p><p>执行 <code>truffle migrate</code> 命令，将智能合约部署到区块链上。由于输出信息较多，我们只截取其中比较重要的部分进行展示。当你成功执行完这条命令后，你可以再回到 Ganache 客户端的 <strong>BLOCKS</strong> 选项里看一下，会多出四个区块来，你可以研究一下每个区块中的内容，以及为什么是四个区块😉。</p><p><img src="https://i.loli.net/2020/06/06/lo8TnQRHXvLEgSY.png" alt="truffle migrate"><br><img src="https://i.loli.net/2020/06/06/zgVSDXykB1REh9x.png" alt="合约地址"><br><br></p><p>看到上面第二幅图中红色框框的部分了嘛，我们需要复制 <strong>contract address</strong> 后的那一长串十六进制数，将其粘贴到 <strong>App.js</strong> 文件中的相应位置，如下图所示。</p><p><img src="https://i.loli.net/2020/06/06/O6ux7gPjX1eibH3.png" alt="复制合约地址"><br><br></p><p>接下来，我们就可以执行 <code>npm run start</code> 命令来让系统运行起来了。<br><img src="https://i.loli.net/2020/06/06/TiRU39o7CGQYBLj.png" alt="系统运行"><br><br></p><p>此时，你的浏览器应该自动打开系统的前端页面，且弹出下面这样的窗口，我们点击 <strong>使用账号种子密语导入</strong>。还记得之前说过的 <strong>Wallet Seed</strong> 嘛，把他粘贴到弹出的窗口中，设置好新的密码。</p><p><img src="https://i.loli.net/2020/06/06/FpKSiNsmfRyk1vV.png" alt="Meta Mask导入账号"><br><br></p><p>这时会弹出一个 MetaMask 连接到当前账户的窗口，如下图所示。（从这个 React 图标来看，你已经知道前端开发使用的是什么框架了吧，<strong>这是个坑</strong>，待会说）</p><p><img src="https://i.loli.net/2020/06/06/gGMOK6paEUJdbh2.png" alt="MetaMask 连接到账户"><br><br></p><p>点击 <strong>连接</strong> 后，我们就可以在浏览器的 MetaMask 扩展那里，点击右上角的账户头像，查看已经批量导入的账号了，请见下图。从图中可以看到，我们目前正在使用 Account 1 哦。</p><p><img src="https://i.loli.net/2020/06/07/6UED2LNKasCSBjT.png" alt="MetaMask 批量导入账户"><br><br>好的，到了最尴尬的时刻了。我的前端技术水平纯属🌶🐔，详情见下图。</p><p>这就是用户界面图，非常简陋，只有几个 <code>lable</code>、<code>button</code> 组件。显然，几个按钮代表了此 Demo 具备的基本功能。此外，我的信息展示部分，是在开发者控制台中通过 <code>console.log()</code> 进行展示的。<br><img src="https://i.loli.net/2020/06/06/lALGN2vMXrs47iP.png" alt="前端界面"><br><br>按 <strong>F12</strong> 键，点击开发者控制台导航栏里的 <code>Console</code>，再点击上图所示的 <code>Check</code> 按钮，查看当前区块链上的信息，见下图。之后查询链上信息的操作都是如此，在开发者控制台中进行查看。（现在终于体会到这真的只是个 Demo 了吧）</p><p><img src="https://i.loli.net/2020/06/07/JSBoHpGaeM94clv.png" alt="Check 区块链信息"><br><br></p><p>下面开始使用系统的几个功能。</p><ol><li>点击 <code>Register</code> 进行注册：用户名 AA，密码 11。<br> <img src="https://i.loli.net/2020/06/07/AFwUhBqi8O96kWb.png" alt="注册"> <br></li><li>由于注册操作，我们需要向区块中写入信息，这一步是需要花费 gas 的，支付一定的费用。可以从下面三张截图中看到详细情况。<br> <img src="https://i.loli.net/2020/06/07/zJ5apYuHgBZiTFn.png" alt="合约支付.png"> <br></li><li>在上图中点击确认后，右下角就会出现 <strong>Confirmed Transaction</strong>  的弹窗，告诉我们交易已经完成，信息已写入区块。<br> <img src="https://i.loli.net/2020/06/07/TNrAxeJOvgRmU9C.png" alt="右下角"> <br></li><li>最后，我们还可以点击已经确认的交易，看看交易的具体信息等。<br> <img src="https://i.loli.net/2020/06/07/IY4FHiwpfW1Qg9O.png" alt="合约交互细节.png"> <br></li><li>注册后点击 <code>Check</code> 按钮查询已注册和已登录用户信息。<br>  <img src="https://i.loli.net/2020/06/07/Uo7BusXlLKhMf9x.png" alt="注销后查询">  <br></li><li>点击 <code>Login</code> 按钮进行登录操作，再点击 <code>Check</code> 按钮查询已登录用户数。<br>  <img src="https://i.loli.net/2020/06/07/JBGbxLVTsfncihy.png" alt="登陆后查询">  <br></li><li>登录后点击 <code>Modify</code> 修改用户名为：AA_Modify；再点击 <code>Check</code> 按钮进行查询<br>  <img src="https://i.loli.net/2020/06/07/opXhRmUzEy9itKM.png" alt="修改">  <br>  ![修改后查询](https://i.loli.net/2020/06/07/BIRO7zSNWfH5JTg.png)  <br></li><li>最后点击 <code>Logout</code> 按钮进行注销操作，再点击 <code>Check</code> 按钮查询当前链上数据。<br>  <img src="https://i.loli.net/2020/06/07/Uo7BusXlLKhMf9x.png" alt="注销后查询">  <br></li></ol><hr><p>写到这里，这个小 Demo 的使用流程就结束了。可以看到， 我用了大量的图片和文字来描述每个步骤，事实上，只要记住那三个命令，就可以让它跑起来了，很简单吧！</p><hr><h2 id="踩坑环节"><a href="#踩坑环节" class="headerlink" title="踩坑环节"></a>踩坑环节</h2><p>这一部分主要记录了整个 Demo 的开发过程中，我所遇到的那些 <strong>“坑”</strong>。有些 <strong>非代码方面</strong> 的坑，真的是让我挣扎了好几天。坑比较多，想到什么就写什么吧，再简单的都写，尽量多写。</p><h3 id="坑一：truffle-unbox-react"><a href="#坑一：truffle-unbox-react" class="headerlink" title="坑一：truffle unbox react"></a>坑一：truffle unbox react</h3><p>前端页面我偷懒了，直接从 truffle suite 的 boxes 里把一个现成的 react demo 给搬来了，然后在这个 demo 上再改一改，就成了我的用户页面。<br>于是乎，我在 cmd  中执行 <code>truffle unbox react</code> 。这时候，坑就来了。命令行中的信息一直提示 <strong>网络连接错误</strong>。即使你是 <strong>挂代理</strong>、<strong>开 VPN ** 、</strong>连路由器 WiFi** 都不行，此时，我在 github issues 上找到了一种诡异的解决办法——开手机热点，让你的电脑连上自己的手机热点，重新执行命令即可。</p><h3 id="坑二：网络教程的坑（最重要）"><a href="#坑二：网络教程的坑（最重要）" class="headerlink" title="坑二：网络教程的坑（最重要）"></a>坑二：网络教程的坑（最重要）</h3><p>关于 <strong>Solidity</strong> 和 <strong>Web3.js</strong> 的教程，网络上的中文资源看似不少，实则较为陈旧。当你学完一些中文教程，然后信心满满地去写程序时，会发现到处都是报错，这大多是因为 Solidity 和 Web3.js 的版本更新迭代较快，而网上中文资源里的代码多为版本不一的旧式写法。<br>所以，最好的办法还是去啃 Solodity 和 Web3.js 的 <strong>英文技术文档</strong>。</p><h3 id="坑三：MetaMask-连接本地客户端"><a href="#坑三：MetaMask-连接本地客户端" class="headerlink" title="坑三：MetaMask 连接本地客户端"></a>坑三：MetaMask 连接本地客户端</h3><p>这个其实不算坑，只是我前面没有说明如何让 Meta Mask 与 Ganache 连接起来，所以这里需要补充一下。<br>这里，我们点击 <strong>自定义RPC</strong>，然后会弹出一个窗口，要求我们填一些具体的参数。<br><img src="https://i.loli.net/2020/06/07/LFwCaNP9XRgcDKs.png" alt="自定义RPC"><br><br></p><p>具体参数从哪来的呢？从 Ganache 客户端上得来的。请看下面两幅图片。（因为我已经定义过一个相同的 RPC 了，所以第二张图中信息提示我这个 URL 早就存在了）</p><p><img src="https://i.loli.net/2020/06/07/GUtwVkQZxmdF1Es.png" alt="Ganache参数"><br><br><br><img src="https://i.loli.net/2020/06/07/NzXtweSJq7mbcE4.png" alt="填参数"><br><br></p><h3 id="坑四：Meta-Mask-连接账户问题"><a href="#坑四：Meta-Mask-连接账户问题" class="headerlink" title="坑四：Meta Mask 连接账户问题"></a>坑四：Meta Mask 连接账户问题</h3><p>之前我们说，系统一启动，Meta Mask 就默认和我们的 Account 1 连接起来了，合约部署的时候花费的 gas，也都是由 Account 1 提供的。那如果我现在想切换到 Account 2 呢？直接点击账户头像图标，再选择 Account 2，这时，请刷新一下页面，让 Web3 重新获取到当前账户。（否则 Account 2 并不会被成功地连接）</p><h3 id="坑五：重新部署问题"><a href="#坑五：重新部署问题" class="headerlink" title="坑五：重新部署问题"></a>坑五：重新部署问题</h3><p>要知道，智能合约一旦部署完毕后，就不允许再修改了。记得我们之前说过，执行 <code>truffle compile</code> 对智能合约进行编译后，会多出来一个 <strong>build</strong> 文件夹嘛。如果我们现在想要修改智能合约，那就必须得重新 <strong>编译</strong>、<strong>部署</strong>。重新部署的话，要记住先把原来那个 <strong>build</strong> 文件夹给删除哦！然后再执行 <code>truffle compile</code> 和 <code>truffle migrate</code> 命令。<br><br><br>还有个和 <strong>重新部署</strong> 有点关系的问题：我们第一次使用 Ganache 客户端时，点击 <strong>QUICKSTART</strong> 后，可以把这个 WorkSpace 保存一下（点客户端右上角的 SAVE 即可），这样我们之后不管部署多少个合约，都会在这个链上操作，很方便。</p><h3 id="坑六：删除原区块链问题"><a href="#坑六：删除原区块链问题" class="headerlink" title="坑六：删除原区块链问题"></a>坑六：删除原区块链问题</h3><p>上一节我们说到，点击保存按钮后，以后所有的操作都会在这个被保存的链上进行操作；如果不点保存按钮的话，下一次启动 Ganache 客户端时，它又会给你新造一个链。那假如说：我想每次部署新合约时，都在一个新链上部署，是不是只要不点保存，然后每次 QUICKSTART 就行了呢？当然不行！如果你是那么操作的，可能系统仍然正常运行，但其中一定会有 Bug 的（我当前的开发环境的确是这样的），这个需要你自己多次尝试才能发现。<br>正确的操作应该是 <strong>清除之前的所有数据</strong>，具体请看下面两张图。</p><p>首先，右键点击 <strong>更多</strong>，然后是 <strong>应用设置</strong>。<br><img src="https://i.loli.net/2020/06/08/3Ayc16HVvMsNUEr.png" alt="应用设置"><br><br><br>点击应用设置之后，会弹出这个界面，我们点击 <strong>重置</strong> 就好，把之前的数据都清除掉。在这之后，等一会儿，再重新启动 Ganache 客户端，进行之前的 QUICKSTART 操作就好啦！<br><img src="https://i.loli.net/2020/06/08/w7NOjCod4YeFklJ.png" alt="重置"></p><h3 id="坑七：代码问题"><a href="#坑七：代码问题" class="headerlink" title="坑七：代码问题"></a>坑七：代码问题</h3><p>此 Demo 中的智能合约代码是存在 Bug 的，如果按照我上面写的流程进行操作，你是发现不了 Bug 的。所以，<strong>代码仅供参考</strong> 。此外，请大家一定把 <strong>JavaScript</strong> 学好，不然就会像我一样：能够从区块链上读取所有需要展示的数据，但就是没法全部展现到前端页面上来。（如果你看了我的代码，就会理解我为什么这样说了）<br><br><br><br><br><em>暂时就想到这么些坑，后面如果还能想到，我也会继续在博客更新的</em>······</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我本想再写一节 <strong>学习资料推荐</strong> 的，可是转念一想，大家都会使用搜索引擎的，我就不再多此一举了。其实整个 Demo 还是可以完善成系统的，可惜后期因自己在准备研究生复试，也就没再管它了，导致做出了这么一个 <strong>残次品</strong> ，希望大家能够引以为戒，要踏踏实实地做好每一件事。<br>这篇文章的前半部分是在说明如何使用此 Demo，后半部分则是一些和工具使用相关的问题。整篇文章只能算是我自己写 Demo 时的一些记录，水平实在有限，还望各位海涵。<br>（如果有同学需要询问更多细节的话，也可以来我的博客下留言，我也会及时回复的）<br><a href="https://jiaqiangwu.top/2020/06/06/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%B3%BB%E7%BB%9FDemo/">本文地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>细说堆与栈</title>
      <link href="/2020/05/31/%E7%BB%86%E8%AF%B4%E5%A0%86%E4%B8%8E%E6%A0%88/"/>
      <url>/2020/05/31/%E7%BB%86%E8%AF%B4%E5%A0%86%E4%B8%8E%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p>数据结构中的堆栈我们已经比较熟悉了，这里说的主要是操作系统中的堆栈。</p><span id="more"></span><ol><li>堆和栈都存储在计算机的 RAM 中。</li><li>在一个多线程的应用中，每个线程都有它自己的 <strong>栈空间</strong>，但是同属一个进程的所以线程共享一块 <strong>堆空间</strong>，这也就意味着必须有某种协同方式，使得这些线程不会在同一时刻访问和操作同一块堆空间。</li><li><strong>栈</strong> 由操作系统自动分配和释放，存访函数的参数值，局部变量的值等；栈使用的是一级缓存，它们被调用时储于存储空间中，一旦函数调用完毕，栈空间即释放；栈的操作方式类似于数据结构中的栈。</li><li><strong>堆</strong> 一般由程序员分配和释放，若程序员不释放，程序结束时可能由操作系统回收，其操作方式类似于链表。</li><li>如果我们在创建一个对象时，并没有使用 <strong>new</strong> 操作符，那么这个对象就会被分配一块 <strong>栈空间</strong>；反之，如果使用了 <strong>new</strong> 操作符，那么这个对象就会被创建在 <strong>堆</strong> 上，我们看一个简单的例子。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">function</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 在栈上创建对象 */</span></span><br><span class="line">    Object obj_stack;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 在堆上创建对象 */</span></span><br><span class="line">    Object obj_heap = new Object();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 释放堆空间 */</span></span><br><span class="line">    delete obj_heap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>栈的空间大小是固定的，内存中的栈区地址从 <strong>高地址</strong> 向 <strong>低地址</strong> 增长。如果栈空间不足以继续分配，那么就会发生 <strong>栈溢出</strong> 错误，这种错误的发生一般有两个原因：一是大量的内嵌函数被调用；二是函数中存在无限递归的情况。</li><li>堆的空间大小不是固定的，内存中的堆区地址从 <strong>低地址</strong> 向 <strong>高地址</strong> 增长。如果当前堆空间不足的话，操作系统可以适当地对堆空间进行扩充。</li><li>栈比堆要快很多。这是因为二者的内存分配方式的不同：分配栈空间时，只需简单地移动栈顶指针。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简析Cache与TLB</title>
      <link href="/2020/05/31/%E7%AE%80%E6%9E%90Cache%E4%B8%8ETLB/"/>
      <url>/2020/05/31/%E7%AE%80%E6%9E%90Cache%E4%B8%8ETLB/</url>
      
        <content type="html"><![CDATA[<h1 id="简述Cache与TLB"><a href="#简述Cache与TLB" class="headerlink" title="简述Cache与TLB"></a>简述Cache与TLB</h1><p>CPU Cache 与 TLB 都是存在于微处理器中的硬件设备，但它们二者有什么不同呢？难道说 TLB 也是 Cache 的一种？</p><span id="more"></span><p>首先，Cache是一种更加快速的内存，它存在的目的就是减少从主存(RAM)取数据到 CPU 寄存器的这部分延迟。所以，Cache 被放置在主存和 CPU 之间， 其中存放着一些临时数据，使得对相同信息的再次访问变得更加快速。</p><p>Cache 又分为指令 Cache 和数据 Cache，二者分别用于存放 <strong>可执行指令</strong> 和 <strong>数据</strong>，它们分别加快了操作系统取指令和取数据的速度。现在的处理器都包含这两种 Cache。为了完整起见，我们来讨论一下数据 Cache 的等级：Level 1 Cache、Level 2 Cache 等等 ······ 需要注意的是，与 L2 Cache 相比，L1 Cache 总是更快更小，但也更昂贵。</p><p>只有当处理器用到虚拟内存时，TLB 才有它的用武之地。简而言之，TLB 通过将 <strong>页表</strong> 存储起来，来加快 <strong>虚拟地址</strong> 向 <strong>物理地址</strong> 的转换。准确地说，是内存管理单元(MMU)使用 TLB 来完成将虚拟地址转换成物理地址的任务。将虚拟地址和物理地址的映射关系保存在 TLB 中，提高了访问页表的效率。</p><p>需要注意的是，页表（其本身存储在主存中）记录了虚拟页在物理内存中的位置，从这个角度来说，TLB 也可以视为页表的 Cache 缓存。</p><p>但是 TLB 和 Cache 的所应用的场景是不同的。TLB 是为了加快虚拟地址的转换速率，从而使得每次的地址转换都不再必须访问页表；Cache 是为了加快访问主存中数据的速率，从而使得 CPU 每次取数据时都不再必须访问主存。对 TLB 的操作在 MMU 进行地址转换时发生，而对 Cache 的操作在 CPU 访问主存时发生。</p><p><img src="https://i.loli.net/2020/05/31/IEiOyzVSgkeRrU2.png" alt="image"></p><p>事实上，任何现代的处理器都有指令 Cache、L1 和 L2 数据 Cache 以及 TLB。</p><h2 id="二者关联"><a href="#二者关联" class="headerlink" title="二者关联"></a>二者关联</h2><p>TLB 缓存了常用的页表项，减少了虚拟地址到物理地址转换的耗时；CPU cache 缓存了常用的内存数据，减少了访问内存的耗时。<br>当 CPU 要访问内存时，使用的是虚拟地址。具体过程是，先查找页表找到虚拟地址对应的物理地址，然后通过物理地址从主存中取出数据，如果 MMU 在 TLB 中找到了虚拟地址所对应的物理地址，就可以直接从物理地址所对应的主存中取出数据，而不需要再访问页表（页表在主存中，访问页表很费时）。在取出主存中的数据时，可能会用到 CPU Cache，如果 Cache 中缓存了对应地址中的数据，那就不用再访问主存了，直接从 Cache 中取出数据即可。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言随机数生成</title>
      <link href="/2020/04/20/C%E8%AF%AD%E8%A8%80%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90/"/>
      <url>/2020/04/20/C%E8%AF%AD%E8%A8%80%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言中-srand-、rand-的使用。"><a href="#C语言中-srand-、rand-的使用。" class="headerlink" title="C语言中 srand()、rand() 的使用。"></a>C语言中 <strong>srand()<strong>、</strong>rand()</strong> 的使用。</h2><span id="more"></span><p>C语言中有可以产生随机数据的函数 ，需要添加 <code>stdlib.h</code>和<code>time.h</code>头文件。来看一下具体的使用方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));<span class="comment">// 生成随机数的种子</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">rand</span>());<span class="comment">// 生成随机数</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>输出结果：7142 18434 29304 5796 28581 17283 23800 31838 6665 20447</code></p><p>如果想要输出给定范围 <strong>[a, b]</strong> 内的随机数，需要使用 <code>rand() % (b-a+1) + a</code>。显然，<code>rand() % (b-a+1)</code>的范围是**[0, b-a]** ，再加上 a 之后就是 **[a, b]**。<br/></p><p>简单举个例子：</p><p>生成 <strong>[2, 6]</strong> 范围内的随机数：<code>rand() % (6-2+1)+2</code> &#x3D;&gt; <code>rand() % 5 + 2</code></p><p>补充：<strong>rand()</strong> 只能生成 <strong>[0, RAND_MAX]</strong> 范围内的随机数(<strong>RAND_MAX</strong> 是 <strong>stdlib.h</strong> 中的一个常数，在不同的系统环境中，该常数的值不同，比如我的机子上就是 32767)</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> srand </tag>
            
            <tag> rand </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言中的Side Effect与Sequence Point</title>
      <link href="/2020/04/02/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84Side-Effect%E4%B8%8ESequence-Point/"/>
      <url>/2020/04/02/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84Side-Effect%E4%B8%8ESequence-Point/</url>
      
        <content type="html"><![CDATA[<p>如果你只想规规矩矩地写代码，那么基本用不着看这个。此文章中的写法都应该避免使用。</p><span id="more"></span><p>我们来看下面这段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">a = (++a) + (++a) + (++a) + (++a);</span><br></pre></td></tr></table></figure><p>据我了解，似乎很多公司都有出这种笔试题的恶趣味。答案应该是 <strong>Undefined</strong>，我甚至有些怀疑出题的人是否真的知道答案。下面我来解释为什么是 Undefined。</p><p>我们知道，调用一个函数可能产生 <strong>Side Effect</strong>，使用某些运算符（++、–、&#x3D;、复合赋值）也会产生 Side Effect，如果一个表达式中隐含着多个 Side Effect，究竟哪个先发生哪个后发生呢？C 标准规定代码执行过程中的某些时刻是 <strong>Sequence Point</strong>，当到达一个 Sequence Point 时，在此之前的 Side Effect  必须全部作用完毕，在此之后的 Side Effec t必须一个都没发生。至于两个 Sequence Point 之间的多个 Side Effect 哪个先发生哪个后发生则没有规定，编译器可以任意选择各 Side Effect 的作用顺序。下面详细解释各种 Sequence Point。</p><ol><li><p>调用一个函数时，在所有准备工作做完之后、函数调用开始之前是 Sequence Point。比如调用 foo(f(), g()) 时，foo、f()、g() 这三个表达式哪个先求值哪个后求值是 <strong>Unspecified</strong>，但是必须都求值完了才能做最后的函数调用，所以 f() 和 g() 的 Side Effect 按什么顺序发生不一定，但必定在这些 Side Effect 全部作用完之后才开始调用 foo 函数。</p></li><li><p>条件表达式 **?:**、逗号运算符 <strong>,</strong> 、逻辑与 <strong>&amp;&amp;</strong> 、逻辑或 <strong>||</strong> 的第一个操作数求值之后是 Sequence Point。我们刚讲过条件表达式和逗号运算符，条件表达式要根据表达式 1 的值是否为真决定下一步求表达式 2 还是表达式 3 的值，如果决定求表达式 2 的值，表达式 3 就不会被求值了，反之也一样，逗号运算符也是这样，表达式 1 求值结束才继续求表达式 2 的值。</p></li></ol><p>逻辑与和逻辑或这两个运算符和条件表达式类似，先求左操作数的值，然后根据这个值是否为真，右操作数可能被求值，也可能不被求值。比如下面这个程序中的这几句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   ret = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;man);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">1</span> || man &lt; <span class="number">0</span> || man &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Invalid input! Please input 0, 1 or 2.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实可以写得更简单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;man) != <span class="number">1</span> || man &lt; <span class="number">0</span> || man &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Invalid input! Please input 0, 1 or 2.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个控制表达式的求值顺序是：先求 <code>scanf(&quot;%d&quot;, &amp;man) = 1</code> 的值，如果 scanf 调用失败，则返回值不等于1 成立，|| 运算有一个操作数为真则整个表达式为真，这时直接执行下一句 printf，根本不会再去求 man &lt; 0 或 man &gt; 2 的值；如果 scanf 调用成功，则读入的数保存在变量 man 中，并且返回值等于 1，那么说它不等于 1 就不成立了，第一个 || 运算的左操作数为假，就会去求右操作数 man &lt; 0 的值作为整个表达式的值，这时变量 man 的值正是scanf 读上来的值，我们判断它是否在 [0, 2] 之间，如果 man &lt; 0 不成立，则整个表达式 scanf(“%d”, &amp;man) !&#x3D; 1 || man &lt; 0 的值为假，也就是第二个 || 运算的左操作数为假，所以最后求右操作数 man &gt; 2 的值作为整个表达式的值。</p><p>&amp;&amp; 运算与此类似，a &amp;&amp; b 的计算过程是：首先求 a，如果 a 的值是假则整个表达式的值是假，不会再去求 b；如果a 的值是真，则下一步求 b 的值作为整个表达式的值。所以，a &amp;&amp; b 相当于 if (a) b;，而 a || b 相当于 if (!a) b; 。这种特性称为 Short-circuit，很多人喜欢利用 Short-circuit 特性使代码更加简洁。</p><ol start="3"><li><p>在一个完整的声明末尾是 Sequence Point，所谓完整的声明是指这个声明不是另外一个声明的一部分。比如声明 int a[10], b[20];，在 a[10] 末尾是 Sequence Point，在 b[20] 末尾也是。</p></li><li><p>在一个完整的表达式末尾是 Sequence Point，所谓完整的表达式是指这个表达式不是另外一个表达式的一部分。所以如果有 f(); g(); 这样两条语句，f() 和 g() 是两个完整的表达式，f() 的 Side Effect 必定在 g() 之前发生。</p></li><li><p>在库函数返回时是 Sequence Point。这似乎可以包含在上一条规则里面，因为函数返回必然会结束掉一个表达式，开始一个新的表达式。事实上以后我们会讲到，很多库函数是以宏定义的形式实现的，并不是真的函数，所以才需要有这条规则。</p></li><li><p>像 printf、scanf 这种带转换说明的输入&#x2F;输出库函数，在处理完每一个转换说明相关的输入&#x2F;输出操作时是一个Sequence Point。</p></li><li><p>库函数 bsearch 和 qsort 在查找和排序过程中的每一步比较或移动操作之间是一个 Sequence Point。</p></li></ol><p>现在可以分析一下本节开头的例子了。<code>a = (++a) + (++a) + (++a) + (++a);</code>  的结果之所 Undefined, 是因为在这个表达式中对变量 a 的 Side Effect 有五次，这些 Side Effect 何时发生、按什么顺序发生是不一定的，只知道在整个表达式结束时一定都发生了，但在计算过程中要用到a的值时，能取出什么值就不确定了。这行代码用不同平台的不同编译器来编译，结果是不同的，甚至在同一平台上用同一编译器的不同版本来编译也可能不同。</p><p>写表达式应遵循的原则一：在两个 Sequence Point 之间，同一个变量的值只允许被改变一次。仅有这一条原则还不够，例如 a[i++] &#x3D; i; 的变量 i 只改变了一次，但结果仍是 Undefined，因为等号左边改i的值，等号右边读 i 的值，到底是先改还是先读？这个读写顺序是不确定的。但为什么 i &#x3D; i + 1; 就没有歧义呢？虽然也是等号左边改 i 的值，等号右边读i的值，但你不读出i的值就没法计算 i + 1，那拿什么去改i的值呢？所以这个读写顺序是确定的。所以，写表达式应遵循的原则二：如果在两个 Sequence Point 之间既要读一个变量的值又要改它的值，只有在读写顺序确定的情况下才可以这么写。</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Euclid算法证明</title>
      <link href="/2020/04/01/Euclid%E7%AE%97%E6%B3%95%E8%AF%81%E6%98%8E/"/>
      <url>/2020/04/01/Euclid%E7%AE%97%E6%B3%95%E8%AF%81%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" async  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"></script><p>也叫：辗转相除法 or 欧几里得算法。</p><span id="more"></span><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><p>**注意: ** 0 和任意整数的最大公约数都是这个整数（而不是0）。</p><blockquote><p>编写递归函数求两个正整数a和b的最大公约数（GCD，Greatest Common Divisor），使用Euclid算法：</p><ol><li>如果 a 除以 b 能整除，则最大公约数是 b；</li><li>否则，最大公约数等于 b 和 a%b 的最大公约数；</li><li>证明该算法。</li></ol></blockquote><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> gcd(b, a%b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法证明"><a href="#算法证明" class="headerlink" title="算法证明"></a>算法证明</h2><p>$$<br>设;a &#x3D; kb + r, ; 其中; a, b, k, r ;皆为正整数，且 ;r &lt; b, ; 则;r &#x3D; a ;mod;b.\<br>假设; d; 是; a; 和; b; 的一个公约数, 记作; a&#x2F;d,; b&#x2F;d,; 即; a ;和; b; 都可以整除 ;d. \<br>\because ; r &#x3D; a - kb,; 等式两边同时除以; d,; 得 ; r&#x2F;d &#x3D; a&#x2F;d - kb&#x2F;d &#x3D; m,; 由等式右边可知, \ m; 为整数, \therefore ; r; 可以整除; d,; \therefore ; d; 也是; b; 和; (a; mod; b); 的约数.\ \therefore ; gcd,(a,,b) &#x3D; gcd,(b,, a; mod\ b)<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 辗转相除法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>显卡工作流程</title>
      <link href="/2020/03/14/%E6%98%BE%E5%8D%A1%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
      <url>/2020/03/14/%E6%98%BE%E5%8D%A1%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="显卡工作流程"><a href="#显卡工作流程" class="headerlink" title="显卡工作流程"></a>显卡工作流程</h1><p>显卡是负责计算机图形最终输出的重要部件。它从CPU接受显示数据和控制命令，然后将处理过的图像信号发送给显示器。</p><span id="more"></span><p>显卡本身是一个智能的嵌入式系统，其核心是图形处理芯片（GPU），负责完成大量的图像运算和内部控制工作。显示所需的相关数据存放在显存中。</p><p>显卡处理图像数据的过程</p><ol><li><p>CPU → 显卡</p><p>CPU 将有关作图的指令和数据通过总线传送给显卡。对于现代显卡，由于需要传送大量的图像数据，因而显卡接口在不断改进，从最早的 ISA 接口到 PCI、流行的 AGP 接口，以及正在普及的 PCI-E 接口，其数据吞吐能力不断增强。</p></li><li><p>显卡内部图像处理</p><p>GPU 根据 CPU 的要求，完成图像处理过程，并将最终图像数据保存在显存中。</p></li><li><p>最终图像输出</p><p>对于普通显卡 ，RAMDAC 从显存中读取图像数据，转换成模拟信号传送给显示器。对于具有数字输出接口的显卡，则直接将数据传递给数字显示器。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CPU的实模式与保护模式</title>
      <link href="/2020/03/14/CPU%E7%9A%84%E5%AE%9E%E6%A8%A1%E5%BC%8F%E4%B8%8E%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/03/14/CPU%E7%9A%84%E5%AE%9E%E6%A8%A1%E5%BC%8F%E4%B8%8E%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>首先我们要知道这两种模式都是 CPU 的工作模式，实模式是早期 CPU 运行的工作模式，而保护模式则是现代 CPU 运行的工作模式。</p><span id="more"></span><h2 id="实模式（Real-Mode）"><a href="#实模式（Real-Mode）" class="headerlink" title="实模式（Real Mode）"></a>实模式（Real Mode）</h2><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>&amp;emsp;&amp;emsp;实模式出现于早期 8086 CPU 时期，8086 也是第一款支持内存分段模型的处理器。当时，8086 只有一种工作模式，即实模式，但当时还没有这个说法。由于 CPU 的性能有限，一共只有 20 位地址线（地址空间只有 1M）， 8 个 16 位的通用寄存器，以及 4 个 16 位的段寄存器。由于 16 位的物理地址只能访问 64KB 的内存。所以，为了能够用这些 16 位的寄存器去构成  20 位的主存地址，访问 1 MB 的内存，必须采取一种特殊的方式。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>&amp;emsp;&amp;emsp;实模式下的主存地址由两部分组成：第一个字段是段基址，由一个16位的段寄存器提供；第二个字段是段内偏移量，它的值由通用寄存器来提供，所以也是 16 位。那么问题来了，两个 16 位的值如何组合成一个 20 位的地址呢？这里采用的方式是：把段寄存器所提供的段基址先向左移 4 位（或乘以 16），这样就变成了一个 20 位的值，然后再与 16 位的段偏移量相加。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>&amp;emsp;&amp;emsp;<strong>在现代计算机上，实模式运行的时间非常短</strong>，一般我们感觉不到它的存在。CPU 复位（reset）或加电（power on）的时候就是以实模式启动，这时处理器以实模式工作，不能实现权限分级，也不能访问 20 位以上的地址线，也就只能访问 1M 内存。之后，加载操作系统模块，进入保护模式。</p><p>&amp;emsp;&amp;emsp;此外，在这种模式下，系统在计算实际地址的时候是按照对 1M 求模的方式进行的，这种技术被称为 wrap-around。也就是说，当程序员给出超过 1M（100000H ~ 10FFEFH）的地址时，为了保持逻辑上正常，系统并不认为其访问越界而产生异常，而是自动从 0 开始计算。</p><p>&amp;emsp;&amp;emsp;然而，在实模式中整个物理内存被看成分段的区域，程序代码和数据位于不同区域，<strong>系统程序和用户程序没有区别对待</strong>，而且每一个指针都是指向「实在」的物理地址。这样一来，用户程序的一个指针如果指向了系统程序区域或其他用户程序区域，并改变了值，容易造成软件甚至系统崩溃。</p><h2 id="保护模式（Protected-Mode）"><a href="#保护模式（Protected-Mode）" class="headerlink" title="保护模式（Protected Mode）"></a>保护模式（Protected Mode）</h2><h3 id="起源-1"><a href="#起源-1" class="headerlink" title="起源"></a>起源</h3><p>&amp;emsp;&amp;emsp;最开始的程序寻址是直接的 <code>段基址:段内偏移</code> 模式，这样的好处是所见即所得，程序员指定的地址就是物理地址，物理地址对程序员是可见的。但这就带来一些问题：</p><ol><li>无法支持多任务</li><li>程序的安全性无法得到保证</li></ol><p>&amp;emsp;&amp;emsp;随着 CPU 的发展，CPU 的地址线的个数也从原来的 20 根变为现在的 32 根，所以可以访问的内存空间也从 1 MB 变为现在 4 GB，寄存器的位数也变为 32 位。因此，实模式下的内存地址计算方式就已经不再适用了，需要引入新的模式，即保护模式，实现更大空间的、更灵活的内存访问。</p><p>&amp;emsp;&amp;emsp;在保护模式下，全部 32 条地址线有效，可寻址高达 4 GB 的物理地址空间。扩充的存储器 <code>段式管理机制</code> 和可选的<code>页式管理机制</code>，不仅为存储器共享和保护提供了硬件支持，而且为实现<code>虚拟存储器</code>提供了硬件支持，支持多任务，能够快速地进行任务切换和保护任务环境，既能实现资源共享又能保证代码和数据的安全及任务的隔离。</p><p>&amp;emsp;&amp;emsp;总的来说，保护模式出现的原因名副其实：<strong>保护进程地址空间</strong>。</p><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>&amp;emsp;&amp;emsp;在保护模式下，地址的表示方式与实模式是一样的，都是 <code>段基址:段内偏移</code>。不过，保护模式下 <code>段</code> 的概念发生了根本性的改变。实模式下的段值可以看作是地址的一部分，可直接参与转换计算。而保护模式下的段值（尽管仍然由原来的段寄存器表示）变成了一个索引，指向了一个数据结构的一个表项（段表项），表项中详细定义了<code>段基址</code>、<code>界限</code>、<code>属性（权限）</code>等内容。这个数据结构是<code>全局描述符</code>（GDT，Global Descriptor Table），也有可能是<code>本地描述符</code>（LDT，Local Descriptor Table）。它们存放关于某个运行在内存中的程序的分段信息的，比如某个程序的代码段是从哪里开始，有多大；数据段又是从哪里开始，有多大。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简述微内核与宏内核</title>
      <link href="/2020/03/09/%E7%AE%80%E8%BF%B0%E5%BE%AE%E5%86%85%E6%A0%B8%E4%B8%8E%E5%AE%8F%E5%86%85%E6%A0%B8/"/>
      <url>/2020/03/09/%E7%AE%80%E8%BF%B0%E5%BE%AE%E5%86%85%E6%A0%B8%E4%B8%8E%E5%AE%8F%E5%86%85%E6%A0%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="简述微内核与宏内核"><a href="#简述微内核与宏内核" class="headerlink" title="简述微内核与宏内核"></a>简述微内核与宏内核</h1><p>内核按照体系结构分为两类 : <strong>微内核</strong> 与 <strong>宏内核</strong> 。</p><span id="more"></span><h3 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h3><p>微内核是将各种服务功能放到内核之外，自身仅仅是一个消息中转站，用于各种功能间的通讯。内核管理着所有的系统资源，在微内核中用户服务和内核服务在不同的地址空间中实现。在应用程序和硬件的通信中，内核进程管理着极小的服务，而运行在用户空间的服务通过消息的传递来建立通信，它们之间不会有直接的交互，这样一来，其执行速度就相对比较慢了，这是微内核架构的一个缺点。</p><p>在内核架构中，用户服务是独立于内核服务的，因此任何用户服务崩溃都不会影响到内核服务，这就增强了操作系统的健壮性，这是微内核的优势所在。此外，微内核的扩展性强，添加一个功能，只需要建立一个新的服务到用户空间当中，而内核空间不需要任何的修改。因此，微内核可移植性强、安全且易于扩展。</p><hr><h3 id="宏内核"><a href="#宏内核" class="headerlink" title="宏内核"></a>宏内核</h3><p>宏内核是将所有服务功能集成于一身，使用时直接调用。宏内核同样管理着用户程序和硬件之间的系统资源，但是和微内核不一样的是，在宏内核架构中，用户服务和内核服务在同一空间中实现。具体一点，就是内核可以代表内核进程运行代码，也就是通常的内核进程；当用户进程经过系统调用或者中断进入到内核态时，内核也可以代表它运行代码。这样一来，宏内核需要管理的资源多于微内核，其大小就相对大一些了。</p><p>在宏内核架构当中，内核管理着CPU调度、内存管理、文件管理和系统调用等各模块的工作，由于用户服务和内核服务被实现在同一空间中，这样在执行速度上就比微内核快。然而，宏内核的劣势也是显而易见的，那就是当内核中的某个服务崩溃了，整个内核也会崩溃。此外，想要在内核中添加新的功能就意味着内核中的各个模块需要做相应的修改，因此其扩展性很弱。</p><hr><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>微内核是一个信息中转站，自身完成很少功能，主要是传递一个模块对另一个模块的功能请求，而宏内核则是一个大主管，把内存管理、文件管理等等一股脑全部接管。<br>从理论上来看，微内核的思想更好些，微内核把系统分为各个小的功能块，降低了设计难度，系统的维护与修改也容易，但通信带来的效率损失是个问题。而宏内核的功能块之间的耦合度太高造成修改与维护的代价太高。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宏定义小知识</title>
      <link href="/2020/03/05/%E5%AE%8F%E5%AE%9A%E4%B9%89%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/03/05/%E5%AE%8F%E5%AE%9A%E4%B9%89%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="宏定义小知识"><a href="#宏定义小知识" class="headerlink" title="宏定义小知识"></a>宏定义小知识</h1><p>今天看到一段关于 <strong>宏定义</strong> or <strong>宏替换</strong> 的代码，感觉挺有意思的，遂记之。</p><span id="more"></span><p><strong>define</strong> 除了可以定义常量外，还可以定义任何语句或片段，其格式如下：<br><code>#define 标识符 任何语句或片段</code> </p><p>例如，我们可以写一个这样的宏定义：<code>#define ADD(a,b) ((a) + (b))</code> 这样就可以使用 ADD(a,b) 来代替 a+b 了。这里有个问题，<strong>为什么要在上面加那么多括号呢？</strong><br>难道下面这两种写法就不可以吗？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ADD(a,b) a+b</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD(a,b) (a+b)</span></span><br></pre></td></tr></table></figure><p><strong>Negative!</strong> 实际上必须加那么多括号，这是因为宏定义是将对应的部分 <strong>原封不动地替换</strong> 进去,然后才进行编译和运行。下面让我们来看一个实际的例子！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CAL(x) (x*2 + 1)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, CAL(a+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出结果：4 */</span></span><br></pre></td></tr></table></figure><p>我一开始觉得结果应该是 5 才对！实际上，这就是宏定义的陷阱，它把替换的部分<font color=red> 原封不动 </font>地替换进去！这就导致 CAL(a+1) 实际上是 <strong>(a + 1*2 + 1)</strong>, 也就是 1+1x2+1&#x3D;4，这就得到了我们的结果，而不是 **((a+1)x2 + 1)**。</p><p>总之，尽量不要使用宏定义来做除了定义常量以外的事情，除非你保险起见，把能给的地方都加上括号。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文算法</title>
      <link href="/2020/03/04/%E5%9B%9E%E6%96%87%E7%AE%97%E6%B3%95/"/>
      <url>/2020/03/04/%E5%9B%9E%E6%96%87%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="验证回文字符串"><a href="#验证回文字符串" class="headerlink" title="验证回文字符串"></a>验证回文字符串</h2><p>比较常用的方法就是用 2 个指针，从字符串的前后两个方向，向内夹。</p><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isParlindrome</span><span class="params">(<span class="type">char</span> s[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">char</span> *p = &amp;s[<span class="number">0</span>], *q = &amp;s[length<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p &lt; q)&#123;</span><br><span class="line">        <span class="keyword">if</span>(*p != *q)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">/* 不是回文串 */</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            p++;</span><br><span class="line">            q--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑很简单，一个循环两个指针，就搞定了。有的题目忽略字母的大小写，这时只需再加一些判断即可，也很简单。</p><hr><h2 id="验证回文数"><a href="#验证回文数" class="headerlink" title="验证回文数"></a>验证回文数</h2><p>如果回文字符串中只包含数字，那么它也可以是一个回文数，例如 20200202。<br>想要验证回文数，比较简单的方法就是将其转换字符串，然后用验证字符回文串的算法模式去套用。但是这并没有用到数字的特性。<br>既然是数字，我们可以通过 <strong>除法</strong> 和 <strong>取余</strong> 的方式，将这个数字进行翻转，然后比对翻转后的数字与原数字是否相等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> revertedNumber = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> tmp = num;</span><br><span class="line">    <span class="keyword">while</span>(tmp != <span class="number">0</span>)&#123;</span><br><span class="line">        revertedNumber = (revertedNumber * <span class="number">10</span>) + (tmp % <span class="number">10</span>);</span><br><span class="line">        tmp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(revertedNumber == num)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="验证回文链表"><a href="#验证回文链表" class="headerlink" title="验证回文链表"></a>验证回文链表</h2><p>单链表这种特殊的结构，想要确定个长度也需要 O(n) 的复杂度，而且没有前驱指针，双指针前后夹的办法是没法用了。当然我们可以将它转换为我们熟悉的回文数或者回文串进行计算，但是这同样没有用到链表的特性。</p><p>在验证回文链表的场景下，我们可以通过快慢指针的方式找到链表的中间节点，然后再将原链表的一半反转，之后开始比对。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">&#125;ListNode;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isPalindrome</span><span class="params">(ListNode *head)</span>&#123;</span><br><span class="line">    ListNode *slow = head, *fast = head;</span><br><span class="line">    ListNode *pre = head, prepre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        pre = slow;</span><br><span class="line">        slow = slow -&gt; next;</span><br><span class="line">        fast = fast -&gt; next -&gt; next;</span><br><span class="line">        pre -&gt; next = prepre;</span><br><span class="line">        prepre = pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果快指针不为 NULL, 说明链表长度为奇数，需要再走一步 */</span></span><br><span class="line">    <span class="keyword">if</span>(fast != <span class="literal">NULL</span>)</span><br><span class="line">        slow = slow -&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 此时 pre 指向原链表前半部分反转后的表头节点 */</span></span><br><span class="line">    <span class="comment">/* solw 指向原链表的中间节点 */</span></span><br><span class="line">    <span class="keyword">while</span>(pre != <span class="literal">NULL</span> &amp;&amp; slow != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre.val != slow.val)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        pre = pre -&gt; next;</span><br><span class="line">        slow = slow -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BloomFilters详解</title>
      <link href="/2020/03/03/BloomFilters%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/03/03/BloomFilters%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是布隆过滤器"><a href="#什么是布隆过滤器" class="headerlink" title="什么是布隆过滤器"></a>什么是布隆过滤器</h2><p>本质上 <strong>布隆过滤器(BloomFilters)</strong> 是一种数据结构，比较巧妙的概率型数据结构（probabilistic data structure），特点是高效地插入和查询，可以用来告诉你 “某样东西一定不存在或者可能存在”。</p><p>相比于传统的 <strong>List、Set、Map</strong> 等数据结构，它更高效、占用空间更少，但是缺点是其返回的结果是概率性的，而不是确切的。</p><span id="more"></span><hr><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="HashMap-的问题"><a href="#HashMap-的问题" class="headerlink" title="HashMap 的问题"></a>HashMap 的问题</h3><p>讲述布隆过滤器的原理之前，我们先思考一下，通常你判断某个元素是否存在用的是什么？应该蛮多人回答 HashMap 吧，确实可以将值映射到 HashMap 的 Key，然后可以在 O(1) 的时间复杂度内返回结果，效率奇高。但是 HashMap 的实现也有缺点，例如存储容量占比高，考虑到负载因子的存在，通常空间是不能被用满的，而一旦你的值很多例如上亿的时候，那 HashMap 占据的内存大小就变得很可观了。</p><p>还比如说你的数据集存储在远程服务器上，本地服务接受输入，而数据集非常大不可能一次性读进内存构建 HashMap 的时候，也会存在问题。</p><hr><h2 id="布隆过滤器数据结构"><a href="#布隆过滤器数据结构" class="headerlink" title="布隆过滤器数据结构"></a>布隆过滤器数据结构</h2><p>布隆过滤器是一个 bit 向量或者说 bit 数组，长这样：</p><p><img src="https://i.loli.net/2020/03/08/645kwFyZp7aJijR.jpg" alt="image1"></p><p>如果我们要映射一个值到布隆过滤器中，我们需要使用多个不同的哈希函数生成多个哈希值，并对每个生成的哈希值指向的 bit 位置 1，例如针对值 “baidu” 和三个不同的哈希函数分别生成了哈希值 1、4、7，则上图转变为：</p><p><img src="https://i.loli.net/2020/03/08/9QlgZoc2qWxObXC.jpg" alt="image2"></p><p>Ok，我们现在再存一个值 “tencent”，如果哈希函数返回 3、4、8 的话，图继续变为：</p><p><img src="https://i.loli.net/2020/03/08/eq25XtDmFbyohVL.jpg" alt="image3"></p><p>值得注意的是，4 这个 bit 位由于两个值的哈希函数都返回了这个 bit 位，因此它被覆盖了。现在我们如果想查询 “dianping” 这个值是否存在，哈希函数返回了 1、5、8三个值，结果我们发现 5 这个 bit 位上的值为 0，说明没有任何一个值映射到这个 bit 位上，因此我们可以很确定地说 “dianping” 这个值不存在。而当我们需要查询 “baidu” 这个值是否存在的话，那么哈希函数必然会返回 1、4、7，然后我们检查发现这三个 bit 位上的值均为 1，那么我们可以说 “baidu” 存在了么？答案是不可以，只能是 “baidu” 这个值可能存在。</p><p>这是为什么呢？答案跟简单，因为随着增加的值越来越多，被置为 1 的 bit 位也会越来越多，这样某个值 “taobao” 即使没有被存储过，但是万一哈希函数返回的三个 bit 位都被其他值置位了 1 ，那么程序还是会判断 “taobao” 这个值存在。</p><hr><h2 id="支持删除么"><a href="#支持删除么" class="headerlink" title="支持删除么"></a>支持删除么</h2><p>目前我们知道布隆过滤器可以支持 add 和 isExist 操作，那么 delete 操作可以么，答案是不可以，例如上图中的 bit 位 4 被两个值共同覆盖的话，一旦你删除其中一个值例如 “tencent” 而将其置位 0，那么下次判断另一个值例如 “baidu” 是否存在的话，会直接返回 false，而实际上你并没有删除它。</p><p>如何解决这个问题，答案是计数删除。但是计数删除需要存储一个数值，而不是原先的 bit 位，会增大占用的内存大小。这样的话，增加一个值就是将对应索引槽上存储的值加一，删除则是减一，判断是否存在则是看值是否大于0。</p><hr><h2 id="如何选择哈希函数个数和布隆过滤器长度"><a href="#如何选择哈希函数个数和布隆过滤器长度" class="headerlink" title="如何选择哈希函数个数和布隆过滤器长度"></a>如何选择哈希函数个数和布隆过滤器长度</h2><p>很显然，过小的布隆过滤器很快所有的 bit 位均为 1，那么查询任何值都会返回“可能存在”，起不到过滤的目的了。布隆过滤器的长度会直接影响误报率，布隆过滤器越长其误报率越小。</p><p>另外，哈希函数的个数也需要权衡，个数越多则布隆过滤器 bit 位置位 1 的速度越快，且布隆过滤器的效率越低；但是如果太少的话，那我们的误报率会变高。</p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>常见的适用常见有，利用布隆过滤器减少磁盘 IO 或者网络请求，因为一旦一个值必定不存在的话，我们可以不用进行后续昂贵的查询请求。</p><p>另外，既然你使用布隆过滤器来加速查找和判断是否存在，那么性能很低的哈希函数不是个好选择，推荐 <strong>MurmurHash、Fnv</strong> 这些。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用python画圣诞树</title>
      <link href="/2019/12/25/%E7%94%A8python%E7%94%BB%E5%9C%A3%E8%AF%9E%E6%A0%91/"/>
      <url>/2019/12/25/%E7%94%A8python%E7%94%BB%E5%9C%A3%E8%AF%9E%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>turtle 还挺好玩的啊😎</p><span id="more"></span><h2 id="用-python-的-turtle-库画圣诞树🎄"><a href="#用-python-的-turtle-库画圣诞树🎄" class="headerlink" title="用 python 的 turtle 库画圣诞树🎄"></a>用 python 的 turtle 库画圣诞树🎄</h2><br><iframe src="//player.bilibili.com/player.html?aid=80596538&cid=137928782&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="300" width="400"> </iframe><h4 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">n = <span class="number">80.0</span></span><br><span class="line"> </span><br><span class="line">speed(<span class="string">&quot;fastest&quot;</span>)</span><br><span class="line">screensize(bg=<span class="string">&#x27;seashell&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">7</span>)</span><br><span class="line">left(<span class="number">90</span>)</span><br><span class="line">forward(<span class="number">3</span>*n)</span><br><span class="line">color(<span class="string">&quot;orange&quot;</span>, <span class="string">&quot;red&quot;</span>)</span><br><span class="line">begin_fill()</span><br><span class="line"></span><br><span class="line">left(<span class="number">126</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    forward(n/<span class="number">5</span>)</span><br><span class="line">    right(<span class="number">144</span>)</span><br><span class="line">    forward(n/<span class="number">5</span>)</span><br><span class="line">    left(<span class="number">72</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">right(90)</span></span><br><span class="line"><span class="string">forward(n/6)</span></span><br><span class="line"><span class="string">left(120)</span></span><br><span class="line"><span class="string">forward(n/3)</span></span><br><span class="line"><span class="string">left(120)</span></span><br><span class="line"><span class="string">forward(n/3)</span></span><br><span class="line"><span class="string">left(120)</span></span><br><span class="line"><span class="string">forward(n/6)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">end_fill()</span><br><span class="line"><span class="comment">#left(90)</span></span><br><span class="line">right(<span class="number">126</span>)</span><br><span class="line"></span><br><span class="line">color(<span class="string">&quot;dark green&quot;</span>)</span><br><span class="line">backward(n*<span class="number">4.8</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tree</span>(<span class="params">d, s</span>):</span><br><span class="line">    <span class="keyword">if</span> d &lt;= <span class="number">0</span>: <span class="keyword">return</span></span><br><span class="line">    forward(s)</span><br><span class="line">    tree(d-<span class="number">1</span>, s*<span class="number">.8</span>)</span><br><span class="line">    right(<span class="number">120</span>)</span><br><span class="line">    tree(d-<span class="number">3</span>, s*<span class="number">.5</span>)</span><br><span class="line">    right(<span class="number">120</span>)</span><br><span class="line">    tree(d-<span class="number">3</span>, s*<span class="number">.5</span>)</span><br><span class="line">    right(<span class="number">120</span>)</span><br><span class="line">    backward(s)</span><br><span class="line">tree(<span class="number">15</span>, n)</span><br><span class="line">backward(n/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    a = <span class="number">200</span> - <span class="number">400</span> * random.random()</span><br><span class="line">    b = <span class="number">10</span> - <span class="number">20</span> * random.random()</span><br><span class="line">    up()</span><br><span class="line">    forward(b)</span><br><span class="line">    left(<span class="number">90</span>)</span><br><span class="line">    forward(a)</span><br><span class="line">    down()</span><br><span class="line">    <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">1</span>) == <span class="number">0</span>:</span><br><span class="line">            color(<span class="string">&#x27;tomato&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        color(<span class="string">&#x27;wheat&#x27;</span>)</span><br><span class="line">    circle(<span class="number">2</span>)</span><br><span class="line">    up()</span><br><span class="line">    backward(a)</span><br><span class="line">    right(<span class="number">90</span>)</span><br><span class="line">    backward(b)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图之易混概念</title>
      <link href="/2019/10/31/%E5%9B%BE%E4%B9%8B%E6%98%93%E6%B7%B7%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/10/31/%E5%9B%BE%E4%B9%8B%E6%98%93%E6%B7%B7%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" async  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"></script><span id="more"></span><ol><li>简单图<ul><li>不存在重复边</li><li>不存在顶点到自身的边<br></li></ul></li><li>多重图<ul><li>允许某两个结点之间的边数多于一条</li><li>允许顶点通过同一条边和自己关联<br></li></ul></li><li>简单路径<br>在路径序列中，顶点不重复出现的路径。<br></li><li>简单回路<br>除第一个顶点和最后一个顶点外，其余顶点不重复出现的回路。<br></li><li>完全图 or 简单完全图<ul><li>无向图中，任意两个顶点之间都存在边，所以总边数 \( \frac{n(n-1)}{2} \)</li><li>有向图中，任意两个顶点之间都存在方向相反的两条弧，所以总边数 \( n(n-1) \)<br></li></ul></li><li>连通 and 连通图<br><font color=red>无向图中</font>，若顶点 v 到顶点 w 有路径存在，则称 v 和 w 是连通的。若该无向图中的任意两顶点都是连通的，则称该图为连通图。<br></li><li>极大连通子图 and 连通分量<br><font color=red>非连通无向图</font> 的极大连通子图称为连通分量。极大要求该连通子图包含其所有的边。极小连通子图是既要保持图连通又要使得边数最少的子图。<br></li><li>强连通 and 强连通图<br><font color=red>有向图中</font>，若顶点 v 到顶点 w 和从顶点 w 到顶点 v 都有路径存在，则称这两个顶点是强连通的。若该有向图中的任意两顶点都是强连通的，则称该图为强连通图。<br></li><li>强连通分量 and 极大强连通子图<br><font color=red>非强连通有向图</font> 的极大强连通子图称为强连通分量。<br></li><li>生成树<br>一个无向连通图的生成树是它的 <strong>极小连通子图</strong>，若图中含有 n 个顶点，则其生成树由 (n-1) 条边构成。若是有向图，则可能得到它的若干有向树组成的生成森林。<br><strong>最小生成树</strong> 就是一个带权图的总权值最小的生成树。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作文天天练</title>
      <link href="/2019/10/21/%E4%BD%9C%E6%96%87%E5%A4%A9%E5%A4%A9%E7%BB%83/"/>
      <url>/2019/10/21/%E4%BD%9C%E6%96%87%E5%A4%A9%E5%A4%A9%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<p>每天白天写完，晚上再来复习一遍。说实话，我这小学生的作文水平，自己看了都想笑······<br>加油吧💪！</p><span id="more"></span><ul><li><strong>2018</strong>小作文👇<blockquote><p>Dear Sir or Madam,<br>&amp;emsp;&amp;emsp; As the chairman of the Students’ Union, I am writing the email to invite you to take part in the graduation ceremony.<br>&amp;emsp;&amp;emsp; We will be extremely honored to see you in this event. Specifically, the ceremony, which will last for about two hours, is about to start at 8:00 a.m. on December 26(next Sunday) at Students’ Auditorium. In addition, we have prepared elaborate presents for each professor and teacher to express our sincere gratitude. Once again, it is your presence on that special day that will definitely make it a much more meaningful and memorable moment for us.<br>&amp;emsp;&amp;emsp; It would be much appreciated if you could please send back the reply slip to inform us of your attendance.<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Yours Sincerely,<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Li Ming</p></blockquote></li></ul><hr><ul><li><strong>2018</strong>大作文👇<blockquote><p>As is vividly depicted in the cartoon, a student, with hesitation and worries, is making his decision to choose courses. The courses on the left are those contain advanced knowledge and demand personal creativity, of course, with much difficulties to pass. With little homework that is prone to get higher grades, the subjects on the right are totally different. Below the drawing, there is a caption, which says “Choosing courses”.<br><br>The purpose of the portrayal is to show us that we should make our mind to overcome the problems rather than escaping from the difficulties, so that we are bound to lead a meaningful life and get a sense of fulfillment. In fact, just as an old saying goes “Challenges are also chances”. It is these predicaments, which are seemingly insurmountable and impossible, that enables us to enrich our theoretical and practical knowledge, and to be experienced when we are confronted with similar situations in latter life. Therefore, once when it comes to such choices, we ought to choose the one that is more arduous and more challenging with no hesitation.<br><br>As far as I am concerned, it is of utmost significance for young people to possess the striving heart in the face of the hard nut. Only in this way can we build up our mental strength and pioneer a promising future.</p></blockquote></li></ul><hr><ul><li><strong>2017</strong>小作文😀<blockquote><p>Dear professor Cook,<br>&amp;emsp;&amp;emsp; We are extremely honored to invite you as one of the professors of our university. And I am writing the letter to recommend some places of interest to you in our city.<br>&amp;emsp;&amp;emsp; To begin with, as one of the wonders of the world, the Great Wall is a fantastic and magnificent building, symbolizing ancient Chinese people’s creation and civilization, which enables you to have a chance to understand the Chinese culture. In addition, the Palace Museum, also renowned as the Forbidden City, is another famous and wonderful scenic spot, which is worthy of your visit. It is the palace that is also the largest piece of ancient China’s architecture currently existing.<br>&amp;emsp;&amp;emsp; Maybe you have the opportunity to pay a visit to one or both of these attractions. I wish you enjoy your stay in our city.<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Yours Sincerely,<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Li Ming</p></blockquote></li></ul><hr><ul><li><strong>2017</strong>大作文😀<blockquote><p>As is vividly depicted in the cartoon, lying comfortably and leisurely on a chair, a young man says “I have so many books” in the face of a bookshelf, which is full of numerous books. On the contrary, another young man is sitting at his desk, with just several books on it, and he makes his mind to finish reading 20 books this year. Below the drawing, there is a caption, which says “Possessing books and reading books”.<br><br>We can deduce from the portrayal that the cartoonist tries conveying such a message: Actions speak louder than words. Undoubtedly, students should set their own goals, with an aggressive and striving heart. However, just talking is of absolutely no use, while it is your persistence and perseverance, toward you goals in general, that plays a crucial role in determining whether you can realize your dreams or not, rather than just imagining your future with no actions. Specifically, take us as an example, attaining satisfactory grades in the entrance exam, which is the very dream of us. Whereas, you could never make it come true without constant efforts and keeping making progress.<br><br>It is my view that actions is to words what reality is to ideality. Only when we put sufficient emphasis on what we have done rather what we have said can we pave the way to a promising future.</p></blockquote></li></ul><hr><ul><li><strong>2009</strong>小作文😁<blockquote><p>Dear Editors,<br>&amp;emsp;&amp;emsp; The past several months have witnessed the futility of restrictions on the use of plastic bags. As a college student, I am writing the letter to express some of my views and suggestions.<br>&amp;emsp;&amp;emsp; First and foremost, it is people’s awareness of environmental protection in daily life, which is of utmost significance, that plays a crucial role in determining whether the policies can be put into effect or not. On top of that, not only should we limit the use of plastic bags, but the administration must carry out some complementary measures, for example, charging higher taxes on those environment-unfriendly industry, to promote the development of a recycling economy.<br>&amp;emsp;&amp;emsp; I hope that you will find my recommendations useful in our collective efforts to protect our common home.<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Yours Sincerely,<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Li Ming</p></blockquote></li></ul><hr><ul><li><strong>2009</strong>大作文😁<blockquote><p>As is vividly depicted in the cartoon, there is a great number of individuals, neither to meet the needs of work or to entertain themselves, who are getting on line within an enormous spider web. It seems rather ironic that when they would like to communicate with one another, however, the web separates them from each other. Below the drawing, there is a caption, which says “Nearness and farness of the Internet”.<br><br>We can deduce from the impressive portrayal that the cartoonist tries conveying such a message: The spider web, which symbolizes the Internet, with becoming more and more pervasive in general life, however, it brings both conveniences and problems to us. Undoubtedly, the Internet is currently one of the most efficient media in personal communication. As a college student, I get on line every day to browse news, to study English by registering for online courses, and to chat freely with my friends. Meanwhile, some citizens admit that they are too addicted to the Internet to maintain face-to-face contact with their friends. Hardly can people lead a routine life when they are indulged in the fictitious world.<br><br>Therefore, I hold the view that only when we use the Internet in a reasonable way and restrain from overindulgence can we make it become a helpful hand to assist us in work and life.</p></blockquote></li></ul><hr><ul><li><strong>2008</strong>小作文😂<blockquote><p>Dear Bob,<br>&amp;emsp;&amp;emsp; Hardly have I arrived at my home from the airport when I surprisingly find that the music CD you lent to me is in my luggage. I sincerely apology to you for my careless mistake and any inconveniences that may cause.<br>&amp;emsp;&amp;emsp;Therefore, I am wondering if you could show me your most accessible address, so that I will be able to email it to you. In addition, it is you and your family’s enthusiasm and tender care, when I was in Canada, that makes the time there become one of the most wonderful memories in my life.<br>&amp;emsp;&amp;emsp; Please allow me to say sorry again, and take my regards to your family.<br>&amp;emsp;&amp;emsp; Looking forward to your reply.<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Yours Sincerely,<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Li Ming</p></blockquote></li></ul><hr><ul><li><strong>2008</strong>大作文😂<blockquote><p>As is vividly depicted in the cartoon, two handicapped men, supporting each other with their firm hands, are running on the ground. Crutches left behind, which means that they have cracked the hard nut of the disability of walking independently. Below the drawing, there is a caption which says “You have only one leg and so do I. Helping each other, we can travel around the world”.<br><br>We can deduce from the portrayal that the cartoonist tries conveying such a message: United we stand, divided we fall. It is cooperation and mutual assistance, which demands us to give a helping hand to those who are in trouble, that plays a crucial role in determining whether we can achieve our goals or not. As a college student, not only should we work together to figure out the issues in study, but we ought to help our friends who may have difficulty in adapting the new environment or studying stress. Meanwhile, as more and more individuals you have helped, the chances that you will receive assistance, no matter when you are in dilemma, are much higher as well.<br><br>To sum up, I hold the view that collaboration is to us what sunlight is to crops. With cooperation, we are bound to perform our tasks effectively and make up our defects. Only in this way can we pave the way to a promising future.</p></blockquote></li></ul><hr><ul><li><strong>2016</strong>小作文🤣<p style="text-align:center;"><b>Notice</b></p></li></ul><blockquote><p>Welcome to our university and study here! As the librarian of our library, I would like to present you with some practical information with regard to the library.<br>To begin with, the library opens during the time between 8:00 a.m. and 9:00 p.m. . In addition, it is the unique student card, which will be handed to you the day when you arrive, that enables you to check out books. You ought to return the books back within one month. Otherwise, you will be fined according to the overdue time.<br>Furthermore, it would be appreciated that if you could provide us with some advice.<br>I hope you enjoy your life here.<br/> &amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Li Ming<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; Library of X University</p></blockquote><hr><ul><li><strong>2016</strong>大作文🤣<blockquote><p>As is vividly depicted in the cartoons, smoking and watching TV comfortably, the father on the left is asking his son to work hard, while the little boy seems unhappy in deed. On the contrary, when it is nine o’clock at night, another father on the right, who is sitting at the desk and writing diligently, studying along with him is his son. Below the drawing, there is a caption which says “It is better to set an example rather than just make demands”.<br><br>We can deduce from the portrayal that the cartoonist tries conveying such a message: It is not what you have said but what you have done, the occasions when you require others to achieve some goals, that plays a crucial role in determining whether your demanding can take positive effect or not. According to a survey conducted among a group of parents, those who teach their children by setting a good example for them, their children tend to perform better than others as well. Nevertheless, hardly can those children, who always live under the stress of parents’ boring and everlasting orders, become more competent and brilliant in latter life.<br><br>To sum up, just as an old saying goes “actions speak louder than words”. Only when parents earnestly practice what they advocate can children follow their good examples and pave the way to a promising future.</p></blockquote></li></ul><hr><ul><li><strong>2005</strong>小作文😃<blockquote><p>Dear Mr. Wang,<br>&amp;emsp;&amp;emsp; I have been extremely honored to work with you for the past two months. It is the chance that you offered, which enables me to be an editor for Designs &amp; Fashions, that makes me learn a lot from you and my other colleagues.<br>&amp;emsp;&amp;emsp; However, as a young man whose primary interest is computer science, I regretfully find that the present job does not fit me. Therefore, I have made my mind to quit this job and to search for another one that may conform better to my interest and educational background.<br>&amp;emsp;&amp;emsp; I sincerely apology to you for any inconveniences that may cause.<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Yours Sincerely,<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Li Ming</p></blockquote></li></ul><hr><ul><li><strong>2005</strong>大作文😃<blockquote><p>As is vividly depicted in the cartoon, an old father, who is kicked around like a football by his three sons and a daughter on a football field. The elder seems so helpless and poor, with shabby clothes on his body, he can not stop trembling. Below the drawing, there is a caption which says “The football match of financially support”.<br><br>We can deduce from the portrayal that the cartoonist tries conveying such a message: The thought-provoking social phenomenon is nowadays prevalent among some of families in China. Undoubtedly, there is an increasing trend that more and more young people are suffering much pressure, which is either from work or life, than ever before. However, that is not the reason individuals can show no respect to their parents and avoid the responsibility of taking care of the elders. It is no exaggeration to say that without your parents’ full devotion and selfless care, you could never grow up healthily and achieve what you have got.<br><br>As a nation renowned worldwide for many of its virtues, Chinese people have been practicing filial piety throughout history. Parents is to us what sunlight is to crops, loving and respecting our parents is just the fundamental moral codes that we must observe. Only in this way can we be worthy of the name of a Chinese.</p></blockquote></li></ul><hr><ul><li><strong>2006</strong>小作文😄<blockquote><p>Dear Sir or Madam,<br>&amp;emsp;&amp;emsp; Interested in the main tenets of the Project Hope and moved by what the project has achieved, I have made my mind to contribute my little bit to the organization.<br>&amp;emsp;&amp;emsp; To begin with, I would like to provide financial assistance to a juvenile, who can not afford the overburden tuition fees and has no choice but to drop out of school as a result, in the remote area of your province. It would be appreciated if I could donate my contribution directly to a bank account opened by his or her parents in their local area.<br>&amp;emsp;&amp;emsp; Your generous help is beyond my words. Thank you for your time and consideration.<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Yours Sincerely,<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Li Ming</p></blockquote></li></ul><hr><ul><li><strong>2006</strong>大作文😄<blockquote><p>As is symbolically illustrated in the cartoons, Beckham, the football superstar of England, whose name appears on a juvenile’s face in the left picture. We are informed that idol worship is written on his face. Similarly, on the right, with getting his haircut in Beckham’s style, another young man is spending 300 yuan in a barbershop.<br>Undoubtedly, we can deduce from the drawings that the cartoonist tries conveying such a message: Nowadays, there is an increasing trend of idol worship, which is more and more prevalent among the most of teenagers. It is this not-uncommon social phenomenon, due to people’s inclination to those who are handsome or excel in some specific domains, that can be a double-edged sword to the growth of children. On the one hand, if we just admire our idols like the men in the pictures do, we could never get ourselves promoted or anything substantial other than wasting our time and money. On the other hand, once when we realize the fact that it is of utmost significance for us to take a lesson from our models by improving ourselves, idol worship can exert its positive influence on us.<br>To sum up, I reckon that models is to us what water is to seeds. Only when we take the right attitude to worship idols can we build up our own strength and pave the way to a promising future.</p></blockquote></li></ul><hr><ul><li><strong>2007</strong>小作文😅<blockquote><p>Dear Sir or Madam,<br>&amp;emsp;&amp;emsp; As a student of the university, I have been keeping a good habit of studying in the library during my spare time. On the whole, the services you offered,  which are certainly of high quality. However, I have several suggestions for improving the services of our library.<br>&amp;emsp;&amp;emsp; To begin with, will you please prolong the opening hours for reading? Since the most of students are having class in the daytime, it is the hours of evening, which enables us to enjoy our time freely in the library, that appears much more valuable. In addition, some of the books are out of date, it would be greatly appreciated if you could provide us with some latest journals of our various majors.<br>&amp;emsp;&amp;emsp; Thank you for your time and consideration.<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Yours Sincerely,<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Li Ming</p></blockquote></li></ul><hr><ul><li><strong>2007</strong>大作文😅<blockquote><p>As is vividly depicted in the cartoon, a football player is about to shoot at the goal defended by another one. It seems that, in the defender’s mind, he is so much smaller than he actually is that it is of no possibility for him to guard the goal. Meanwhile, the attacker maintains the thought that he has no chance of success, for the guard blocks the whole goal with his enormous body.<br><br>Undoubtedly, we can deduce from the portrayal that the cartoonist tries conveying such a message: Our only enemy is ourselves. The occasions when we are confronted with such seemingly insurmountable challenges and difficulties, it is our self-confidence, toward problems and toward life in general, that plays a crucial role in determining whether we can crack the hard nut or not. I can think of no better illustration than the following one. Stephen Hawking, the prestigious scientist and renowned worldwide for his numerous achievements in physics, who had no consciousness except his only four figures. Nevertheless, he had been keeping carrying on with constant efforts and self-confidence, which finally made his career.<br><br>I reckon that self-confidence is to us what sunlight is to crops. Only when we have faith in ourselves and try our best to overcome the dilemmas can we pave the way to a promising and fruitful future.</p></blockquote></li></ul><hr><ul><li><strong>2010</strong>小作文😆<p style="text-align:center;"><b>Notice</b></p><p style="text-align:right;">December 25, 2019</p></li></ul><blockquote><p>Volunteers are needed for the coming international conference on globalization in early January.<br>The basic requirements are as follows. Firstly, being familiar with the theme of the conference and having a good grasp of spoken English, which is the very skill volunteers must possess. Secondly, applicants should have a good interpersonal communication ability and proper manners. It will be fine that if you are also acquainted with our city’s places of interest. Preference will be given to those who have experienced such conferences or other similar activities.<br>Call 123456 or send email to <a href="mailto:&#101;&#109;&#x61;&#105;&#x6c;&#x40;&#101;&#120;&#x61;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#109;">&#101;&#109;&#x61;&#105;&#x6c;&#x40;&#101;&#120;&#x61;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#109;</a> for more information about the interview. Phone and email enquires are encouraged.<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Postgraduates’ Association</p></blockquote><hr><ul><li><strong>2010</strong>大作文😆<blockquote><p>As is vividly depicted in the cartoon, with Beijing Opera, Kung Fu, Confucianism, Shakespeare, deconstruction, Buddhism, enlightenment and other cultural symbols, which are full of a hot pot, it smells good and tasty. Below the drawing, there is a caption which says “Cultural hot pot is both nutritious and delicious”.<br><br>Undoubtedly, we can deduce from the portrayal that the cartoonist tries conveying such a message: Since the trend of globalization has become irresistible, cultural exchange is becoming more and more prevalent among the society. As a matter of fact, it is cultural blending, which enables people of many different cultures to engage together throughout history, that plays an increasing significant role in improving mutual understanding and friendly communication between countries.<br><br>Moreover, I reckon that a nation’s culture should be preserved and cherished as a treasure which can exert profound influence on us, for example, leading us a healthy and positive attitude toward life. Meanwhile, when it comes to cultural integration, it is of utmost importance for us to absorb other cultures’ virtues and restrain from their defects. After all, culture is to society what intelligence is to human beings. Only in this way can we help to make our world more multidimensional, vigorous and colorful.</p></blockquote></li></ul><hr><ul><li><strong>2011</strong>小作文😆<blockquote><p>Dear Bob,<br>&amp;emsp;&amp;emsp; I remember that you mentioned wanting me to recommend my favorite movies to you. So I’m writing to inform you an excellent film, The God Father, which is directed by Mario Puzo.<br>&amp;emsp;&amp;emsp; The primary causes of my recommendation are as follows. To begin with, within good script, great casting, and over the top directing skills, it is so attractive that audiences are glued to what will happen next as the story progresses. In addition, it is the great blending, including family, loyalty, greediness, real life, and the artistic style that makes the film memorable and compelling.<br>&amp;emsp;&amp;emsp; I hope the information above will help you to know the movie. If you need any further information, please do not hesitate to contact me.<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Yours Sincerely,<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Li Ming</p></blockquote></li></ul><hr><ul><li><strong>2011</strong>大作文😆<blockquote><p>As is vividly depicted in the cartoon, happily and cheerfully, two individuals are going on a sightseeing by boat on a lake, with their leftovers flowing on the lake. What is more, the lake is already full of a great deal of rubbish, from plastic wrappings, tins to fish bone and disposable bags. Below the drawing, there is a caption which says” ’Leaving’ in the travel”.<br><br>Undoubtedly, we can deduce from the portrayal that the cartoonist tries conveying such a message: With the increasing trend of the prosperous tourism business, there is a growing number of visitors, who flood to various places of interest and leave behind numerous litter, which also leads to the detrimental deterioration of our ecological system. Nevertheless, it is the collective efforts, which combines both our citizens’ good behaviors and the administration’s effective measures, that plays a crucial role in determining whether we can improve the situation successfully or not. As a college student, we ought to set ourselves an example for others by advocating and practicing what we can do to protect and preserve our environment.<br><br>I would like to quote Dambisa Moyo’s words “The best time to plant a tree is twenty years ago. The second-best time is now”. It is high time that we enhanced people’s awareness of environmental protection and take immediate improvements from now.</p></blockquote></li></ul><hr><ul><li><strong>2015</strong>小作文😉<blockquote><p>Dear Friends,<br>&amp;emsp;&amp;emsp; As the host of the coming reading session, I would like to recommend one of my favorite books to you, The God Father, which is written by Mario Puzo.<br>&amp;emsp;&amp;emsp; The primary causes of my recommendation are as follows. To begin with, within fantastic plots, interesting relationships between figures, and over the top writing skills, it is so attractive that readers are glued to what will happen next as the story progresses. In addition, it is the great blending, including family, loyalty, greediness, real life, and the artistic style that makes the fiction memorable and compelling.<br>&amp;emsp;&amp;emsp; I hope the information above will help you to know the book. If you need any further information, please do not hesitate to contact me.<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Yours Sincerely,<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Li Ming</p></blockquote></li></ul><hr><ul><li><strong>2015</strong>大作文😉<blockquote><p>As is vividly depicted in the cartoon, with their eyes glued to the mobile phones, there is a group of young people, who just focus on the phone rather than the various delicious and tasty food, sitting at the table. It seems rather ironic that when friends are sitting together but have no communication with each other. Below the drawing, there is a caption which says “The gathering in the era of the mobile phone”.<br><br>Undoubtedly, we can deduce from the portrayal that the cartoonist tries conveying such a message: Nowadays, mobile phone has become one of those things that people can not live without them in daily life. It is no exaggeration to say that phones are one of the most efficient media in modern communication, however, it is individuals’ overindulgence, which leads them to rely on their phones too much to take a look at surroundings, that plays a crucial role in determining whether we can use mobile phones in a reasonable way or not. Once when citizens are addicted to the fictitious world in the phones, they will feel reluctant to approach others and finally have difficulty in the face-to-face contact.<br><br>Accordingly, I reckon that it is of utmost significance for us to utilize our phones properly and correctly. Only in this way can we make the phones be our helpful hands to assist us in work and life.</p></blockquote></li></ul><hr><ul><li><strong>2012</strong>小作文😊<blockquote><p>Dear Friends,<br>&amp;emsp;&amp;emsp; As the chairman of Students’ Union, I would like to extend my warmest welcome to all the students who will study in our university. And it is my pleasure to provide you with several practical suggestions.<br>&amp;emsp;&amp;emsp; To begin with, it is the unique student card, which will be handed to you the day when you arrive, that enables you to have meals in the dining hall or read and borrow books in the library. In addition, the hot water is totally free for everyone, so that you can take a comfortable shower after arrival.<br>&amp;emsp;&amp;emsp; I sincerely hope that you enjoy your life here, and if you need any assistance, please do not hesitate to contact me.<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Yours Sincerely,<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Li Ming</p></blockquote></li></ul><hr><ul><li><strong>2012</strong>大作文😊<blockquote><p>As is vividly depicted in the cartoon, with just a half bottle of water, lying a container on the ground, which makes the man on the left certainly complain that there is no water left in the bottle. On the contrary, another man on the right, with satisfied smile on his face, gives the opposite comment “Fortunately, some water is still available”.<br><br>Undoubtedly, we can deduce from the portrayal that the cartoonist tries conveying such a message: The consequence of one thing can be totally different according to the positive or negative attitude toward it. There is no denying that it is your optimistic attitude, toward difficulties and toward life in general, that plays a crucial role in determining whether you can crack the hard nut or not when you are confronted with such seemingly insurmountable challenges and toil.<br><br>Take Stephen Hawking as an example. As a prestigious scientist and renowned worldwide for his numerous achievements in physics, who had no consciousness except his only four figures. Nevertheless, he had been a definite optimist and been positive to no matter what dilemmas in his life, which made his career as a result.<br><br>As far as I am concerned, optimism is to us what sunlight is to crops. Only when we take an optimistic attitude and possess an aggressive and striving heart can we successfully conquer any predicaments and pave the way to a promising and fruitful future.</p></blockquote></li></ul><hr><ul><li><strong>2013</strong>小作文😋<blockquote><p>Dear Professor,<br>&amp;emsp;&amp;emsp; I am Li Ming, as the host of the upcoming English speech contest, which plays a crucial role in  our school’s cultural exchange program, it is my pleasure to invite you as a judge of this event.<br>&amp;emsp;&amp;emsp; Specifically, the contest is about to start at 8:00 a.m. on December 26(next Sunday) at the Students’ Auditorium, and will last for about two hours. I assume that, you, who is proficiency in English and one of the most prestigious professors in our school, could bring our competitors with enlightening comments and valuable suggestions.<br>&amp;emsp;&amp;emsp; It would be appreciated that if you could send back the reply slip and inform us of your attendance.<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Yours Sincerely,<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Li Ming</p></blockquote></li></ul><hr><ul><li><strong>2013</strong>大作文😋<blockquote><p>As is vividly depicted in the cartoon, when students are about to graduate, it can be a tough choice for graduates to choose what to do in their latter life. Among the various choices, some students are getting ready to find a job, or pursuing a master degree, while others are going to study overseas and run their own business. Below the drawing, there is a caption which says “Choice”.<br><br>Undoubtedly, in the face of such numerous roads, students can be certainly hesitant and confused, yet they must take it seriously. First and foremost, it is the personal preference, which may vary from person to person, that plays a crucial role in determining whether students can make their favorable decisions or not, so as to lead a promising career in future. Moreover, it is of utmost significance for students to take their financial status into consideration, for some students can afford the expense of studying abroad, while it could be a heavy strain for others. Therefore, before making your mind, please take these factors into account, which will definitely benefit you in deciding what you would like to do.<br><br>To sum up, only when students deal with the correlation in these elements well can they make a much more satisfactory choice and pave the way to a promising occupation.</p></blockquote></li></ul><hr><ul><li><strong>2014</strong>小作文😎<blockquote><p>Dear Mr. President,<br>&amp;emsp;&amp;emsp; The past several years have witnessed the decreasing of students’ physical fitness. As a college student of our university, I am writing the letter to present some of my suggestions about handling the problem.<br>&amp;emsp;&amp;emsp; To begin with, it is of utmost significance for students to enhance their awareness of the importance of physical exercise. Hardly can students build up their body strength when they realize the fact that they must take exercise to keep healthy. In addition, we would be grateful that if you could improve the quality of the hardware facilities in our school.<br>&amp;emsp;&amp;emsp; Your help is beyond my words. Thanks for your time and consideration.<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Yours Sincerely,<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Li Ming</p></blockquote></li></ul><hr><ul><li><strong>2014</strong>大作文😎<blockquote><p>As is vividly depicted in the cartoons, with holding her daughter’s hands firmly, the young lady is beautiful and charming in the left picture, which was taken thirty years ago. Now, the grown up daughter is supporting her mother in the right photo, with sweet smiles on their faces. Below the drawing, there is a caption which says ”Supporting each other”.<br><br>Undoubtedly, we can deduce from the portrayal that the cartoonist tries conveying such a message: It is of utmost significance for us to provide financial support to our parents when they are too old to take care of themselves. Moreover, it is no exaggeration to say that, without the parents’ loving care and selfless devotion we could never grow up healthily and achieve what we have got. It is the time when they are no longer young that we should take the responsibility of supporting and looking after them, which is the real meaning of love.<br><br>Admittedly, as a nation renowned worldwide for many of its virtues, the Chinese people have been always practicing the filial piety throughout the history. Respecting and loving our parents are just fundamental moral codes that, not only should we keep in mind, but we ought to put the codes into practice. Only in this way can we be worthy of the name of a Chinese.</p></blockquote></li></ul><hr><ul><li><strong>2019</strong>小作文😍<blockquote><p>Dear Volunteers,<br>&amp;emsp;&amp;emsp; As one of the volunteers, who works for the “Aiding Rural Primary School” project, it is my pleasure to inform you of some valuable information about the project.<br>&amp;emsp;&amp;emsp; To begin with, the main tenets of the project is to give a helping hand to rural areas. There are about 200 students in the project now, however, it is still expanding —— volunteers are needed, for we are about to aid a remote countryside of our province this summer vocation, and the organization will cover all of the expenses on meals, accommodation and transportation.<br>&amp;emsp;&amp;emsp; I hope the information above will help you to know the project, and if you need any further assistance, please do not hesitate to contact me.<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Yours Sincerely,<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;Li Ming</p></blockquote></li></ul><hr><ul><li><strong>2019</strong>大作文😍<blockquote><p>As is vividly depicted in the cartoon, sitting at the stair with his heavy bag, the man on the right complains that he is too tired to keep climbing. On the contrary, with carrying the baggage on his shoulders and sweat pouring down his face, another man hands a bottle of water to his friend to encourage him to carry on. Below the drawing, there is a caption which says “On the way”.<br><br>Undoubtedly, we can deduce from the portrayal that the cartoonist tries conveying such a message: It is persistence and perseverance, which enable you to hold on and keep going, that plays a crucial role in determining whether you can crack the hard nut or not, when we are confronted with such seemingly insurmountable challenges and difficulties. Moreover, it is no exaggeration to say that, without the constant efforts and keeping making progress, we could never achieve our goals. Take us as an example. Harvesting the satisfactory grades in the entrance exam, which is the very dream of us, however, some students persist all the year round while others give up.<br><br>Admittedly, perseverance is to goals what reality is to ideality, only when we undergo the toil and dilemmas with the persistent and striving heart can we pave the way to a promising and fruitful future.</p></blockquote></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 考研英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>408模拟题</title>
      <link href="/2019/10/19/408%E6%A8%A1%E6%8B%9F%E9%A2%98/"/>
      <url>/2019/10/19/408%E6%A8%A1%E6%8B%9F%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>这篇博客中的题目，大多为选择题，且都来源于各路不知名模拟题，仅供补充知识。</p><span id="more"></span><ol><li><p>根据<strong>使用方式</strong>，可将缓冲区设置成 ()<br>A. 专用缓冲区和特殊缓冲区 &amp;emsp;&amp;emsp; B. 单缓冲区和多缓冲区<br>C. 专用缓冲区和通用缓冲区 &amp;emsp;&amp;emsp; D. 多缓冲区和缓冲池</p><details><summary>【<font color=red>答案</font>】</summary><text>C</text></details><details><summary>【<font color=green>解析</font>】</summary><text>按<b>使用方式</b>，可将缓冲区设置成专用缓冲区和通用缓冲区；按<b>组织方式</b>，则又可分为单缓冲区、多缓冲区以及缓冲池。</text></details><br></li><li><p>一个计算机系统配置有 2 台绘图机，3 台打印机。为了正确驱动这些设备，系统应该提供的<strong>设备驱动程序</strong>的数量是 ()<br>A. 5 &amp;emsp;&amp;emsp; B. 3 &amp;emsp;&amp;emsp; C. 2 &amp;emsp;&amp;emsp; D. 1</p><details><summary>【<font color=red>答案</font>】</summary><text>C</text></details><details><summary>【<font color=green>解析</font>】</summary><text>因为系统只要按设备类型配置设备驱动程序即可，与设备的数量无关。</text></details><br></li><li><p>一个用于发送二进制信号的 3kHz 信道，其信噪比为 20dB，则可以获得的最大数据速率是 ()<br>A. 6kbps &amp;emsp;&amp;emsp; B. 6.66kps &amp;emsp;&amp;emsp; C. 19.98kps &amp;emsp;&amp;emsp; D. 20kps</p><details><summary>【<font color=red>答案</font>】</summary><text>A</text></details><details><summary>【<font color=green>解析</font>】</summary><text>计算可得，香农极限是 19.98kps，奈奎斯特极限是 6kps，因为瓶颈是奈奎斯特极限，故最大数据速率是 6kps。</text></details><br></li><li><p>一个进程被唤醒意味着 ()<br>A. 该进程马上占有 CPU &amp;emsp;&amp;emsp; B. 进程状态变为就绪态<br>C. 进程的优先权变为最大 &amp;emsp;&amp;emsp; D. 其 PCB 移至就绪队列队首</p><details><summary>【<font color=red>答案</font>】</summary><text>B</text></details><details><summary>【<font color=green>解析</font>】</summary><text>进程占有 CPU 是处于运行态。进程被唤醒，是指当进程需等待的事件发生时，进程会由挂起或阻塞态转变为就绪态，根据相应的调度算法插入到就绪队列的相应位置，不一定插在队首，进程的优先权可能会发生变化，也可能不会。</text></details><br></li><li><p>以下不可能引起进程调度的是 ()<br>A. 一个进程完成工作后被撤销 &amp;emsp;&amp;emsp; B. 一个进程从就绪态变成了运行状态<br>C. 一个进程从等待状态变成了就绪态 &amp;emsp;&amp;emsp; D. 一个进程从运行态变成了等待状态或就绪态</p><details><summary>【<font color=red>答案</font>】</summary><text>B</text></details><details><summary>【<font color=green>解析</font>】</summary><text>进程从就绪态变成了运行态，是一次进程调度完成的情况，当然不可能再引起进程调度。</text></details><br></li><li><p>主存的管理方案不同时，对主存储器的访问 ()<br>A. 对于段式或页式管理，以页或段为单位 &amp;emsp;&amp;emsp; B. 以字或字节为单位<br>C. 随存储器的管理方案不同而异 &amp;emsp;&amp;emsp; D. 以用户定义的逻辑记录为单位</p><details><summary>【<font color=red>答案</font>】</summary><text>B</text></details><details><summary>【<font color=green>解析</font>】</summary><text>对主存的访问不管采用什么管理方案，最终都要转换成访问主存的字或字节地址。</text></details><br></li><li><p>在文件系统中文件的不同物理结构有不同的优缺点。在下列文件的物理结构中，() 具有直接读写任意一个记录的能力，又提高了文件存储空间的利用率。<br>A. 顺序结构 &amp;emsp;&amp;emsp; B. 链接结构 &amp;emsp;&amp;emsp; C. Hash 结构 &amp;emsp;&amp;emsp; D. 索引结构</p><details><summary>【<font color=red>答案</font>】</summary><text>D</text></details><details><summary>【<font color=green>解析</font>】</summary><text>索引是一个单独的、物理的数据结构，它是某个表中一列或若干列值的集合和相应的指向表中物理标识这些值的数据页的逻辑指针清单。它可以直接读写任意一个记录。</text></details><br></li><li><p>设有 10000 个无序记录，希望用最快速度从中选择前 10 个关键字最小的记录，采用哪种排序方法最好 ()<br>A. 直接插入排序 &amp;emsp;&amp;emsp; B. 简单选择排序 &amp;emsp;&amp;emsp; C. 快速排序 &amp;emsp;&amp;emsp; D. 希尔排序 </p><details><summary>【<font color=red>答案</font>】</summary><text>B</text></details><details><summary>【<font color=green>解析</font>】</summary><text>在所列出的排序方法中，直接插入、快速、希尔排序都是排序完成后，才能选出前 10 个关键字最小的记录。只有简单选择排序能直接选出前 10 个关键字最小的记录。</text></details><br></li><li><p>关于计算机字长下面说法错误的是 ()<br>A. 表示该计算机能够存储的最大二进制位数<br>B. 表示该计算机的 CPU 可以同时处理的二进制位数<br>C. 机器字长一般与 CPU 中寄存器的位数有关<br>D. 机器字长决定了数的表示范围和表示精度</p><details><summary>【<font color=red>答案</font>】</summary><text>A</text></details><details><summary>【<font color=green>解析</font>】</summary><text>计算机字长是指 CPU 一次能处理的数据长度，它通常与 CPU 中的寄存器的位数相等，决定了机器所能表示数据的范围和精度。计算机通过多次操作，可以存储长度远大于字长的二进制数据，也有些寄存器的位数会大于字长，如 x86 中的段基址寄存器。</text></details><br></li><li><p>某一 RAM 芯片，其容量为 128k x 16位，除电源和接地端外，该芯片引出线的最少数目是 ()<br>A. 33 &amp;emsp;&amp;emsp; B. 35 &amp;emsp;&amp;emsp; C. 25 &amp;emsp;&amp;emsp; D. 26</p><details><summary>【<font color=red>答案</font>】</summary><text>B</text></details><details><summary>【<font color=green>解析</font>】</summary><text>128k x 16位的存储器，数据线为 16 根，按字寻址的范围是 2^17，按字节寻址的范围是 2^19，地址线为 19 根。所以芯片引出线的最少数目是 16+19=35。</text></details><br></li><li><p>以下四种类型指令中，执行时间最长的是 ()<br>A. RR 型指令 &amp;emsp;&amp;emsp; B. RS 型指令 &amp;emsp;&amp;emsp; C. SS 型指令 &amp;emsp;&amp;emsp; D. 程序控制指令</p><details><summary>【<font color=red>答案</font>】</summary><text>C</text></details><details><summary>【<font color=green>解析</font>】</summary><text>RR 型指令是在寄存器之间进行操作，速度比较快；RS 型指令是在寄存器和主存单元间进行操作；SS 型指令是在主存单元之间进行操作。程序控制指令相当于 RR 型指令或 RS 型指令。</text></details><br></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 408计算机基础综合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微操作命令的分析</title>
      <link href="/2019/09/11/%E5%BE%AE%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%88%86%E6%9E%90/"/>
      <url>/2019/09/11/%E5%BE%AE%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>这玩意得写很久，待做。</p><span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>翻译实战</title>
      <link href="/2019/08/18/%E7%BF%BB%E8%AF%91%E5%AE%9E%E6%88%98/"/>
      <url>/2019/08/18/%E7%BF%BB%E8%AF%91%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>考研英语翻译实战。</p><span id="more"></span><h1 id="2019-🍕"><a href="#2019-🍕" class="headerlink" title="2019 🍕"></a>2019 🍕</h1><ol><li>There is a great deal of this kind of nonsense in the medical journals which, when taken up by broadcasters and the lay press, generates both health scares and short-lived dietary enthusiasms.</li></ol><p><strong>翻译:</strong> 在医学期刊中有很多这种无稽之谈，当其被广播和非专业媒体传播开来，就会引起健康恐慌以及短期的节食热潮。<br><br><br>2. Nowadays anyone applying for a research post has to have published twice the number of papers that would have been required for the same post 10 years ago.<br><strong>翻译:</strong> 当下，任何研究职位的申请者，所必须发表的论文数是十年前申请同样职位所需论文数的两倍。<br><br><br>3. Attempts have been made to curb this tendency, for example, by trying to incorporate some measure of quality as well as quantity into the assessment of an applicant’s papers.<br><strong>翻译:</strong> 也有过遏制这一趋势的尝试，例如，试图将某种质量和数量衡量标准融入对申请者论文的评估范畴。<br><br><br>4. This would be reasonable if it were not for the fact that scientists can easily arrange to cite themselves in their future publications, or get associates to do so for them in return for similiar favours.<br><strong>翻译:</strong> 如果不是因为科学家们能够轻易地在其将来的出版物中引用自己的论文，以及组织成员间的互相引用以达到类似的互惠效果，那么这种做法也很合理。<br><br><br>5. If we are serious about ensuring that our science is both meaningful and reproducible, we must ensure that our institutions encourage that kind of science.<br><strong>翻译:</strong> 如果我们真想确保科学既有意义又可复现，我们就必须确保我们的制度鼓励这种科学。</p><hr><h1 id="2018-🍔"><a href="#2018-🍔" class="headerlink" title="2018 🍔"></a>2018 🍔</h1><ol><li>By the date of his birth Europe was witnessing the passing of the religious drama, and the creation of new forms under the incentive of classical tragedy and comedy.</li></ol><p><strong>翻译:</strong> 在莎士比亚出生的时代，欧洲正见证着宗教戏剧的消逝，以及在 <strong>古典</strong> 悲剧和喜剧的启发之下新型戏剧形式的诞生。<br><br><br>2. No body who went to a grammar school could be ignorant that the drama was a form of literature which gave glory to Greece and Rome and might yet bring honor to England.<br><strong>翻译:</strong> 任何上过正规学校的人都不会忽视，戏剧这种文学形式曾给希腊和罗马带来了辉煌，并且也许会给英国带来荣耀。<br><br><br>3. But the professional companies prospered in their permanent theaters, and university men with litery ambitions were quick to turn to these theaters as offering a means of livelihood.<br><strong>翻译:</strong> 但是 <strong>专业剧团</strong> 在其 <strong>固定的</strong> 剧场里蓬勃发展，为了谋生，大学里有文学抱负的人便迅速转向这些剧场。<br><br><br>4. A native literary drama had been created, its alliance with the public playhouse established, and at least some of its great traditions had been begun.<br><strong>翻译:</strong> <strong>一种本土的文学戏剧已然形成，其与公共剧场的联盟已然建立，它的伟大传统中至少有一部分也已经开启。</strong><br><br><br>5. To realize how great was the dramatic activity, we must remember further that hosts of plays have been lost, and that probably there is no author of note whose entire work has survived.<br><strong>翻译:</strong> 要明白当时的戏剧活动是何等 <strong>繁荣</strong>，我们必须记住，大量的剧作已经失传，也许没有哪位知名作家的全部作品幸存至今。</p><hr><h1 id="2015-🌭"><a href="#2015-🌭" class="headerlink" title="2015 🌭"></a>2015 🌭</h1><ol><li>This movement, driven by powerful and diverse motivations, built a nation out of a wilderness and, by its nature, shaped the character and destiny of an uncharted continent.</li></ol><p><strong>翻译:</strong> 在各种强有力的动机驱使下，这次迁徙在荒野之上早就了一个新民族，从本质上来说，也塑造了一片全新大陆的特点，并决定了它的命运。<br><br><br>2. The United States is the product of two principal forces —— the immigration of European peoples with varied ideas, customs, and national characteristics and the impact of a new country which modified these traits.<br><strong>翻译:</strong> 美国就是两股主要力量的产物，一是具有各种思想、传统和民族特点的欧洲民族的迁入；二是一个新兴国家因改变了这些特性而产生的影响。<br><br><br>3. But the force of geographic conditions peculiar to America, the interplay of the varied national groups upon one another, and the sheer difficulty of maintain old-world ways in a raw, new continent caused significant changes.<br><strong>翻译:</strong> 但是由于受到美国特殊的地理环境，各族群间的相互影响，以及维持旧世界方式的巨大困难这些因素的影响，这片新大陆发生了意义深远的变化。<br><br><br>4. The first shiploads of immigrants bound for the territory which is now the United States crossed the Atlantic more than a hundred years after the 15th-and-16th-century explorations of North America.<br><strong>翻译:</strong> 在十五、十六世纪对北美大陆的探索过去一百多年后，第一批移民横穿大西洋来到了这片土地，这片土地就是今天的美国。<br><br><br>5. The virgin forest with its richness and variety of trees was a real treasure-house which extended from Maine all the way down to Georgai.<br><strong>翻译:</strong> 这个富含多种树木的原始森林是一座从缅因一直延伸到佐治亚的天然宝库。</p><hr><h1 id="2012-🍿"><a href="#2012-🍿" class="headerlink" title="2012 🍿"></a>2012 🍿</h1><ol><li>In physics, one approach takes this impulse for unfication to its extreme, and seeks a theory of everything —— a single generative equation for all we see.</li></ol><p><strong>翻译:</strong> 在物理学中，有一种方式将追求统一的冲动发挥到了极致，试图探求万物之理 —— 一个可以表达我们所见的一切的生成性方程。<br><br><br>2. Here, Darwinism seems to offer justification, for if all humans share common origins, it seems reasonable to suppose that cultural diversity could also be traced to more constrained beginnings.<br><strong>翻译:</strong> 这里，达尔文主义似乎做出了 <strong>证明</strong>，因为如果人类有着共同的起源，那么似乎就有理由认为文化的多样性也可以追溯到更有限的开端。<br><br><br>3. To filter out what is unique from what is shared might enable us to understand how complex cultural behaviors arose and what guides it in revolutionary or cognitive terms.<br><strong>翻译:</strong> 从共有事物中滤出特殊事物，也许使得我们能够理解复杂的文化行为是如何兴起的，并 <strong>从进化和认知角度</strong> 理解是什么引导了它的走向。<br><br><br>4. The second, By Joshua Greenberg, takes a more empirical approach to universality, identifying traits(particulary in word order)shared by many languages. which are considered to represent biases that result from cognitive constrains.<br><strong>翻译:</strong> 其次是约瑟·格林伯格，他用一种更为经验主义的方法研究语言的普遍性，确定了多种语言(尤其在词序方面)的共同特征，这些特征被视为由认知范畴产生的 <strong>倾向</strong>。<br><br><br>5. Chomsky’s grammar should patterns of language change that are independent of the family tree or the pathway tracked through it, which Greenbergain universality predicts strong co-dependencies between particular types of word-order relations.<br><strong>翻译:</strong> 乔姆斯基法则应该展示出语言变化的模式，这些模式独立于其宗谱树和分支，然而格林伯格的普遍性则预言了特定的词序关系类型之间所存在的紧密互依性。<br><br> </p><hr><h1 id="2010"><a href="#2010" class="headerlink" title="2010"></a>2010</h1><ol><li>Scients jumped to the rescue with some distinctly shaky evidence to the effect that insects would eats us up if birds failed to control them.</li></ol><p><strong>翻译:</strong> 科学家们赶忙以一种显然站不住脚的证据来挽救鸟类，其大意是，如果鸟类不能控制昆虫的话，昆虫将会吞噬我们。<br><br><br>2. But we have at least drawn nearer the point of admitting that birds should continue as a matter of intrinsic right, regardless of presence or absence of economic advantages to us.<br><strong>翻译:</strong> 但我们至少离这一观点更近了一步，其承认无论鸟类对我们是否有经济价值，它们都本应有继续生存的权利。<br><br><br>3. Time was when biologists somewhat overlooked the evidence that these creatures preserve the health of game by killing the physically weak, or that they prey only on “worthless” species.<br><strong>翻译:</strong><br><br></p><hr><h1 id="2006-🥓"><a href="#2006-🥓" class="headerlink" title="2006 🥓"></a>2006 🥓</h1><ol><li>I shall define him as an individual who has elected as his primary duty and pleasure in life the activity of thinking in a Socartic way about moral problems.</li></ol><p><strong>翻译:</strong> 我把知识分子定义为这样一个人：他用苏格拉底的方式思考道德问题，并以此作为其生命中的主要职责与乐趣。<br><br><br>2. His function is analogous to that of a judge, who must accept the obligation of revealing in as obvius a manner as possible the course of reasonging which led him to his decision.<br><strong>翻译:</strong> 知识分子的作用与法官的作用类似，<strong>后者</strong> 必须承担这样一种义务：以一种尽可能明了的方式将他做出决定的推理过程展现出来。<br><br><br>3. I have excluded him because, while his accomplishments may contribute to the solution of moral problems, he has not been charged with the task of approaching any but factual aspects of those problems.<br><strong>翻译:</strong> 我将科学家排除在外，是因为尽管其成就也许有助于道德问题的解决，但他承担的任务只是解决道德问题的实际方面。<br><br><br>4. But his primary task is not to think about the moral code which governs his activity, any more than a businessman is expected to dedicate his energies to an exploration of rules of conduct in business.<br><strong>翻译:</strong> 但是科学家的主要工作并不是去思考引导其行为的道德法则，更不用说指望商人致力于探索商业规范了。<br><br><br>5. They may teach very well, and more than earn their salaries, but most of them make little or no independent reflections on human problems which involve moral judgement.<br><strong>翻译:</strong> 老师们也许擅于授课，并且不只是为了赚取薪水，但其大多数都不曾对包括道德评判在内的人类问题进行过独立思考。<br><br></p><hr><h1 id="2007-🍟"><a href="#2007-🍟" class="headerlink" title="2007 🍟"></a>2007 🍟</h1><ol><li>Traditionally, legal learning has been viewed in such institions as the special preserve of lawyers, rather than a necessary part of the intellectual equipment of an educated person.</li></ol><p><strong>翻译:</strong> 长久以来，这些院校将 <strong>法律知识</strong> 视为是律师所专有的，而不是一个受教育者所必须具备的知识技能。<br><br><br>2. On the other, it links these concepts to everyday realities in a manner which is parallel to the links journalists forge on a daily basis as they cover and comment on the news.<br><strong>翻译:</strong> 另一方面，法律将公正、民主和自由这些概念与日常现实联系起来，这与记者们每天报导和评论新闻得做法是类似的。<br><br><br>3. But the idea that journalist must understand the law more profoundly than an ordinary citizen rests on an understanding of the established conventions and special responsibilities of the news media.<br><strong>翻译:</strong> 但是，新闻从业相较于普通民众必须对法律有更深刻的理解，这一观点是基于对现有规约和媒体行业所担负的特殊责任的理解。<br><br><br>4. In fact, it is difficult to see how journalists who do not have a clear grasp of the basic features of the Canadian Constitution can do a competent job on political stories.<br><strong>翻译:</strong> 事实上，很难 <strong>想象</strong> 那些对加拿大宪法的基本特性都不清晰了解的新闻从业者何以胜任政治新闻的报道工作。<br><br><br>5. While comment and reaction from lawyers may enhance stories, it is preferable for journalists to rely on their own notions of significance and make their own judgmetns.<br><strong>翻译:</strong> 来自律师的评价和反馈往往能够增强报道的可信度，但新闻工作者们最好依靠自己对重大事件的见解来自行做出判断。<br><br></p><hr><style type="text/css">    .sentence {        font-size: 15px;        font-family: Lucida Grande;        color: #1a2a3a;    }    .translate {        font-weight: bold;    }        #seperate{        color: #2ecc71;        font-weight: bold;        font-size: 15px;    }        #words{        text-decoration: underline;        text-decoration-color: #e74c3c;        text-decoration-style: double;    }        #text_relative{        position: relative;        line-height: 3.5;    }        #translate{        position: absolute;        bottom: 11px;        color: #e74c3c;        font-size: 13px;    }}</style><h1 id="2006"><a href="#2006" class="headerlink" title="2006"></a>2006</h1><div class="sentence">    <p>        I shall define him as an individual <text id="seperate">/</text> who has elected <text id="seperate">/</text> as his primary duty and pleasure in life <text id="seperate">/</text> the activity of thinking in a Socratic way <text id="seperate">/</text> about moral problems.    </p>    <p>        <text class="translate">翻译: </text><br>        我把<text id="text_relative">        <u id="words">知识分子</u>        <span id="translate" style="left:4px">intellectual</span>        定义为这样的个体:        <u id="words">他</u>        <span id="translate" style="left:190px">who</span>        用苏格拉底的方式思考道德问题，并以        <u id="words">此</u>        <span id="translate" style="left:450px">the&nbsp;activity</span>        作为        <u id="words">其</u>        <span id="translate" style="left:528px">his</span>        生命中的主要职责与乐趣。</text>    </p></div>---<div class="sentence">    <p>        I have excluded him because, <text id="seperate">/</text> while his accomplishments may contribute to the solution of moral problems, <text id="seperate">/</text> he has not been charged with the task <text id="seperate">/</text> of apporaching any but factual aspects of those problems.    </p>    <p>        <text class="translate">翻译: </text><br>        我之所以把<text id="text_relative">        <u id="words">普通科学家</u>        <span id="translate" style="left:30px">him</span>        排除在外，是因为        <u id="words">虽然</u>        <span id="translate" style="left:210px">while</span>&nbsp;        <u id="words">他</u>        <span id="translate" style="left:254px">his</span>        的成就可能有助于        <u id="words">解决</u>        <span id="translate" style="left:360px">the&nbsp;solution&nbsp;of</span>        道德问题，但是他所        <u id="words">承担</u>        <span id="translate" style="left:540px">be&nbsp;charged&nbsp;with</span>        的任务只是        <u id="words">触及</u>        <span id="translate" style="bottom:-40px;left:-25px">approaching</span>        了这些问题的事实方面。</text>    </p></div>---]]></content>
      
      
      <categories>
          
          <category> 考研英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语翻译, 考研英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于As的翻译</title>
      <link href="/2019/08/18/As%E4%B9%8B%E7%BF%BB%E8%AF%91/"/>
      <url>/2019/08/18/As%E4%B9%8B%E7%BF%BB%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p>本文是一篇关于如何翻译英文句子中的 as 的总结。</p><span id="more"></span><h2 id="AS的定义"><a href="#AS的定义" class="headerlink" title="AS的定义"></a>AS的定义</h2><h3 id="副词"><a href="#副词" class="headerlink" title="副词"></a><strong>副词</strong></h3><p>   <em>used in comparisons to refer to the extent or degree of something.</em><br>   <strong>eg: hailstones as big as tennis balls</strong></p><h3 id="连词"><a href="#连词" class="headerlink" title="连词"></a><strong>连词</strong></h3><p>   <em>used to indicate that something happens during the time when something is taking place.</em><br>   <strong>eg: Frank watched him as he ambled through the crowd.</strong><br>   同义词：<u>while</u>、<u>just as</u>、<u>even as</u>、<u>(just) when</u>、<u>at the time that</u>、<u>at the moment that</u></p><p>   <em>used to indicate by comparison the way that something happens or is done.</em><br>   <strong>eg: dress as you would if you were having guests in the (same) way that the (same) way like.</strong><br>   同义词: <u>in the (same) way that</u>、<u>the (same) way</u>、<u>like</u></p><p>   <em>相当于 because、since</em><br>   <strong>eg: I must stop now as I have to go out.</strong><br>   同义词: <u>because</u>、<u>since</u>、<u>seeing that&#x2F;as</u>、<u>in view of the fact that</u>、<u>owing to the fact that</u>、<u>on account of</u>、<u>for</u></p><p>   <em>相当于 even though</em><br>   <strong>eg: sweet as he is, he doesn’t pay his bills. </strong><br>   同义词: <u>though</u>、<u>although</u>、<u>even though</u>、<u>in spite of the fact that</u>、<u>despite the fact that</u>、<u>notwithstanding that</u>、<u>for all that</u>、<u>albeit</u>、<u>however</u></p><h3 id="介词"><a href="#介词" class="headerlink" title="介词"></a><strong>介词</strong></h3><p>   <em>used to refer to the function or character that someone or something has.</em><br>   <strong>eg: he got a job as a cook.</strong><br>   同义词: <u>like</u>、<u>in the guise of</u>、<u>so as to appear to be</u>、<u>in the role of</u>、<u>being</u>、<u>acting as</u></p><p>   <em>during the time of being (the thing specified).</em><br>   <strong>eg: he had often been sick as a child<strong></p>]]></content>
      
      
      <categories>
          
          <category> 考研英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语翻译, 考研英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++标准模板库STL介绍(一)</title>
      <link href="/2019/08/13/C++%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93STL%E4%BB%8B%E7%BB%8D(%E4%B8%80)/"/>
      <url>/2019/08/13/C++%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93STL%E4%BB%8B%E7%BB%8D(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<p>本文主要包括 <strong>stack</strong>、<strong>queue</strong> 常用函数的介绍(未完待续···)</p><span id="more"></span><h1 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h1><p>栈，STL 中实现的一个后进先出的容器。</p><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p>push(x) 将 x 入栈，时间复杂度为 O(1)</p><h4 id="top"><a href="#top" class="headerlink" title="top()"></a>top()</h4><p>top() 获得栈顶元素，时间复杂度为 O(1)</p><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>pop() 用以弹出栈顶元素，时间复杂度为 O(1)</p><h4 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h4><p>empty() 可以检测 <strong>stack</strong> 内是否为空，返回 true 为空，返回 false 为非空，时间复杂度为 O(1)</p><h4 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h4><p>size() 返回 <strong>stack</strong> 内元素的个数，时间复杂度为 O(1)</p><p>代码示例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="type">int</span>&gt; st;      <span class="comment">/* stack 的定义 */</span></span><br><span class="line">    <span class="keyword">if</span>(st.empty() == <span class="literal">true</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Empty\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Not Empty\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i)</span><br><span class="line">        st.push(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">3</span>; ++i)    </span><br><span class="line">        st.pop();    <span class="comment">/* 连续三次将栈顶元素出栈 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, st.top());</span><br><span class="line">    <span class="keyword">if</span>(st.empty() == <span class="literal">true</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Empty\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Not Empty\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, st.size());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果: </span><br><span class="line">Empty</span><br><span class="line"><span class="number">2</span></span><br><span class="line">Not Empty</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><hr><h1 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h1><p>队列，在 STL 中实现了一个先进先出的容器。</p><h4 id="push-1"><a href="#push-1" class="headerlink" title="push()"></a>push()</h4><p>push(x) 将 x 进行入队，时间复杂度为 O(1)</p><h4 id="front-、back"><a href="#front-、back" class="headerlink" title="front()、back()"></a>front()、back()</h4><p>front() 和 back() 可以分别获得队首元素和队尾元素，时间复杂度为 O(1)</p><h4 id="pop-1"><a href="#pop-1" class="headerlink" title="pop()"></a>pop()</h4><p>pop() 令队首元素出队，时间复杂度为 O(1)</p><h4 id="empty-1"><a href="#empty-1" class="headerlink" title="empty()"></a>empty()</h4><p>empty() 检测 <strong>queue</strong> 是否为空，返回 true 则为空，返回 false 则非空，时间复杂度为 O(1)</p><p>代码示例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="type">int</span>&gt; q;       <span class="comment">/* queue 的定义 */</span></span><br><span class="line">    <span class="keyword">if</span>(q.empty() == <span class="literal">true</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Empty\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; ++i)</span><br><span class="line">        q.push(i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, q.front(), q.back());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i)</span><br><span class="line">        q.pop();        <span class="comment">/* 连续三次出队首元素 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, q.front());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(q.empty() == <span class="literal">false</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Not Empty\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果:</span><br><span class="line">Empty</span><br><span class="line"><span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">Not Empty</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web页请求的历程</title>
      <link href="/2019/08/07/Web%E9%A1%B5%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8E%86%E7%A8%8B/"/>
      <url>/2019/08/07/Web%E9%A1%B5%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8E%86%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>在复习完计算机网络后，我们来总结一下一次完整的 Web 页请求历程。</p><span id="more"></span><p>通过对已经学过的协议做一个综合的、全面的展望，我们希望总结一下沿协议栈向下的旅程。而做这个“全面的”展望的一种方法是识别许多协议，这些协议涉及满足甚至最简单的请求: <b>下载一个 Web 页面<b>。下图展示了我们的场景：一名学生 Bob 将他的便携机与学校的以太网交换机相连，下载一个 Web 页面(比如说 <code>www.google.com</code>)。如我们所知，为满足这个看起来简单的请求，背后隐藏了许多细节。</p><p><img src="https://i.loli.net/2019/07/24/5d387b53677b721618.png" alt="Web 页请求历程: 网络环境和动作"></p><h3 id="准备-DHCP、UDP、IP-和以太网"><a href="#准备-DHCP、UDP、IP-和以太网" class="headerlink" title="准备: DHCP、UDP、IP 和以太网"></a>准备: DHCP、UDP、IP 和以太网</h3><p>我们假定 Bob 启动他的便携机，然后将其用一根以太网电缆连接到学校的以太网交换机，交换机又与学校的路由器相连，如上图所示。学校的这台路由器与一个 ISP 相连，本例中 ISP 为 comcast.net。在本例中，comcast.net 为学校提供了 DNS 服务；所以，DNS 服务器驻留在 Comcast 网络中而不是在学校网络中。我们将假设 DHCP 服务器运行在路由器中，就像常见情况那样。<br>当 Bob 首先将其便携机与网络相连时，没有 IP 地址他就不能做任何事情。所以，Bob 的便携机所采取的一个网络相关的动作是 <b>运行 DHCP 协议</b>，以从本地 DHCP 服务器获得一个 IP 地址以及其他信息。</p><p><font color="red"><b>1.</b></font> Bob 便携机上的操作系统生成一个 <b>DHCP 请求报文</b>，并将这个报文放入具有目的地端口 67(DHCP 服务器)和源端口 68(DHCP 客户)的 <b>UDP 报文段</b>。该 UDP 报文段则被放置在一个具有广播 IP 目的地址(255.255.255.255)和源 IP 地址(0.0.0.0)的 <b>IP 数据报中</b>，因为 Bob 的便携机还不具有一个 IP 地址。</p><p><font color="red"><b>2.</b></font> 包含 DHCP 请求报文的 IP 数据报则被放置在 <b>以太网帧</b> 中。该以太网帧具有 <b>目的 MAC 地址</b> FF:FF:FF:FF:FF:FF, 使该帧将广播到与交换机连接的所有设备(如果顺利的话也包括 DHCP 服务器)；该帧的 <b>源 MAC 地址</b> 是 Bob 便携机的 MAC 地址 00:16:D3:23:68:8A。</p><p><font color="red"><b>3.</b></font> 包含 DHCP 请求的广播以太网帧是第一个由 Bob 便携机发送到以太网交换机的帧。该交换机在所有的出端口广播入帧，包括连接到路由器的端口。</p><p><font color="red"><b>4.</b></font> 路由器在它的具有 MAC 地址 00:22:6B:45:1F 的接口接收到该广播以太网帧，该帧中包含 DHCP 请求，并且从该以太网帧中抽取出 IP 数据报。该数据报的广播 IP 目的地址指示了这个 IP 数据报应当由在该结点的高层协议处理，因此该数据报的载荷(一个 UDP 报文段)被分解向上到达 UDP，DHCP 请求报文从此 UDP 报文段中抽取出来。此时 DHCP 服务器有了 DHCP 请求报文。</p><p><font color="red"><b>5.</b></font> 我们假设运行在路由器中的 DHCP 服务器能够以 CIDR 块 68.85.2.0/24 分配 IP 地址。所以本例中，在学校内使用的所有 IP 地址都在 Comcast 的地址块中。我们假设 DHCP 服务器分配地址 68.82.2.101 给 Bob 的便携机。DHCP 服务器生成包含这个 IP 地址以及 DNS 服务器的 IP 地址(68.87.71.226)、默认网关路由器的 IP 地址(68.85.2.1)和子网块(68.85.2.0/24)(等价为“网络掩码”)的一个 DHCP ACK 报文。该 DHCP 报文被放入一个 UDP 报文段中，UDP 报文段被放入一个 IP 数据报中，IP 数据报再被放入一个以太网帧中。这个以太网的源 MAC 地址是路由器连到归属网络时接口的 MAC 地址(00:22:6B:45:1F:1B),目的 MAC 地址是 Bob 便携机的 MAC 地址(00:16:D3:23:68:8A)。</p><p><font color="red"><b>6.</b></font> 包含 DHCP ACK 的以太网帧由路由器发送给交换机。因为交换机是自学习的，并且先前从 Bob 便携机收到(包含 DHCP 请求的)以太网帧，所以该交换机直到寻址到 00:16:D3:23:68:8A 的帧仅从通向 Bob 便携机的输出端口转发。</p><p><font color="red"><b>7.</b></font> Bob 便携机接收到包含 DHCP ACK 报文。Bob 的 DHCP 客户则记录下它的 IP 地址和它的 DNS 服务器的 IP 地址。它还在其 <b>IP 转发表</b> 中安装默认网关的地址。Bob 便携机将向该默认网关发送目的地址为其子网 68.85.2.0/24 以外的所有数据报。此时，Bob 便携机已经初始化好它的网络组件，并准备开始处理 Web 网页获取。</p><h3 id="仍在准备：DNS、ARP"><a href="#仍在准备：DNS、ARP" class="headerlink" title="仍在准备：DNS、ARP"></a>仍在准备：DNS、ARP</h3><p>当 Bob 将 <code>www.google.com</code> 的 URL 键入其 Web 浏览器时，他开启了一长串事件，这将导致谷歌主页最终显示在其 Web 浏览器上。Bob 的 Web 浏览器通过生成一个 <b>TCP套接字</b>开始了该过程，套接字用于向 <code>www.google.com</code> 发送 <b>HTTP请求</b>。为了生成该套接字，Bob 便携机将需要知道 <code>www.google.com</code> 的 IP 地址。(<b>DNS协议</b> 将提供这种名字到 IP 地址的转换服务)</p><p><font color="red"><b>8.</b></font> Bob 便携机上的操作系统因此生成一个 <b>DNS 查询报文</b>，将字符串 www.google.com 放入 DNS 报文段中。该 DNS 报文则放置在一个具有 53 号(DNS 服务器)目的端口的 <b>UDP 报文段中</b>。该 UDP 报文段则被放入一个具有 IP 目的地址 68.87.71.226(在第 5 步中 DHCP ACK 返回的服务器地址)和源 IP 地址 68.85.201 的 IP 数据报中。</p><p><font color="red"><b>9.</b></font> Bob便携机则将包含 DNS 请求报文的数据报放入一个以太网帧中。该帧将发送(在链路层寻址)到 Bob 学校网络中的网关路由器。然而，即使 Bob 便携机未经过上述第 5 步中的 DHCP ACK 报文知道了学校网关路由器的 IP 地址(68.85.2.1),但仍不知道网关路由器的 MAC 地址。为了获得该网关路由器的 MAC 地址，Bob 便携机将需要使用 <b>ARP 协议</b>。</p><p><font color="red"><b>10.</b></font> Bob 便携机生成一个具有目的 IP 地址 68.85.2.1(默认网关)的 <b>ARP 查询报文</b>，将该 ARP 报文放置在一个具有广播目的地址(FF:FF:FF:FF:FF:FF)的以太网帧中，并向交换机发送该以太网帧，交换机将该帧交付给所有连接的设备，包括网关路由器。</p><p><font color="red"><b>11.</b></font> 网关路由器在通往学校网络的接口上接收到包含该 ARP 查询报文的帧，发现 ARP 报文中目标 IP 地址 68.85.2.1 匹配其接口的 IP 地址。网关路由器因此准备一个 <b>ARP 回答<b>，指示它的 MAC 地址 00:22:6B:45:1F:1B 对应的 IP 地址 68.85.2.1。它将 ARP 回答放在一个以太网帧中，其目的地址为 00:16:D3:23:68:8A(Bob 便携机)，并向交换机发送该帧，再由交换机将该帧交付给 Bob 便携机。</p><p><font color="red"><b>12.</b></font> Bob 便携机接收包含 ARP 回答报文的帧，并从 ARP 回答报文中抽取网关路由器的 MAC 地址。</p><p><font color="red"><b>13.</b></font> Bob 便携机现在能够使包含 DNS 查询的以太网帧寻址到网关路由器的 MAC 地址。注意到在该帧中的 IP 数据报具有 IP 目的地址 68.87.71.226(DNS 服务器)，而该帧具有目的 MAC 地址 00:22:6B:45:1F:1B(网关路由器)。Bob 便携机向交换机发送该帧，交换机将该帧交付给网关路由器。</p><h3 id="还在准备：域内路由选择到-DNS-服务器"><a href="#还在准备：域内路由选择到-DNS-服务器" class="headerlink" title="还在准备：域内路由选择到 DNS 服务器"></a>还在准备：域内路由选择到 DNS 服务器</h3><p><font color="red"><b>14.</b></font> 网关路由器接收该帧并抽取包含 DNS 查询的 IP 数据报。路由器查找该数据报的目的地址(68.87.71.226)，并根据其转发表决定该数据报应当发送到上图中的 Comcast 网络中最左边的路由器。IP 数据报放置在链路层中，该链路适合将学校路由器连接到最左边 Comcast 路由器，并且该帧经这条链路发送。</p><p><font color="red"><b>15.</b></font> 在 Comcast 网络中最左边的路由器接收到该帧，抽取 IP 数据报，检查该数据报的目的地址(68.87.71.226)，并根据其转发表确定出接口，经过该接口朝着 DNS 服务器转发数据报，而转发表已根据 <b>域内协议(RIP、OSPF)</b> 以及 <b>域间协议 BGP</b> 所填写。</p><p><font color="red"><b>16.</b></font> 最终包含 DNS 查询的数据报到达了 DNS 服务器。DNS 服务器抽取出 DNS 查询报文，在它的 DNS 数据库中查找名字 www.google.com，找到包含对应该名字的 IP 地址(64.233.169.105)的 DNS 源记录(假设它当前缓存在 DNS 服务器中)。该 DNS 服务器形成了一个包含这种主机名到 IP 地址映射的 <b>DNS 回答报文</b>，将该 DNS 回答报文放入 UDP 报文段中，该报文段放入寻址到 Bob 便携机的 IP 数据报中。该数据报将通过 Comcast 网络反向转发到学校的路由器，并从这里经过以太网交换机到 Bob 便携机。</p><p><font color="red"><b>17.</b></font> Bob 便携机从 DNS 报文抽取出服务器 www.google.com 的 IP 地址。现在，Bob 便携机准备接触 www.google.com 服务器了！</p><h3 id="Web-客户-–-服务器交互：TCP-和-HTTP"><a href="#Web-客户-–-服务器交互：TCP-和-HTTP" class="headerlink" title="Web 客户 – 服务器交互：TCP 和 HTTP"></a>Web 客户 – 服务器交互：TCP 和 HTTP</h3><p><font color="red"><b>18.</b></font> 既然 Bob 便携机有了 www.google.com 的 IP 地址，它能够生成 <b>TCP 套接字</b>，该套接字将用于向 google 服务器发送 <b>HTTP GET 报文</b>。当 Bob 生成该 TCP 套接字时， 在 Bob 便携机中的 TCP 必须首先与服务器端的 TCP 进行 <b>三次握手</b>。Bob 便携机因此首先生成一个具有目的端口 80(针对 HTTP 的)的 <b>TCP SYN 报文段</b>，将该 TCP 报文段放置在具有目的 IP 地址 64.233.169.105(www.google.com)的 IP 数据报中，将该数据报放置在 MAC 地址为网关路由器的帧中，并向交换机发送该帧。</p><p><font color="red"><b>19.</b></font> 在学校网络、Comcast 网络和谷歌网络中的路由器朝着 www.google.com 转发包含 TCP SYN 的数据报，使用每台路由器中的转发表，如前面步骤 14~16 那样。前面讲过支配分组经 Comcast 和谷歌网络之间的域间链路转发的路由转发表项，是由 BGP 协议决定的。</p><p><font color="red"><b>20.</b></font> 最终，包含 TCP SYN 的数据报到达 www.google.com。从数据报抽取出 TCP SYN 报文并分解到与端口 80 相联系的 Welcome 套接字。对于谷歌 HTTP 服务器和 Bob 便携机之间的 TCP 连接生成一个连接套接字。产生一个 TCP SYNACK 报文段，将其放入向 Bob 便携机寻址的一个数据报中，最后放入链路层帧中，该链路适合将 www.google.com  连接到其第一跳路由器。</p><p><font color="red"><b>21.</b></font> 包含 TCP SYNACK 报文段的数据报通过谷歌、Comcast 和学校网络，最终到达 Bob 便携机的以太网卡。数据报在操作系统中分解到步骤 18 生成的 TCP 套接字，从而进入连接状态。</p><p><font color="red"><b>22.</b></font> 借助于 Bob 便携机上的套接字，现在准备向 www.google.com 发送字节了，Bob 的浏览器生成包含要获取的 URL 和 HTTP GET 报文。HTTP GET 报文则写入套接字，其中 GET 报文成为一个 TCP 报文段的载荷。该 TCP 报文段放置进一个数据报中，并交付到 www.google.com，如前步骤 18~20 所示。</p><p><font color="red"><b>23.</b></font> 在 www.google.com 的 HTTP 服务器从 TCP 套接字读取 HTTP GET 报文，生成一个 <b>HTTP 响应报文</b>，将请求的 Web 页内容放入 HTTP 响应体中，并将报文发送进 TCP 套接字中。</p><p><font color="red"><b>24.</b></font> 包含 HTTP 回答报文的数据报通过谷歌、Comcast 和学校网络转发，到达 Bob 便携机。Bob 的 Web 浏览器程序从套接字读取 HTTP 响应，从 HTTP 响应体中抽取 Web 网页的 HTML, 并终于显示了 Web 网页。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上面的过程真的涉及到了太多的网络基础！如果我们能够深刻理解上述内容的大多数，那我们的网络基础就不用愁啦！</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信号量与PV操作</title>
      <link href="/2019/08/01/%E4%BF%A1%E5%8F%B7%E9%87%8F%E4%B8%8EPV%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/08/01/%E4%BF%A1%E5%8F%B7%E9%87%8F%E4%B8%8EPV%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>处理进程同步和互斥的问题，用的最多的是信号量机制。它只能被两个标准的原语 wait(s) 和 signal(s) 访问，也可记为 P(s) 和 V(s)</p><span id="more"></span><ul><li><p>P(s): 如果 s 是非零的，那么 P 将 s 减 1，并且立即返回。如果 s 为 0，那么就立即挂起这个线程，直到 s 变为非 0，而一个 V 操作会重启这个线程。在重启之后，P 操作将 s 减 1，并将控制返回给调用者。</p></li><li><p>V(s): V 操作将 s 加 1。如果有任何线程阻塞在 P 操作等待 s 变成非零，那么 V 操作会重启这些线程中的一个，然后该线程将 s 减 1，完成它的 P 操作。</p></li></ul><hr><h2 id="用信号量来进行互斥"><a href="#用信号量来进行互斥" class="headerlink" title="用信号量来进行互斥"></a>用信号量来进行互斥</h2><p>程序中经常会有一些 <strong>共享变量</strong>，而它往往会引入同步错误。如下所示 <font color= green>test.c</font>，它创建了两个线程，每个线程都对共享计数变量 <strong>cnt</strong> 加 1。因为每个线程都对计数器增加了 <strong>n</strong> 次，所以 <strong>cnt</strong> 的预计值应该是 <strong>2n</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread</span><span class="params">(<span class="type">void</span> *var)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 全局共享变量 */</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">long</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建两个线程 */</span></span><br><span class="line">    <span class="type">pthread_t</span> tid1, tid2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取数字参数 */</span></span><br><span class="line">    n = atoi(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 线程跑起来啦 */</span></span><br><span class="line">    pthread_create(&amp;tid1, <span class="literal">NULL</span>, thread, &amp;n);</span><br><span class="line">    pthread_create(&amp;tid2, <span class="literal">NULL</span>, thread, &amp;n);</span><br><span class="line">    pthread_join(tid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(tid2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 输出结果 */</span></span><br><span class="line">    <span class="keyword">if</span> (cnt != (<span class="number">2</span> * n))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed! cnt = %d\n&quot;</span>, cnt);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Success! cnt = %d\n&quot;</span>, cnt);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线程函数 */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread</span><span class="params">(<span class="type">void</span> *var)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> i, n = *((<span class="type">long</span> *)var);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        cnt += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，当我们实际运行该程序时，不仅答案错误，而且每次得到的答案都不同！<br>如下图所示:<br><img src="https://i.loli.net/2019/07/30/5d4069317a00374703.png" alt="运行结果">实际上，我们无法预测操作系统是否为这两个线程选择一个正确的顺序。在这个实例中，这两个线程就很可能是交叉运行的，所以最终输出的 cnt 值不是我们所期望的。</p><p>信号量提供了一种很方便的方法来确保对共享变量的互斥访问。基本思想是将每个共享变量与一个信号量 s(初值为 1)联系起来，然后用 P(s) 和 V(s) 操作将相应的临界区包围起来。<br>以这种方式来保护共享变量的信号量叫做 <strong>二元信号量</strong>，因为它的值总是 0 和 1。一个被用作一组可用资源的计数器的信号量被称为 <strong>计数信号量</strong>。<br>如下所示:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 信号量 mutex = 1 */</span></span><br><span class="line"><span class="type">sem_t</span> mutex;</span><br><span class="line">sem_init(&amp;mutex, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    sem_wait(&amp;mutex);        <span class="comment">/* 相当于 P(mutex) */</span></span><br><span class="line">    cnt += <span class="number">1</span>;</span><br><span class="line">    sem_post(&amp;mutex);        <span class="comment">/* 相当于 V(mutex) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们再次运行这个程序时，它就可以每次都能产生正确的结果了。<br><img src="https://i.loli.net/2019/07/31/5d4074833daef40097.png" alt="成功"></p><hr><h2 id="用信号量来调度共享资源"><a href="#用信号量来调度共享资源" class="headerlink" title="用信号量来调度共享资源"></a>用信号量来调度共享资源</h2><h3 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a><strong>生产者-消费者问题</strong></h3><p>生产者和消费者线程共享一个大小为 n 的缓冲区。生产者线程反复地生产新的项目，并把它们放入缓冲区中。消费者线程不断地从缓冲区中取出这些项目，然后消费它们。</p><p><strong>问题分析</strong>：因为放入和取出项目都涉及更新共享变量，所以我们必须保证对缓冲区的访问是互斥的。但是只保证互斥访问是不够的，我们还需要调度对缓冲区的访问。如果缓冲区是满的，那么生产者必须等待直到有一个空位可用；如果缓冲区是空的，那么消费者必须等待直到有一个项目可供消费。<br>伪代码描述如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* empty 为缓冲区的空位数, full 为可用项目数 */</span></span><br><span class="line">semaphore mutex = <span class="number">1</span>, empty = n, full = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">producer() &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    P(empty);<span class="comment">/* 看缓冲区中有空位没 */</span></span><br><span class="line">    P(mutex);</span><br><span class="line">    放入项目;</span><br><span class="line">    V(mutex);</span><br><span class="line">    V(full);<span class="comment">/* 缓冲区中的项目数加 1 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">consumer() &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    P(full);<span class="comment">/* 看缓冲区中有项目没 */</span></span><br><span class="line">    P(mutex);</span><br><span class="line">    取出项目;</span><br><span class="line">    V(mutex);</span><br><span class="line">    V(empty);<span class="comment">/* 缓冲区的空位数加 1 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这里每次对 empty 和 full 变量的 P 操作一定要放在对 mutex 的 P 操作之前，而这里的 V 操作没有先后顺序的问题。原因很显然，如果先 P(mutex) 的话，只要 empty 或 full 为 0，那么程序就极有可能发生死锁。</p><h3 id="读者-写者问题"><a href="#读者-写者问题" class="headerlink" title="读者-写者问题"></a><strong>读者-写者问题</strong></h3><h4 id="1-读者优先"><a href="#1-读者优先" class="headerlink" title="1. 读者优先"></a>1. 读者优先</h4><p>一个数据对象(例如一个文件或记录)若被多个并发进程共享，其中读者进程只需要读该数据对象的内容，写者进程则需要修改其内容。<br>多个读者可以同时访问这个共享数据对象，但是，如果一个写者和任何一个其他的读者或写者同时访问这个数据对象，就有可能导致不确定的访问结果。<br>要求:</p><ul><li>允许多个读者进程同时读文件</li><li>只允许一个写者进程写文件</li><li>任何一个写者进程在完成写操作之前不允许其他读者或写者工作</li><li>写者执行写操作前，应等待已有的写者或读者全部退出</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">* count 为读者数量,</span></span><br><span class="line"><span class="comment">* rw 为访问文件的互斥信号量</span></span><br><span class="line"><span class="comment">* mutex 为更新 count 的互斥信号量 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">semaphore mutex = <span class="number">1</span>, rw = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">writer() &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    P(rw);</span><br><span class="line">    写作;</span><br><span class="line">    V(rw);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reader() &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    P(mutex);</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">        P(rw);  <span class="comment">/* 一旦有读者，就阻止写者进入 */</span></span><br><span class="line">    count++;</span><br><span class="line">    V(mutex);</span><br><span class="line">    阅读;</span><br><span class="line">    P(mutex);</span><br><span class="line">    count--;       <span class="comment">/* 阅读结束，读者离开 */</span></span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>)        <span class="comment">/* count = 0 说明读者全部退出了 */</span></span><br><span class="line">        V(rw);     <span class="comment">/* 现在可以让给写者写了 */</span></span><br><span class="line">    V(mutex);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实从上面的代码中，我们也能看出 <strong>读者是优先</strong> 的。由于允许多个读者同时进行读操作，在有读者的情况下，假设一个写者到来，因为读者进程还未释放信号量 rw, 所以写者不能访问文件。这样，只要有一个读者还在读文件，随后而来的读者都被允许访问文件，而写者将一直被挂起直到所有读者退出为止。这会使写者发生饥饿现象。</p><h4 id="2-写者优先"><a href="#2-写者优先" class="headerlink" title="2. 写者优先"></a>2. 写者优先</h4><p>当有读进程正在读文件时，若有写进程请求访问，这时应禁止后续读者进程的请求，等到已在共享文件中的读进程执行完毕，立即让给写进程执行，只有在无写进程的情况下才允许读进程再次执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* reader_count 为读者数量</span></span><br><span class="line"><span class="comment">* writer_count 为写者数量</span></span><br><span class="line"><span class="comment">* mutex_rc 为更新 reader_count 的互斥信号量</span></span><br><span class="line"><span class="comment">* mutex_wc 为更新 writer_count 的互斥信号量</span></span><br><span class="line"><span class="comment">* wr 读者进程在此排队</span></span><br><span class="line"><span class="comment">* wsem 为写者互斥信号量</span></span><br><span class="line"><span class="comment">* rsem 为读者 &quot;互斥&quot; 信号量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">semaphore mutex_rc = <span class="number">1</span>, mutex_wc = <span class="number">1</span>, wr = <span class="number">1</span>, wsem = <span class="number">1</span>, rsem = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> reader_count = <span class="number">0</span>, writer_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">writer() &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    P(mutex_wc);</span><br><span class="line">    writer_count++;</span><br><span class="line">    <span class="keyword">if</span> (writer == <span class="number">1</span>)         <span class="comment">/* 实现写者优先 */</span></span><br><span class="line">        P(rsem);           <span class="comment">/* 直接抢占 rsem, 此时还有读者在 wr 上排队呢 */</span></span><br><span class="line">    V(mutex_wc);</span><br><span class="line">    P(wsem);</span><br><span class="line">    写文件;</span><br><span class="line">    V(wsem);</span><br><span class="line">    P(mutex_wc);</span><br><span class="line">    writer_count--;</span><br><span class="line">    <span class="keyword">if</span> (writer_count == <span class="number">0</span>)</span><br><span class="line">        V(rsem);        <span class="comment">/* 写者退出，读者才可进入 */</span>      </span><br><span class="line">    V(mutex_wc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reader() &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    P(wr);</span><br><span class="line">    P(rsem);            <span class="comment">/* 让其他读者先在 wr 上排队 */</span></span><br><span class="line">    P(mutex_rc);</span><br><span class="line">    reader_count++;</span><br><span class="line">    <span class="keyword">if</span> (reader_count == <span class="number">1</span>)</span><br><span class="line">        P(wsem);      <span class="comment">/* 只要有读者，就阻塞写者进程 */</span></span><br><span class="line">    V(mutex_rc);</span><br><span class="line">    V(rsem);         <span class="comment">/* 先释放的是 rsem */</span> </span><br><span class="line">    V(wr);          <span class="comment">/* 允许其他读者进程进入 */</span></span><br><span class="line">    读文件;</span><br><span class="line">    P(mutex_rc);</span><br><span class="line">    reader_count--;</span><br><span class="line">    <span class="keyword">if</span> (reader_count == <span class="number">0</span>)</span><br><span class="line">        V(wsem);  <span class="comment">/* 读者退出，写者才可进入 */</span></span><br><span class="line">    V(mutex_rc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-读写公平"><a href="#3-读写公平" class="headerlink" title="3. 读写公平"></a>3. 读写公平</h4><p>读写进程有着相同的优先级。当一个写进程写文件时，若先有一些读进程要求访问文件，后有另一个写进程要求写文件，则当前写进程结束时，会是一个读进程而不是写进程占用文件。(这也是王道书本上所给出的方法)<br>代码简单易懂，我就不多写注释了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* count 为读者数量</span></span><br><span class="line"><span class="comment">* rw 为访问文件的互斥信号量</span></span><br><span class="line"><span class="comment">* mutex 为更新 count 的互斥信号量</span></span><br><span class="line"><span class="comment">* w 让读进程和写进程在此排队</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">semaphore rw = <span class="number">1</span>, mutex = <span class="number">1</span>, w = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">writer() &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    P(w);        <span class="comment">/* 在无读写进程请求时进入 */</span></span><br><span class="line">    P(rw);</span><br><span class="line">    写文件;</span><br><span class="line">    V(rw);</span><br><span class="line">    V(w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reader() &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        P(w);        <span class="comment">/* 在无读写进程请求时进入 */</span></span><br><span class="line">        P(mutex);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)</span><br><span class="line">            P(rw);</span><br><span class="line">        count++;</span><br><span class="line">        V(mutex);</span><br><span class="line">    读文件;</span><br><span class="line">    P(mutex);</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">        V(rw);</span><br><span class="line">    V(mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如书本上所说，大部分练习题和真题用消费者-生产者模型或读者-写者问题就能解决，但对于下述的这些问题也要熟悉。毕竟，<strong>考研复习的关键在于反复多次和全面</strong>。</p><h3 id="哲学家就餐问题"><a href="#哲学家就餐问题" class="headerlink" title="哲学家就餐问题"></a>哲学家就餐问题</h3><p>有 5 个哲学家围坐在一圆桌旁，桌中央有一盘通心，每人面前有一只空盘子，每两个人之间放一只筷子。为了吃面，每个哲学家必须拿到两只筷子，并且每个人只能直接从自己的左手边和右手边取筷子。<br>如下图所示：</p><p><img src="https://i.loli.net/2019/07/31/5d41b99547abc91998.png" alt="哲学家就餐问题"></p><p>分析：哲学家只有拿到两根筷子才可以进餐，进餐完毕后，放下筷子。定义互斥信号量数组   <code>chopstick[5] = &#123;1, 1, 1, 1, 1&#125;</code> 用于对 5 个筷子的互斥访问。哲学家按顺序编号为 0~4，哲学家 i 左边筷子的编号为 i, 右边筷子的编号为 (i+1)%5。当一名哲学家左右两边的筷子都可用时，才允许他拿起筷子。<br>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* mutex 为取筷子的互斥信号量</span></span><br><span class="line"><span class="comment">* chopstick[i] 为对筷子的互斥访问信号量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">semaphore mutex = <span class="number">1</span>;</span><br><span class="line">semaphore chopstick[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">Pi() &#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        P(mutex);</span><br><span class="line">        P(chopstick[i]);</span><br><span class="line">        P(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);</span><br><span class="line">        V(mutex);</span><br><span class="line">        吃面;</span><br><span class="line">        V(chopstick[i]);</span><br><span class="line">        V(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">疑问:</font> 这里，我有一个小小的疑问——为什么要用 <code>do-while</code> 呢？我参考了课本教材以及《现代操作系统》这两本书，书上的确都是这么用的，但是却没给出使用它的理由。按理说，在上面的伪代码中直接使用 <code>while</code> 也没问题啊！很奇怪！</p><h3 id="睡眠理发师问题"><a href="#睡眠理发师问题" class="headerlink" title="睡眠理发师问题"></a>睡眠理发师问题</h3><p>理发店里有一个理发师，一把理发专用椅子， N 个供等候顾客休息的椅子。若无顾客，理发师则睡眠。顾客到来时唤醒理发师，若理发师正在理发，新来的顾客坐在空闲的休息椅上等候；若没有可供休息的椅子，顾客离开。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* wait_count 为等待理发的顾客数</span></span><br><span class="line"><span class="comment">* customer 表示等待理发的顾客, 可以用来阻塞理发师进程</span></span><br><span class="line"><span class="comment">* baber 表示等待顾客的理发师, 可以用来阻塞顾客进程</span></span><br><span class="line"><span class="comment">* mutex 为更新 wait_count 的互斥信号量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">semaphore custmoer = <span class="number">0</span>, baber = <span class="number">0</span>, mutex = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> wait_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">baber()&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    P(custmoer);    <span class="comment">/* 看有没有顾客 */</span></span><br><span class="line">    P(mutex);</span><br><span class="line">    wait_count--;</span><br><span class="line">    V(mutex);</span><br><span class="line">    给顾客理发;</span><br><span class="line">    V(baber);     <span class="comment">/* 理发结束, 释放理发师 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">custmoer()&#123;</span><br><span class="line">    P(mutex);</span><br><span class="line">    <span class="keyword">if</span> (wait_count &lt; N) &#123;    <span class="comment">/* 看还有没有空椅子 */</span></span><br><span class="line">    wait_count++;        </span><br><span class="line">    V(mutex);</span><br><span class="line">    V(custmoer);      <span class="comment">/* 顾客在 custmoer 上等待理发 */</span></span><br><span class="line">    P(baber);</span><br><span class="line">    接受理发;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        V(mutex);       <span class="comment">/* 没空椅子了, 顾客离开 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有最后一个<strong>吸烟者问题</strong>，不过我觉得它和书本上那个 “往一个盘子里放苹果和橘子” 的问题很像，都挺简单的，这里就不多赘述了。<br><br></p><p>推荐阅读: <a href="https://jiaqiangwu.top/2019/08/01/PV%E6%93%8D%E4%BD%9C%E7%9C%9F%E9%A2%98%E6%BC%94%E7%BB%83/#.XUMFUKECIv8.link">PV操作真题演练</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高数必记的函数图像</title>
      <link href="/2019/07/28/%E9%AB%98%E6%95%B0%E5%BF%85%E8%AE%B0%E7%9A%84%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F/"/>
      <url>/2019/07/28/%E9%AB%98%E6%95%B0%E5%BF%85%E8%AE%B0%E7%9A%84%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" async  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"></script><p><strong>引言</strong>：本文的五个函数图像，是宇哥要求我们必须得记住的。我把它们各自的周长、面积等特性也附在一旁，以供复习。</p><span id="more"></span><h2 id="心形线"><a href="#心形线" class="headerlink" title="心形线"></a>心形线</h2><p><img src="https://i.loli.net/2019/03/30/5c9ec4428da5d.png" alt="心形线加"><br>极坐标方程: \( ; r &#x3D; a,(1+\cos \theta), , \theta \in [, 0, \pi ,] \)</p><p>周长: \( ; \frac{1}{2} L &#x3D; 4a \)</p><p>面积: \( ; \frac{1}{2}S &#x3D; \frac{3}{4} , \pi a^2 \)<br>注: 图中 a &#x3D; 1, \( \theta \in [, 0, 2\pi ,] \)<br><br></p><p><img src="https://i.loli.net/2019/03/30/5c9ec5007aade.png" alt="心形线减"><br>极坐标方程: \( ; r &#x3D; a,(1- \cos \theta),,  \theta \in [, 0, \pi ,] \)</p><p>周长: \( ; \frac{1}{2}L &#x3D; 4a \)</p><p>面积: \( ; \frac{1}{2}S &#x3D; \frac{3}{4} , \pi a^2 \)<br>注: 图中 a &#x3D; 1, \(, \theta \in [, 0, 2\pi ,] \)<br><br></p><hr><h2 id="双扭线"><a href="#双扭线" class="headerlink" title="双扭线"></a>双扭线</h2><p><img src="https://i.loli.net/2019/03/30/5c9ec4cfab068.png" alt="双扭线"><br>极坐标方程:\(; \rho ^2 &#x3D; a^2 \cos 2\theta, , \theta \in [, 0, \frac{\pi}{4},]  \)</p><p>直角坐标方程: \(; (x^2+y^2)^2 &#x3D; a^2(x^2-y^2)\)</p><p>周长: <img src="https://i.loli.net/2019/03/30/5c9edc5934868.png" alt="哭了"><div style="height: 20px;  text-align: center; line-height: 0px; color: #F00; ">周长我求不出来啊,哪位老哥会求，在下面留言告诉我吧~</div></p><p>面积: \(; \frac{1}{4}S &#x3D; \frac{1}{4}a^2 \)<br>注: 图中 a &#x3D; 1, \(, \theta \in [, 0, 2\pi ,] \)<br><br></p><hr><h2 id="摆线"><a href="#摆线" class="headerlink" title="摆线"></a>摆线</h2><p><img src="https://i.loli.net/2019/03/30/5c9ec53b4226f.png" alt="摆线"><br>参数方程: $$; \begin{cases}<br>x &#x3D; r,(t-\sin t), \ y &#x3D; r,(1-\cos t),  \end{cases} \quad  t \in [, 0, 2 \pi ,]$$</p><p>一拱的周长: \(; L &#x3D; 8 , r \)</p><p>一拱的面积: \(; S &#x3D; 3 , \pi r^2 \)</p><p>质心: \( x &#x3D; \pi r, y &#x3D; \frac{5}{6} , r \)</p><p>质心: \( x &#x3D; \pi r, y &#x3D; \frac{4}{3} , r \)<br>注: 图中 r &#x3D; 1，\(; t \in [, -2\pi, 2\pi ,]; \)<br><br></p><hr><h2 id="星形线"><a href="#星形线" class="headerlink" title="星形线"></a>星形线</h2><p><img src="https://i.loli.net/2019/03/30/5c9ec5603db6e.png" alt="星形线"><br>直角坐标方程: \(; x^{\frac{2}{3}}+y^{\frac{2}{3}}&#x3D;a^{\frac{2}{3}} ;\)</p><p>参数方程:$$; \begin{cases} x &#x3D; a , {(\cos t)}^3, \ y &#x3D; a ,{(\sin t)}^3, \end{cases} \quad t \in [, 0, \frac{\pi}{2} ,] ;$$</p><p>周长:\(; \frac{1}{4} L &#x3D; \frac{3}{2} a ;\)</p><p>面积:\(; \frac{1}{4}S &#x3D; \frac{3}{32} \pi a^2 ;\)<br>注: 图中 a &#x3D; 1, \( t \in [, 0, , 2\pi ,] \)<br><br></p><hr><p>事实证明，Mathematica 在画图这方面还是比 Matlab 要舒服很多的。这个软件上手很快，学个几分钟，一般的函数图像就完全可以搞定了！哈哈！<br>还有一点，这几个函数，我都只写了它们的部分表现形式，并没有把各自的 直角坐标方程、极坐标方程以及参数方程 都写出来，是因为考题中出现的也就是我给出的这几种形式。</p><br>推荐阅读: [记不住的高数公式](https://jiaqiangwu.top/2019/03/05/%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/)]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记不住的高数公式</title>
      <link href="/2019/07/25/%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/"/>
      <url>/2019/07/25/%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" async  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"></script><p>这你都记不住？今晚给我复习到两点！</p><span id="more"></span><h2 id="基本常识"><a href="#基本常识" class="headerlink" title="基本常识"></a>基本常识</h2><ul><li>不等式<ul><li><p>\( |,,|, a ,|, - , |, b ,|,,| \leq |, a \pm b ,| \leq |,a ,| + |, b ,| \)</p></li><li><p>\( \frac{2}{\frac{1}{a}+\frac{1}{b}}, \leq  , \sqrt{ab} , \leq , \frac{a+b}{2}, \leq , \sqrt{\frac{a^2+b^2}{2}} \)</p></li><li><p>\( \sqrt[3]{abc}, \leq , \frac{a+b+c}{3}, \leq , \frac{a^2+b^2+c^2}{3} \)</p></li><li><p>\( \sqrt[n]{a_1 a_2 \cdots a_n}, \leq , \frac{a_1+a_2+ \cdots + a_n}{n} \)</p></li></ul></li></ul><br/><ul><li><p>立方公式</p><ul><li><p>\( a^3+b^3 &#x3D; (a+b),(a^2-ab+b^2) \)</p></li><li><p>\( a^3-b^3 &#x3D; (a-b),(a^2+ab+b^2) \)</p></li><li><p>\( (a - b)^3 &#x3D; a^3 - b^3 - 3a^2b + 3ab^2 \)</p></li><li><p>$$ (a+b)^n &#x3D; C_n^k , a^0 b^n + C_n^1 , a^1 b^{n-1} + C_n^2 , a^2 b^{n-2} + \cdots + C_n^n , a^n b^0 &#x3D; \sum_{k&#x3D;0}^n ; C_n^k , a^k b^{n-k} $$</p></li><li><p>$$ C_n^k &#x3D; \frac{n!}{k! , (n-k)!} $$</p> <br></li></ul></li><li><p>三角变换</p><ul><li>$$ \cos 2\alpha &#x3D; \cos ^2 \alpha - \sin ^2 \alpha &#x3D; 2 \cos ^2 \alpha - 1 &#x3D; 1 - 2 \sin ^2 \alpha $$</li><li>$$ \tan 2\alpha &#x3D; \frac{2\tan \alpha}{1- \tan ^2 \alpha} $$</li><li>$$ \sin ^2 \alpha &#x3D; \frac{1- \cos 2\alpha}{2} $$</li><li>$$ \cos ^2 \alpha &#x3D; \frac{1+ \cos 2\alpha}{2} $$</li><li>$$ \tan ^2 \alpha &#x3D; \frac{1- \cos 2\alpha}{1+ \cos 2\alpha} $$</li></ul></li><li><p>分子有理化</p><ul><li>\( \sqrt[]{a} - \sqrt[]{b} &#x3D; \frac{a-b}{\sqrt[]{a}+\sqrt[]{b}} \)</li></ul></li></ul><p><a href="#%E5%BE%AE%E7%A7%AF%E5%88%86%E9%83%A8%E5%88%86">微积分部分</a></p><h2 id="极限部分"><a href="#极限部分" class="headerlink" title="极限部分"></a>极限部分</h2><ul><li><p>常用结论</p><ul><li>$$ x&gt;0 ,时,; \frac{x}{1+x} &lt; \ln(1+x) &lt; x $$</li><li>$$ x\in(0,\frac{\pi}{2}),时,;\sin{x}&lt;x&lt;\tan{x} $$</li><li>$$ n \to \infty , 时, , \ln ^\alpha n ,&lt;&lt;, n^\beta ,&lt;&lt;, a^n ,&lt;&lt;, n! ,&lt;&lt;, n^n,,(, \alpha &gt; 0,\beta &gt; 0, a &gt; 1,)  $$</li><li>$$ \frac{1}{x+1} &lt; \ln,(1+ \frac{1}{x}) &lt; \frac{1}{x}  $$</li><li>$$ e^x &gt; x + 1 $$</li><li>$$ x-1 &gt; \ln , x $$</li></ul></li><li><p>常用的几个极限</p><ul><li>\( \lim_{x \to 0} \frac{\sin}{x} &#x3D; 1 \)</li><li>\( \lim_{x \to 0} (1+x)^{\frac{1}{x}} &#x3D; e \)</li><li>\( \lim_{n \to +\infty} \sqrt[n]{n} &#x3D; 1 \)</li><li>\( \lim_{n \to +\infty}\sqrt[n]{a} &#x3D; 1 ; (常数 a &gt; 0)\) <br/></li></ul></li><li><p>等价无穷小</p><ul><li><p>\(x \to 0\) 时,</p></li><li><p>\(\sin{x}\backsim x\),&amp;nbsp;&amp;nbsp;\(\tan{x}\backsim x\),&amp;nbsp;&amp;nbsp;\(1-\cos{x} \backsim \frac{1}{2}x^2\),&amp;nbsp;&amp;nbsp;\(\arcsin x \backsim x\),&amp;nbsp;&amp;nbsp;\(\arctan x \backsim x\)</p></li><li><p>\(e^x - 1 \backsim x\)</p></li><li><p>\(\ln({1+x})\backsim x\) &amp;nbsp;&amp;nbsp;注: 此公式还有一种形式 \(u\to1时,; \ln{u}\backsim (u-1)\)</p></li><li><p>\(a^x-1\backsim x\ln a\)</p></li><li><p>\((1+x)^a-1 \backsim ax\)</p></li><li><p>\(x^m + x^k \backsim x^m ; (常数 k &gt; m &gt; 0)\)</p></li><li><p>\(x-\ln{(1+x)} \backsim \frac{1}{2}x^2\)</p></li><li><p>\( x + \sin{x} \backsim 2x \) </p></li><li><p>注:下面四个公式之间可以互相加减，以变换成新的等价代换公式</p></li><li><p>\(x-\sin{x} \backsim \frac{1}{6}x^3\)</p></li><li><p>\(\arcsin{x}-x \backsim \frac{1}{6}x^3\)</p></li><li><p>\(x-\tan{x} \backsim -\frac{1}{3}x^3\)</p></li><li><p>\(\arctan{x}-x \backsim -\frac{1}{3}x^3\)</p> <br/></li><li><p>若 \(\lim{u^v}\)是\(1^{\infty}\) 型极限, 则 \(\lim{u^v}&#x3D;e^A\), 其中 \(A&#x3D;\lim{v(u-1)}\)</p> <br/></li></ul></li><li><p>\(\color{red}{几个常用函数的 x&#x3D;0 处展开的佩亚诺余项公式}\)</p><ul><li>$$e^x&#x3D;1+x+\frac{1}{2!}x^2+\cdots+\frac{1}{n!}x^n+o(x^n)$$</li><li>$$\sin{x}&#x3D;x-\frac{1}{3!}x^3+\cdots+\frac{(-1)^n}{(2n+1)!}x^{2n+1}+o(x^{2n+2})$$</li><li>$$\cos{x}&#x3D;1-\frac{1}{2!}x^2+\cdots+\frac{(-1)^n}{2n!}x^{2n}+o(x^{2n+1})$$</li><li>$$\ln{(1+x)}&#x3D;x-\frac{x^2}{2}+\frac{x^3}{3} - \cdots+(-1)^{n-1}\frac{x^n}{n}+o{(x^n)}$$</li><li>$$(1+x)^m&#x3D;1+mx + \frac{m(m-1)}{2!}x^2 + \cdots + \frac{m(m-1)\cdots(m-n+1)}{n!}x^n + o(x^n)$$</li></ul></li></ul><hr><h2 id="微积分部分"><a href="#微积分部分" class="headerlink" title="微积分部分"></a><span id="微积分部分">微积分部分</span></h2><ul><li><p>常用结论</p><ul><li>$$y’’,&#x3D;,\frac{d^2y}{dx^2},&#x3D;,\frac{d}{dx}(\frac{dy}{dx}),&#x3D;,\frac{d}{dt}{\frac{\frac{dy}{dt}}{\frac{dx}{dt}}}\frac{dx}{dt}$$</li><li>$$ (u(x)^{v(x)})^{‘}_x,&#x3D;,u(x)^{v(x)},[,\frac{v(x)}{u(x)},u^{‘}(x)+v^{‘}(x)\ln{u(x)},] $$</li><li>$$\int_{-\infty}^{+\infty}e^{-x^2},dx ,&#x3D;, 2\int _0^{+\infty}e^{-x^2},dx &#x3D; \sqrt{\pi}$$</li><li>$$\int_0^{2\pi}{\cos\theta ,d\theta},&#x3D;,\int_0^{2\pi}\sin\theta,d\theta,&#x3D;,0$$ <br/></li></ul></li><li><p><strong>泰勒公式</strong><br>$$ f(x)&#x3D;f(x_0)+\frac{f^{‘}(x_0)}{1!}(x-x_0)+\frac{f^{‘’}(x_0)}{2!}(x-x_0)^2+ \cdots + \frac{f^{(n)}(x_0)}{n!}(x-x_0)^n + \color{red}{\frac{f^{n+1}(\xi)}{(n+1)!}(x-x_0)^{n+1}},; 其中, \xi \in (x_0,;x)$$<br>$$ f(x) &#x3D; \sum_{n&#x3D;0}^{\infty}, \frac{f^{(n)}(0)}{n!} , x^n $$</p></li><li><p>基本初等函数的导数公式</p><ul><li>$$(a^x)’&#x3D;a^x\ln{a}$$</li><li>$$(\log_ax)’&#x3D;\frac{1}{x\ln{a}},(a&gt;0且a\neq1)$$</li><li>$$(\tan{x})’&#x3D;(\sec{x})^2$$</li><li>$$(\cot{x})’&#x3D;-(\csc{x})^2$$</li><li>$$(\sec{x})’&#x3D;\sec{x}\tan{x}$$</li><li>$$(\csc{x})’&#x3D;- , \csc{x} , \cot{x}$$</li><li>$$(\arcsin{x})’&#x3D;\frac{1}{\sqrt[]{1-x^2}}$$</li><li>$$(\arccos{x})’&#x3D;\frac{-1}{\sqrt[]{1-x^2}}$$</li><li>$$(\arctan{x})’&#x3D;\frac{1}{1+x^2}$$</li><li>$$ [, \ln {(x + \sqrt[]{1+x^2})} ,]’ &#x3D; \frac{1}{\sqrt[]{1+x^2}} $$ <br/></li></ul></li><li><p>\(n阶导数公式;\) $$ (uv)^{(n)} &#x3D; \sum_{k&#x3D;0}^{n}C_n^ku^{(n-k)}v^{(k)}, ; 其中 ; C_n^k &#x3D; \frac{n!}{k!(m-k)!}$$</p><ul><li>$$ (e^{ax})^{(n)} &#x3D; a^n(e^{ax}) $$</li><li>$$ \sin(ax)^{(n)} &#x3D; a^n\sin(\frac{n\pi}{2} + ax) $$</li><li>$$ \cos(ax)^{(n)} &#x3D; a^n\cos(\frac{n\pi}{2} + ax) $$</li><li>$$ {\ln (1+x)}^{(n)}&#x3D; \frac{(-1)^{n-1} (n-1)!}{(1+x)^n} $$</li><li>$$ { (1+x^{\alpha}) }^{(n)} &#x3D; \alpha(\alpha - 1) \cdots  (\alpha - n + 1)(1+x)^{\alpha - n} $$</li><li>$${ \frac{1}{x+a} }^{(n)} &#x3D; (-1)^n \frac{n!}{(x+a)^(n+1)} $$ <br/></li></ul></li><li><p>曲率计算公式</p><ul><li>$$曲率 \quad k &#x3D; \frac{\mid y^{‘’} \mid}{((1+(y^{‘})^2)^{3&#x2F;2} }$$</li><li>$$曲率半径\quad R &#x3D; \frac{1}{k}$$</li></ul></li></ul><br/>- 基本积分公式   - $$ \int x^a\,dx = \frac{1}{a+1}x^{a+1} + C (a \neq -1) $$   - $$ \int a^x\,dx=\frac{a^x}{\ln a} + C(a > 0, a \neq 1) $$   - $$ \int \tan{x}\,dx = -\ln{\mid \, \cos{x} \, \mid}+C$$   - $$ \int \sec{x}\,dx = \ln{\mid \, \sec{x}+\tan{x} \, \mid}+C$$   - $$ \int \cot{x}\,dx = \ln{\mid \, \sin{x} \, \mid}+C$$   - $$ \int \csc^2{x}\,dx = -\cot{x}+C$$   - $$ \int \ln\,\csc{x}\,dx = \ln{\mid \csc{x} - \tan{x} \mid} = \ln{\mid \tan{\frac{x}{2}} \mid} $$   - $$\int \frac{1}{a^2+x^2}\,dx=\frac{1}{a}{\arctan\frac{x}{a}}+C(a \neq 0)$$   - $$\int \frac{1}{\sqrt{a^2-x^2}}\,dx=\arcsin \frac{x}{a}+C$$   - $$\int \frac{1}{a^2-x^2}\,dx=\frac{1}{2a}\ln \mid  \, \frac{x-a}{x+a}+C \, \mid(a \neq 0)$$   - $$\int \frac{1}{\sqrt{x^2 \pm a^2}}\,dx=\ln{\mid \, x+\sqrt{x^2 \pm a^2}+C \, \mid}$$   - $$ \int \, \sqrt[]{a^2-x^2} \, dx = \frac{x}{2} \sqrt[]{a^2-x^2} + \frac{a^2}{2} \arcsin \frac{x}{a} $$   - $$ \int \, xe^{ax}\, dx = \frac{1}{a^2}(ax-1)e^{ax} $$   <br/><ul><li><p>定积分的应用</p><ol><li>$$极坐标曲线; r &#x3D; r(\theta); 介于两射线;\theta&#x3D;\alpha;和;\theta&#x3D;\beta,(,0&lt;\beta-\alpha&lt;2\pi,)之间的曲边扇形的面积;$$<br> $$A &#x3D; \frac{1}{2}\int_{\alpha}^{\beta}r^2(\theta),d\theta$$</li><li>$$参数方程曲线;\lbrace_{y&#x3D;y(t)}^{x&#x3D;x(t)},;\alpha\leq t\leq \beta; 的弧长;s&#x3D;\int_{\alpha}^{\beta}\sqrt{x^{‘2}(t)+y^{‘2}(t)},dt$$</li><li>$$直角坐标;y&#x3D;y(x),a\leq x\leq b;的弧长;s&#x3D;\int_{a}^{b}\sqrt{1+y^{‘2}(x)},dx$$</li><li>$$极坐标曲线;r&#x3D;r(\theta),\alpha\leq \theta \leq \beta;的弧长;s&#x3D;\int_{\alpha}^{\beta}\sqrt{r^2(\theta)+r^{‘2}(\theta)},d\theta$$</li><li>$$曲线;y&#x3D;f(x);与;x&#x3D;a,,x&#x3D;b,,x;轴围成的曲边梯形绕;{\color{red}{x}};轴旋转一周所称的旋转体体积$$<br> $$V&#x3D;\pi\int_{a}^{b}f^2(x),dx,;a &lt; b$$</li><li>$$曲线;y&#x3D;f(x);与;x&#x3D;a,,x&#x3D;b,,x;轴围成的曲边梯形绕;{\color{red}{y}};轴旋转一周所称的旋转体体积$$<br> $$V&#x3D;2\pi\int_{a}^{b}xf(x),dx,;a &lt; b$$</li><li>$$在区间;[a,b];上的曲线;y&#x3D;f(x);的弧段绕;x;轴旋转一周所成的旋转曲面面积$$<br> $$ S&#x3D;2\pi\int_{a}^{b}\mid y \mid\sqrt{1+f^{‘2}(x)},dx,,a&lt;b $$<br> $$若该曲线由参数方程 ;x&#x3D;x(t),,y&#x3D;y(t),\alpha \leq t \leq \beta ; 给出, 则只要做类似弧长公式的那种替换即可$$ <br/></li></ol></li><li><p>\( \color{red}{柯西不等式} \)<br>$$设,f(x),与,g(x),在闭区间, [a,, b], 上连续, 则有,[,\int_{a}^{b}f(x)g(x),]^2 \leq,\int_{a}^{b}f^2{(x)},dx , \int_{a}^{b}g^2{(x)},dx$$</p><br/></li><li><p>用定义判断函数可微<br>$$\lim_{\Delta x \to 0,, \Delta y \to 0}\frac{[, f(x_0+\Delta x,, y_0 + \Delta y)-f(x_0,,y_0) ,]-[, f^{‘}_x(x_0,, y_0)\Delta x + f^{‘}_y(x_0,,y_0)\Delta y ,]}{\rho}&#x3D;0,,其中, \rho &#x3D; \sqrt{(\Delta x)^2 + (\Delta y)^2}$$</p><br></li><li><p>\( \color{red}{几个常用的麦克劳林展开式} \)</p><ul><li>$$\frac{1}{1-x}&#x3D;1+x+x^2+\cdots+x^n+\cdots &#x3D; \sum_{n&#x3D;0}^{\infty},x^n , ,x \in (-1,1)$$</li><li>$$\frac{1}{1+x}&#x3D;1-x+x^2+\cdots+(-1)^n , x^n+\cdots &#x3D; \sum_{n&#x3D;0}^{\infty},(-1)^n,x^n , ,x \in (-1,1)$$ <br></li></ul></li><li><p>\( \color{red}{格林公式} \)</p><ul><li>$$ 设闭区域 D 由分段光滑曲线 L 围成, P(x, y) 及 Q(x,y)在 D 上有连续一阶偏导数,则$$<br> $$ \oint_L , Pdx + Qdy &#x3D; \iint_D(,\frac{\partial Q}{\partial x} - \frac{\partial P}{\partial y},),dxdy,$$<br> $$其中 L 是 D 的取正向的边界曲线.(L 的正向是指有人沿着 L 的某一方向前进时, 区域 D 始终在他左侧)$$</li></ul></li></ul><br><ul><li>\( \color{red}{斯托克斯公式} \)<ul><li>$$ 设 \Gamma 为分段光滑曲线的空间有向闭曲线, \Sigma 是以 \Gamma 为边界的分段光滑有向曲面, $$<br> $$ \Gamma 的方向与 \Sigma 符合右手法则, P,Q,R 在 \Sigma 上有连续一阶偏导数, 则 $$<br> $$ \oint_\Gamma , Pdx + Qdy + Rdz &#x3D; \iint_\Sigma , (, \frac{\partial R}{\partial y} - \frac{\partial Q}{\partial z},),dydz  + (, \frac{\partial P}{\partial z} - \frac{\partial R}{\partial x}),dzdx + (, \frac{\partial Q}{\partial x} - \frac{\partial P}{\partial y},),dxdy $$</li></ul></li></ul><br><ul><li>高斯公式<ul><li>$$ 设空间闭区域 \Omega 是由分片光滑的闭曲面 \Sigma 所围成,$$<br> $$函数 P(x,y,z), Q(x,y,z), R(x,y,z) 在 \Omega 上有一阶连续偏导数, 闭曲面 \Sigma 取外侧, 则$$<br> $$ \iint_\Sigma , P ,dydz + Q ,dzdx + R ,dxdy &#x3D; \iiint_\Omega(, \frac{\partial P}{\partial x} + \frac{\partial Q}{\partial y} + \frac{\partial R}{\partial z} ,), dV $$</li></ul></li></ul><hr><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 上述公式或者结论在高数复习的过程中无所不在。所以，这些公式、结论也都是我们必须得记会的。事实上，文中所记载的这些公式并不齐全，我只是将比较常用的几个贴了上来。此外，至于 “向量代数与空间解析几何” 和 “常微分方程” 这两部分，我并没有给出任何公式或是结论————这两章的内容不能说简单，但是与它们有关的公式不多，多做几个题目，基本就记住啦。<br><br></p><p>推荐阅读: <a href="https://jiaqiangwu.top/2019/03/29/%E9%AB%98%E6%95%B0%E5%BF%85%E8%AE%B0%E7%9A%84%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F/">高数必记的五个函数图像</a></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>处理机与CPU</title>
      <link href="/2019/07/20/%E5%A4%84%E7%90%86%E6%9C%BA%E4%B8%8ECPU/"/>
      <url>/2019/07/20/%E5%A4%84%E7%90%86%E6%9C%BA%E4%B8%8ECPU/</url>
      
        <content type="html"><![CDATA[<p>在复习进程管理这一章时，书上一会写处理机，一会写 CPU 的，我有些迷惑。<br>遂查阅资料以记之。</p><span id="more"></span><h2 id="处理机"><a href="#处理机" class="headerlink" title="处理机"></a>处理机</h2><blockquote><p>处理机是计算机系统中存储程序和数据，并按照程序规定的步骤执行指令的部件。程序是描述处理机完成某项任务的指令序列。指令则是处理机能直接解释、执行的信息单位。处理机包括中央处理器(CPU)，主存储器,输入&#x2F;输出接口。处理机加接外围设备就构成完整的计算机系统。简单来说，处理机指的是硬件，它包含 CPU 在内。</p></blockquote><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><blockquote><p>中央处理器(CPU)是一块超大规模的集成电路，是一台计算机的运算核心(Core)和控制核心(Control Unit)。它的功能主要是解释计算机指令以及处理计算机软件中的数据。计算机的可编程性主要是指对中央处理器的编程。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 处理机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用gdb调试程序</title>
      <link href="/2019/06/20/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95%E7%A8%8B%E5%BA%8F/"/>
      <url>/2019/06/20/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>在 Linux 下写 C 语言程序，不会 gdb 可不行，这篇文章就来教<s>大家</s>我自己如何使用 gdb 来调试 C 程序。后期还会再写一篇关于 gcc 的命令参数的文章，那就比较简单了。</p><span id="more"></span><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>开始调试之前，必须用程序中的调试信息编译要调试的程序。这样，gdb 才能够调试所使用的变量、代码行和函数。即，使用 ‘-g’ 选项来编译程序：</p><blockquote><p>gcc -g main.c -o main</p></blockquote><h2 id="运行-gdb"><a href="#运行-gdb" class="headerlink" title="运行 gdb"></a>运行 gdb</h2><p>在 shell 中，可以使用 <code>gdb</code> 命令并指定程序名作为参数来运行 gdb，例如 <code>gdb main</code>；或者<strong>在 gdb 中</strong>，可以使用 <code>file</code> 命令来装入要调试的程序，例如 <code>file main</code>。<br>这两种方式都假设你是在包含程序的目录中执行命令。装入程序之后，可以用命令 <code>run</code> 来启动程序。</p><h2 id="调试会话示例"><a href="#调试会话示例" class="headerlink" title="调试会话示例"></a>调试会话示例</h2><p>如果一切正常，程序将执行到结束，返回 gdb 程序。如果出现错误的话，gdb 会中断程序，从而可以让我们检查程序的状态。<br>示例如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">wib</span><span class="params">(<span class="type">int</span> no1, <span class="type">int</span> no2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result, diff;</span><br><span class="line">  diff = no1 - no2;</span><br><span class="line">  result = no1 / diff;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> value, div, result, i, total;</span><br><span class="line">  value = <span class="number">10</span>;</span><br><span class="line">  div = <span class="number">6</span>;</span><br><span class="line">  total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    result = wib(value, div);</span><br><span class="line">    total += result;</span><br><span class="line">    div++;</span><br><span class="line">    value--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d wibed by %d equals %d\n&quot;</span>, value, div, total);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序将进行 10 次 for 循环，使用 <strong>wib()</strong> 函数计算出累积值，最后打印出结果。下面我们就来试一试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim main.c </span><br><span class="line">gcc -g main.c -o main</span><br><span class="line">gdb main    /* 这条命令用来启动可执行文件 main */</span><br></pre></td></tr></table></figure><p>这个时候，我们使用 <code>run</code> 命令运行程序会产生以下消息:<br><img src="https://i.loli.net/2020/12/20/QibMoPzRnDZm2XB.png" alt="gdb main"></p><p>该消息指出在程序第 7 行发生一个算术异常，可以看到它打印了一行的代码以及 wib() 函数的自变量值。要查看第 7 行前后的其它代码，可以使用 <code>list</code> 命令，它会打印前 10 行代码，再次输入 <code>list</code>（或者按回车重复上一条命令）将列出程序的下 10 行。</p><p>要查看变量的值，可以使用 <code>print</code> 命令并指定变量名。例如:<br><img src="https://i.loli.net/2019/06/26/5d132132c538479358.png" alt="图 2"></p><p>可以看到变量 no1 等于 8，变量 diff 等于 0。根据这些值和第 7 行中的语句，我们可以推断出算术异常是由除数为 0 的运算造成的。<br>接下来，我们使用 <code>continue</code> 命令（或简写为 <strong>c</strong>）来让程序继续执行，直到结束。</p><p><img src="https://i.loli.net/2019/06/26/5d1321430f88455084.png" alt="图 3"></p><h2 id="使用断点"><a href="#使用断点" class="headerlink" title="使用断点"></a>使用断点</h2><p>为了查看在 <strong>main()</strong> 中发生了什么事情，我们可以在程序代码中的某一特定行或函数中设置断点，这样程序会在遇到断点时中断执行。可以使用命令 <code>break main</code> 在进入 <strong>main()</strong> 函数时设置断点，或者可以指定其它任何函数名来设置断点。然而，我们只希望在调用 <strong>wib()</strong> 函数之前中断执行。<code>list main</code> 命令将打印从 <strong>main()</strong> 函数开始的源码清单，再次按回车将显示第 20 行上的 <strong>wib()</strong> 函数调用。</p><p>如下图所示：</p><p><img src="https://i.loli.net/2020/12/20/9oy4vx3mjuwa68s.png" alt="list main"></p><p>假如我们要在第 20 行上设置断点，只需输入 <code>break 21</code> 即可。</p><p><img src="https://i.loli.net/2020/12/20/QqvHSTRGBaDIx7y.png" alt="break 20"></p><p>设置完断点后，我们可以使用 <code>run</code> 命令来重新运行程序，直到 gdb 中断为止。</p><p><img src="https://i.loli.net/2020/12/20/wYA7h65MZFjB8WG.png" alt="重新 run"></p><p>我们可以使用 <code>info locals</code> 命令来显示程序第一次遇到断点时，各个变量的值。（当然，也可以使用 <code>pirnt 变量名</code> 的方式，稍微麻烦些）</p><p><img src="https://i.loli.net/2020/12/20/P2rybh4JmodtTaO.png" alt="info locals"></p><p>输入 <code>continue</code> 命令继续执行，直到程序下一次遇到断点。</p><p><img src="https://i.loli.net/2020/12/20/OfTNZFDz3mtMelV.png" alt="vmplayer_1wX1oNPq1o.png"></p><p>与其再次继续，还不如使用 <code>next </code>命令单步调试程序，以查看变量 <strong>value</strong> 和 <strong>div</strong> 是如何改变的。</p><p>可以从下图中看到，<strong>div</strong> 自增，<strong>value</strong> 自减。</p><p><img src="https://i.loli.net/2020/12/20/r5sIBKVZbR2qm7U.png" alt="next"></p><p>继续 next，再次遇到断点时，我们使用 info locals 查看一下变量的值。</p><p><img src="https://i.loli.net/2020/12/20/6C4MazeqgXtJpGZ.png" alt="继续 next"></p><p>可以看到，此时 div 的值与 value 的值相等，继续执行，就可以看到 <strong>算术异常</strong> 的提示。</p><p><img src="https://i.loli.net/2020/12/20/KwHXCBRmhlsQzIL.png" alt="算术异常"></p><h2 id="断点和观察点"><a href="#断点和观察点" class="headerlink" title="断点和观察点"></a>断点和观察点</h2><h3 id="使用断点-1"><a href="#使用断点-1" class="headerlink" title="使用断点"></a>使用断点</h3><p>由于我们想要知道在调用 wib() 函数之前 value 什么时候等于 div，因此在上一示例中我们在第 20 行中设置断点。我们必须继续执行两次程序才会发生这种情况。</p><p>事实上，只要在断点上设置一个条件就可以使 gdb 只在 value 与 div 相等时暂停，如下所示。</p><p><img src="https://i.loli.net/2020/12/20/w6ViNqD5C7LoW1O.png" alt="condition"></p><p>这里，<strong>condition</strong> 后面的数字 <strong>1</strong>，指的是 <strong>1 号断点</strong>。我们在执行完 break 20 后的输出提示中也能看到 1 号断点的相关信息。</p><p>此外，这两条命令还可以合成一条写：<strong>break 20 if value&#x3D;&#x3D;div</strong>。</p><p>使用 <strong>run</strong> 命令再次执行程序，直到中断为止，查看一下 value 是否等于 div。</p><p><img src="https://i.loli.net/2020/12/20/DHcdqRCh4sSZ7ov.png" alt="run"></p><p>要查看当前定义了哪些断点及其条件，可以用 <code>info break</code>命令。</p><p>可以用 <code>disable 1</code>、<code>enable 1</code>、<code>delete 1</code> 来禁用、启用和删除断点。例如， <strong>disable 1</strong> 将禁用我们之前用 <strong>break 20</strong> 所设置的 1 号断点。</p><p><img src="https://i.loli.net/2020/12/20/CDec4uthpoX1lyj.png" alt="info break"></p><h3 id="使用观察点"><a href="#使用观察点" class="headerlink" title="使用观察点"></a>使用观察点</h3><p>如果我们对 <strong>value</strong> 什么时候变得与 div 相等更感兴趣，那么可以使用另一种断点，称作 <strong>监视</strong>。当指定表达式的值改变时，监视点将中断程序执行，但必须在表达式中所使用的变量在作用域中时设置监视点。要获取作用域中的 value 和 div，可以在 main 函数上设置断点，然后运行程序，当遇到 main() 断点时设置监视点。</p><p><img src="https://i.loli.net/2020/12/20/BJZhyImTEYc1XW2.png" alt="重新调试"></p><p>要了解 div 何时更改，可以使用 <code>watch div</code>，但由于要在 div 等于 value 时中断，所以还要设置一下条件。继续执行，当条件 <strong>div&#x3D;&#x3D;value</strong> 为真时，程序中断，此时我们再查看一下变量的值，可以看到两个变量的值确实是相等的。</p><p><img src="https://i.loli.net/2020/12/20/gCjzKn9aEYAywXp.png" alt="watch"></p><p>和之前一样，我们也可以用 <code>info watch</code> 命令来查看当前已经设置的观察点。其他的 enable、disable、delete 也都是类似的。</p><p><img src="https://i.loli.net/2020/12/20/EpBc54DzLCOKymF.png" alt="info watch"></p><h2 id="堆栈跟踪"><a href="#堆栈跟踪" class="headerlink" title="堆栈跟踪"></a>堆栈跟踪</h2><p>程序 <strong>调用堆栈</strong> 是当前函数之前的所有已调用函数的列表（包括当前函数）。每个函数及其变量都被分配了一个 <strong>帧</strong>，<strong>最近调用的函数在 0 号帧中</strong>（底部帧）。打印堆栈，可使用命令 <code>bt</code>（backtrace 的缩写）。</p><p><img src="https://i.loli.net/2020/12/20/746tCaVX2WsxrPd.png" alt="bt"></p><p>此结果显示了在 main() 的第 20 行中调用了函数 wib()（只要使用 <strong>list 20</strong> 就能证实这一点），而且 wib() 在 0 号帧中，main() 在 1 号帧中。由于 wib() 在 0 号帧中（最近调用的函数），那么它就是执行程序时发生算术错误的函数。</p><p>实际上，发出 <strong>info locals</strong> 命令时，gdb 会打印出当前帧中的局部变量，缺省情况下，这个帧中的函数就是被中断的函数（0 号帧）。</p><p><img src="https://i.loli.net/2020/12/20/k8YCWrSgaiUm9HR.png" alt="info locals in frame 0"></p><p>可以使用命令 <code>frame</code> 打印当前帧。</p><p>要查看 main 函数（在 1 号帧中）中的变量，可以发出 <strong>frame 1</strong> 切换到 1 号帧，然后使用 <strong>info locals</strong> 命令。</p><p><img src="https://i.loli.net/2020/12/20/fNUQXGHI18jzBhw.png" alt="frame"></p><p>在程序运行时，还可以使用 <code>set </code> 命令修改变量的值。在 gdb 下再次运行程序，使用命令 <strong>break 7 if diff&#x3D;&#x3D;0</strong> 在第 7 行（将在此处计算结果）设置条件断点，然后运行程序。当 gdb 中断执行时，可以将 <strong>diff</strong> 设置成非零值，使程序继续运行直至结束。</p><p><img src="https://i.loli.net/2020/12/20/IytoqrbgJGwjW6d.png" alt="set"></p><hr><p>本文只介绍了很小一部分 gdb 的功能，还有待继续学习。</p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab中的矩阵运算</title>
      <link href="/2019/06/16/Matlab%E4%B8%AD%E7%9A%84%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/"/>
      <url>/2019/06/16/Matlab%E4%B8%AD%E7%9A%84%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<div class="aplayer" data-id="707761617" data-server="netease" data-type="playlist" data-mode="order"></div><p>Matlab 矩阵运算命令总结。</p><span id="more"></span><p>disp(sprintf(‘2 decimals: %0.2f’, a))</p><p>v &#x3D; 1:0.1:2 起点为 1，步长为 0.1，终点为 2<br>结果为 1 行 11 列的矩阵</p><p>v &#x3D; 1:6 默认步长是 1</p><p>ones(2, 3) 生成一个 2 行 3 列的元素都是 1 的矩阵<br>zeros(2, 3) 生成一个 2 行 3 列的元素都是 0 的矩阵<br>rand(2, 3) 生成一个 2 行 3 列的元素都是随机数的矩阵<br>randn(1, 3) 生成一个 1 行 3 列的元素都是高斯随机数的矩阵(高斯随机数：平均值为 0，方差或标准差为 1)</p><p>hist(w) 绘制直方图<br>hist(w, 10) 增加直方图中的条数</p><p>eye(3) 生成 3 阶单位矩阵</p><p>size(A) 返回矩阵 A 的行列数<br>size(A, 1) 返回矩阵的行数<br>size(A, 2) 返回矩阵的列数</p><p>length(A) 返回矩阵的最大维数</p><p>load featuresX.dat 载入文件(文件被载入后，相应的变量为 featureX)</p><p>who 列出变量<br>whos 列出变量及其详细信息</p><p>clear featureX 清除变量</p><p>v &#x3D; featureX(1:10) 将变量 featureX 中的前十个数存入到变量 v 中（这里假设 featureX 只有一列）</p><p>save hello.mat v 将变量 v 存储到硬盘上且文件名e为 hello.mat（这里是以二进制文本的形式存储的）</p><p>save hello.txt v -ascii （这里是以 ASCII 文本的形式存储数据，使人可以看懂）</p><p>A(3, 2)  访问矩阵 A 的第三行第二列的数据<br>A(3, :) 访问矩阵 A 的第三行的所有数据<br>A(:, 3) 访问矩阵 A 的第三列的所有数据<br>A([1,3], :) 访问矩阵 A 的第一行和第三行的所有元素<br>A &#x3D; [A, [1; 2; 3;] 在矩阵 A 的右边再添一列<br>A[:] 把 A 中的所有元素放入一个变量中(一个一行 n 列的j向量)</p><p>C &#x3D; [A B] 把矩阵 A 和 B 连在一起（A 在左边，B 在右边）<br>C &#x3D; [A; B] A 在上边，B 在下边</p><p>A  .*  B 内积<br>A .^ 2  A 中每个元素平方一下<br>1 .&#x2F; A 矩阵 A 每个元素倒数一下<br>log(A) 取对数（以 2 为底）<br>exp(A) e 的每个元素的次方<br>abs(A) 绝对值<br>A + 1 每个元素都加 1<br>-A 每个元素取相反数<br>A’ 转置</p><p>A &gt; 1 比较每个元素与 1 的大小<br>find(A &gt; 1) 找出 A 中每个大于 1 的元素</p><p>sum(A)<br>prod(A) 相乘每个元素<br>floor(A)<br>ceil(A)</p><p>max(A) 每一列中的最大值</p><p>max(A, [],  1) 返回每列的最大值</p><p>max(A, [],  2) 返回每行的最大值</p><p>flipud(eye(3)) 变主对角线为副对角线</p><p>pinv(A) 逆</p><hr><p>画图<br>plot(t, y1) 横轴是 t 纵轴是 y<br>hold on;<br>plot(t, y2, ‘r’) 红色<br>xlabel(‘time’) 标签<br>ylabel(‘value’)<br>legend(‘sin’, ‘cos’) 图例<br>title(‘my plots’) 标题<br>print -dpng ‘myplot.png’ 保存图像</p>]]></content>
      
      
      <categories>
          
          <category> Matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
            <tag> 矩阵运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保险科普</title>
      <link href="/2019/05/20/%E4%BF%9D%E9%99%A9%E7%A7%91%E6%99%AE/"/>
      <url>/2019/05/20/%E4%BF%9D%E9%99%A9%E7%A7%91%E6%99%AE/</url>
      
        <content type="html"><![CDATA[<p>这是一篇关于保险的科普文。文中记载的内容，是我在听完一堂关于保险的讲座后，结合老师给的 PPT 所做的总结。  好了，废话不多说，进入主题！</p><span id="more"></span><h2 id="保险的分类"><a href="#保险的分类" class="headerlink" title="保险的分类"></a>保险的分类</h2><p>首先我们来了解一下保险的大分类，看下面的图。</p><p><img src="https://i.loli.net/2019/05/21/5ce413b98bd3224441.jpg" alt="图1"></p><p>保险分为两大类，一类是<strong>保障型</strong>，另一类呢，是<strong>理财型</strong>。通常来说，保障型保险可以理解为是纯做保障的，分为四类，分别是重疾险，意外险，医疗险和寿险。那什么是理财型保险呢，简单来说就是带身故赔付的理财产品。大家常听到的<strong>两全险</strong>，<strong>分红险</strong>，<strong>万能险</strong>等等都是理财型保险。</p><h2 id="买保险的原则"><a href="#买保险的原则" class="headerlink" title="买保险的原则"></a>买保险的原则</h2><p>这里要给大家强调买保险的第一个原则——保障型保险和理财型保险要分开买。既想有保障，又想有理财收益，这种想法往往会让你掉到买保险最大的坑里去。为什么这么说呢，因为这类保险产品往往打着有病赔钱，没病返钱的旗号，如果发生了风险，比如说疾病、意外身故，它可以赔钱，如果没发生这些风险，平平安安的，它会把钱返还给大家。这听起来是不是特别好啊，就是抓住了大家的这种心理，很多保险业务员都特别喜欢卖这类返还型的保险。</p><p><img src="https://i.loli.net/2019/05/21/5ce414f9cdd0312524.jpg" alt="图2"></p><h2 id="保障型和理财型保险"><a href="#保障型和理财型保险" class="headerlink" title="保障型和理财型保险"></a>保障型和理财型保险</h2><h3 id="理财型保险"><a href="#理财型保险" class="headerlink" title="理财型保险"></a>理财型保险</h3><p>其实返还型保险的原理特别简单，实际上大家交了两份钱，同时买了两份保险，一份是保障型，另一份是理财型。保障型的保险，为风险提供保障，而为理财型保险交的那部分钱，保险公司自己拿去投资了。投资收益的大头，保险公司自己拿了，分了一小部分给大家而已，所以在相同保障下，返还型保险比保障型要贵非常多，这不仅无形中会增大你的经济压力，而且会导致预算有限的情况下，你的保额大打折扣。</p><p>比如，对于一个 30 岁的女性来说：30 万保额的定期重疾险，如果买保障型的话，只需要 3000 元左右，买返还型的话呢，可能就需要一万元保费了，同样的钱，如果用来买保障型保险的话，一万元保费可以买到 100 万保额的终身重疾险。</p><p><img src="https://i.loli.net/2019/05/21/5ce4161a1b5a173965.jpg" alt="图3"></p><p>保险姓保，保险的作用就应该是提供保障，买保险和理财千万不要混在一起，很多人既想要保障，又想要理财收益，但结果呢，往往是两项都没做好，大家弄懂了保障型保险和理财型保险的区别之后，下面我给大家仔细介绍一下保障型保险。</p><h3 id="保障型保险"><a href="#保障型保险" class="headerlink" title="保障型保险"></a>保障型保险</h3><p>保障型保险按作用分为两大类，其中重疾险和医疗险侧重于保自己。这两种保险主要是保证自己有钱治病，有钱养病；寿险和意外险侧重于保家人。这两种保险用来确保自己不幸发生身故时,家人的生活不会受到太大影响，不会出现家人完全没有经济来源的情况。</p><p><img src="https://i.loli.net/2019/05/21/5ce416c90e2a562948.jpg" alt="图4"></p><p>我们每个人啊，不仅是独立的个体，而且可能是儿子，女儿，爸爸妈妈，丈夫和妻子。所以我们不仅要照顾好自己，还得保证有病、有灾的时候有足够的钱去应对。此外，我们还应该想办法保证自己的不幸，不要对家人的生活产生太大的影响，让家人在任何情况下都能拥有幸福的生活。所以，保险是我们<strong>爱</strong>与<strong>责任</strong>的必须选择。因此对于每个家庭而言，保险都是必不可少的，接下来我给大家详细讲解一下四类保险的保障范围和作用。</p><h2 id="保障范围和作用"><a href="#保障范围和作用" class="headerlink" title="保障范围和作用"></a>保障范围和作用</h2><p>首先，我们看一下医疗险。关于医疗险，大家最常问的问题是，医疗险和医保有啥区别呢，我有了医保，医保也能报销医疗费，那我还需要医疗险吗，对于这个问题，我们来看一下医保的报销范围就知道答案了。</p><p><img src="https://i.loli.net/2019/05/21/5ce41964c7acc45205.jpg" alt="图5"></p><p>我们一起来看一下这张图。首先，医保报销会有起付线和封顶线。起付线之上，封顶线之下才能报销。并且就算在能报销的范围内也做不到 100% 全报销。其次，在治疗的过程中，医保范围外的药品是不能报销的，而大多数效果更好的进口药都不在医保范围内。所以，即使有了医保，我们也还是需要医疗险去帮我们覆盖医保所不能覆盖的部分。现在市面上有很多不错的百万医疗险，只需要几百块钱就能买到——每年 100 的保额，应该说是非常实惠的，所以我建议你可以直接买百万医疗险。</p><p><img src="https://i.loli.net/2019/05/21/5ce41a1b3858b96459.jpg" alt="图6"></p><p>讲完医疗险，接下来就是重疾险，重疾险可以说是保险的核心险种。经常会有同学疑问，买了医疗险以后，生大病就能报销医疗费了，那是不是就可以不用买重疾险了呢，重疾险和医疗险是不是会重复呢，答案是完全不重复，重疾险更加重要。</p><p>医疗险都是短期的，通常都是一年期，每年都需要重新买，万一什么时候保险公司不卖类似的产品了，那下一年的保障就断档了，这就是所谓的停售风险。但重疾险通常都是长期的。虽然费用也是每年一交，但是保障是长期的，一旦合同生效，即使产品下架了，也不影响合同履行。</p><p><img src="https://i.loli.net/2019/05/21/5ce41a62f018e80806.jpg" alt="图7"></p><p>其次是关于收入损失的补偿，医疗险是<u>实报实销型</u>(意思是，你住院看病花了多少钱，就可以报销多少钱)，所以只能覆盖医疗费用。但是你想想，重大疾病造成的经济损失，可不仅仅是医疗费用，重大疾病往往会造成长期不能工作，如果工作一年可以挣 20 万元，那么每年的这 20 万元收入，也是经济损失啊，这就叫收入损失。重疾险是只要符合条件就可以一次性赔付一笔钱，这笔钱用来干啥都行，可以用来支付医疗费用，也可以用来后期的护理费用，弥补收入损失恰恰是重疾险诞生的初衷。</p><h2 id="重疾险注意事项"><a href="#重疾险注意事项" class="headerlink" title="重疾险注意事项"></a>重疾险注意事项</h2><p>购买重疾险时有三点要特别注意。</p><p><img src="https://i.loli.net/2019/05/21/5ce41b75a3a1059808.jpg" alt="图8"></p><p>第一，<strong>是否包含轻症赔付很重要</strong>。轻症就是重大疾病的早期阶段，随着医疗水平的进步，很多疾病都可以在早期阶段被发现和治愈。为了能在早期阶段同样得到用来治病的钱，选择有轻症保障的重疾险是十分重要的。</p><p>第二，<strong>小心多次赔付的噱头</strong>。随着保险行业的不断发展，保险赔付也从一次赔付发展到了多次赔付，甚至同时多次重症加多次轻症赔付。通常来说，三次重症赔付加三次轻症赔付，对于大部分人来说就已经够用了。目前有些重疾险的赔付次数到了五次，甚至八次，那是完全没有必要的，只会把保费给拉高。一个人连得八次重大疾病，这得是多低的概率啊。</p><p>第三，<strong>保额充足最重要</strong>，重疾险保额 30 万是最基础的。根据目前的医疗水平和物价水平，额度最好是 50 万起。我们买保险不是图心里安慰，而是想让保险真正地发挥作用，要想达到这个目的，保额充足是必须的。</p><h2 id="意外险"><a href="#意外险" class="headerlink" title="意外险"></a>意外险</h2><p>聊完重疾险，我们再来看看意外险。</p><p><img src="https://i.loli.net/2019/05/21/5ce41ce96d64384600.jpg" alt="图9"></p><p>如果不幸遭遇意外，严重的话，会造成身故或者伤残，即使没有那么严重，也需要花费医疗费用。意外险就是针对这两种情况进行保障的，意外险非常的便宜，比如 50 万保额的意外险只需要 100 多块钱。所以意外险的保额可以配置的高一些。由于意外险需要覆盖因残疾不能工作而导致的收入损失，所以一般来说，意外险的保额起码要达到五年的年收入，如果五年的年收入还不足 50 万的话，你可以直接买 50 万保额的意外险。</p><h2 id="寿险"><a href="#寿险" class="headerlink" title="寿险"></a>寿险</h2><p>我们再来说最后一个险种，寿险。</p><p><img src="https://i.loli.net/2019/05/21/5ce41da800ec994898.jpg" alt="图10"></p><p>寿险的作用是身故时赔付一笔钱。死亡才赔付，很多人会认为这有什么用啊，其实如果一个人在家里是主要的收入来源，也就是一个家庭的经济支柱，那这个人是一定要买寿险的，为啥呢，因为一个家庭往往有房贷，有车贷，有孩子需要抚养，有老人需要赡养，这些都是家庭责任，家庭责任是由家庭经济支柱来承担的，一旦经济支柱不幸身故了，家庭责任就没有人可以很好地承担了，那所有家庭成员的生活都会受到非常大的影响，尤其是孩子的教育和老人的养老。</p><p>所以说，给家庭经济支柱配置寿险是非常有必要的。这里有一点要特别强调，孩子是没有家庭责任的，因此不需要给孩子配置寿险。在这一点上，我们发现市面上很多产品的设计都很坑，因为市面上绝大多数儿童重疾险都有<strong>身故赔偿</strong>，也就是附带了寿险，而且一般还是终身寿险。终身寿险的儿童重疾险比纯重疾险的价格要高出一倍，对于一个孩子来说，这种终身寿险是完全没有必要的。</p><p>讲到这里，大家可能会问了，为什么那么多保险代理人给大家推荐的，反而都是强制附加了寿险的儿童重疾险，甚至有些儿童重疾险产品把寿险作为主险，而最重要的重疾险却成了附加险呢。保险代理人这么做是有原因的，在过去，互联网不发达，信息不对称，在买保险这件事上，基本上是代理人说啥就是啥，大家无法对比，只能接受。所以这就给了很多代理人钻空子的机会。</p><p>随着互联网保险的崛起，现在大家有机会接触到更多的性价比很高的好产品，并且通过各种第三方平台或者在保险顾问的帮助下，公平公正地去对比各式各样的产品。如此一来，我们不仅在产品上可以挑到高性价比的产品，而且还可以根据自己的需求量身定制保障方案，让自己买到的产品性价比高且适合自己。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总结一下，医疗险，重疾险，意外险和寿险这四大类保险的作用各不相同，合理的根据家庭需求进行配置，几乎可以覆盖日常生活中可能发生的所有风险了。</p><p><img src="https://i.loli.net/2019/05/21/5ce41f59452ad17046.jpg" alt="图11"></p><h2 id="理赔"><a href="#理赔" class="headerlink" title="理赔"></a>理赔</h2><p>了解完这四种主要的保障性保险后，还有一个很重要的问题，为什么有的人买了保险，以后会出现理赔难的问题呢，怎么确保买了保险之后能顺利理赔呢 ? 这就需要我们在买保险前做好充分的“预习”了。比如说：</p><blockquote><p>关键点：做好健康告知<br> 原则：问啥答啥、不问不答、如实告知</p></blockquote><h2 id="配置保险"><a href="#配置保险" class="headerlink" title="配置保险"></a>配置保险</h2><p>接下来我们再来看看如何合理地配置家庭成员的保险。</p><p><img src="https://i.loli.net/2019/05/22/5ce42114abdd258714.jpg" alt="图13"><br><img src="https://i.loli.net/2019/05/22/5ce4213ca0f5916572.jpg" alt="图14"><br><img src="https://i.loli.net/2019/05/22/5ce4214bf40a960726.jpg" alt="图15"></p><p>我们都知道，每个人的健康状况都会随着年龄的增长而变差，特别是到了父母这个年纪，高血压，糖尿病高发，非常需要保险。但是对于有三高问题的父母来说，重疾险和大多数医疗险都已经无法购买了。虽然防癌险会比重疾险的健康告知更为宽松，也就是说对于身体的健康要求没有那么高，但也不是没有要求的，比如肝硬化，肿块，息肉，囊肿等等，也会造成无法购买防癌险。不仅是老人，只要不是完全健康的人群，在保险购买上都需要额外注意，今天大家一定要在买保险时咨询专业人士，这样才能更好地实现投保，并且保证之后不会出现理赔纠纷。</p><p>不得不强调一句，保险真的是越早买越好，因为随着年龄的增长，保险只会越来越贵，如果健康出现了问题，买保险还需要加费，甚至想买保险都买不了。<br>以上讲的都是原则和知识，但是每个家庭的需求是千差万别的，所以一定要为自己的家庭量身定做保险配置方案。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后总结一下。</p><ul><li>第一，理财和保障分开做，不要买返还型保险；</li><li>第二，优先给家庭经济支柱配置保险；</li><li>第三，考虑到性价比，不要给孩子买捆绑了寿险的重疾险；</li><li>第四，预算再有限，都不要妥协保障额度；</li><li>第五，不能人云亦云，要基于自己的家庭情况进行个性化的保险配置。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保险 </tag>
            
            <tag> 保险科普 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>偷换论题的一个例子</title>
      <link href="/2019/05/20/%E5%81%B7%E6%8D%A2%E8%AE%BA%E9%A2%98%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90/"/>
      <url>/2019/05/20/%E5%81%B7%E6%8D%A2%E8%AE%BA%E9%A2%98%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>“你行你上”是一种偷换论题的谬误。这句话逻辑为：如果你行，那么你上；如果你不上，那么你不行。它讨论的是 “你行不行” 的问题。但原来的问题应该是讨论另一个人行不行，即“他行不行”的问题。<br>“你行不行” 跟 “他行不行” 没有关系，就算 “你不行” ，也论证不出 “他行”。比如我说某球星打不好篮球，A 同学说你行你上啊，这其实就是一个无效的反驳，因为我讨论的是那个球星能不能打好，而 A 同学把问题换成了我能不能打好，使我们讨论的不再是同一件事。就算我打不好篮球，也说明不了那个球星能打好篮球。再举个更加荒唐一点的例子，比如我说这个空调不太制冷啊，A 同学说你行你上啊。即使我不能像空调一样制造冷气，但这也不能论证该空调的制冷效果很好。这两个例子的本质问题是一样的。<br>所以说，“你行你上”的人犯了偷换论题的谬误。通常被逼到偷换论题的地步，已经说明对手无法用事实和推理来支持他的观点了。若是在辩论时，则已可判输。</p><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> 辩论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机杂识</title>
      <link href="/2019/04/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9D%82%E8%AF%86/"/>
      <url>/2019/04/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9D%82%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>内存</strong>中的堆栈和<strong>数据结构</strong>中的堆栈不是同一个概念。可以说, 内存中的堆栈是真实存在的物理区, 而数据结构中的堆栈是抽象旳数据存储结构。<br>内存空间在逻辑上分为三部分: 代码区、静态数据区和动态数据区(动态数据区又分为栈区和堆区)。<br>代码区:存储方法体的二进制代码。高级调度(作业调度)、中级调度(内存调度)、低级调度(进程调度), 控制代码区执行代码的切换。<br>静态数据区: 存储全局变量、静态变量、常量, 常量包括 final 修饰的常量和 String 常量。系统自动分配和回收。<br>栈区: 存储运行方法的形参、局部变量、返回值。由系统自动分配和回收。<br>堆区: new 一个对象的引用或地址存储在栈区, 指向该对象存储在堆区中的真实数据。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索策略</title>
      <link href="/2019/04/20/%E6%90%9C%E7%B4%A2%E7%AD%96%E7%95%A5/"/>
      <url>/2019/04/20/%E6%90%9C%E7%B4%A2%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" async  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"></script><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在这个信息碎片化的时代，上网搜索任意一个关键词，都会显示与之相关的上百万条信息，而有价值的信息少之又少。但有基础搜索思维和技巧的人，工作已经比大多数人都高效。好了，这段话是随便抄的。下面开始进入正题。</p><span id="more"></span><h2 id="搜索引擎技巧"><a href="#搜索引擎技巧" class="headerlink" title="搜索引擎技巧"></a>搜索引擎技巧</h2><ol><li><p><strong>口语词转化成搜索关键词</strong></p><blockquote><p>例：<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 口语：如何将 iphone 上的照片传入电脑<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; \( \color{red}{\Downarrow} \)<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关键词：iphone 照片 传入电脑</p></blockquote></li><li><p><strong>搜索结果限定在某个网站</strong></p><blockquote><p>例：<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关键词 + 空格 + site: + example.com<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; \( \color{red}{\Downarrow} \)<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 美国大选 site: xinhuanet.com</p></blockquote></li><li><p><strong>搜索某种类型的文件</strong></p><blockquote><p>例：<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关键词 + 空格 + filetype: + 文件格式<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; \( \color{red}{\Downarrow} \)<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 考研英语真题 filetype: pdf</p></blockquote></li><li><p><strong>搜索特定时间内的关键词信息</strong></p><blockquote><p>例：<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关键词 + 空格 + 年份..年份<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; \( \color{red}{\Downarrow} \)<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 知识付费 2015..2018</p></blockquote></li><li><p><strong>过滤某关键词</strong></p><blockquote><p>例：<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关键词 + 空格 -关键词<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; \( \color{red}{\Downarrow} \)<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 红黑树 -csdn</p></blockquote></li><li><p><strong>将关键词限定在标题中</strong></p><blockquote><p>例：<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关键词 + 空格 + intitle: + 被限定的关键词<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; \( \color{red}{\Downarrow} \)<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 刘亦菲 intitle: 迪奥</p></blockquote></li><li><p><strong>将搜索范围限定在 url 链接中</strong></p><blockquote><p>例：<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关键词 + allinurl: 关键词<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; \( \color{red}{\Downarrow} \)<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; minibook intitle: contact us</p></blockquote></li></ol><h2 id="推荐网站"><a href="#推荐网站" class="headerlink" title="推荐网站"></a>推荐网站</h2><ol><li><a href="http://quanmama.com/">券妈妈</a> (电商平台优惠券查找)</li><li><a href="http://hao.199it.com/">大数据导航</a> (导航网站)</li><li><a href="https://search.chongbuluo.com/">虫部落快搜</a> (资源搜索)</li><li><a href="http://index.baidu.com/v2/index.html#/">百度指数</a> (百度搜索指数)</li></ol><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 有个地方我觉得朱丹老师说得很好————任何一个行业，尤其是与民生息息相关的行业，发展到一定程度，一定会有专业垂直服务的，而且为了方便用户的使用场景，这种服务通常手机端做得比 PC 端更好，更便捷。举个例子，对于普通人来说，如果你觉得身体有点不舒服，并且想获得在线帮助的话。直接去百度搜索，出来的全是广告······这个时候，你就可以打开手机的应用商店搜索关键词 “医生”，搜索结果较百度要好许多。</p>]]></content>
      
      
      <categories>
          
          <category> 搜索策略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
